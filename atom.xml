<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://anoxiahub.github.io</id>
    <title></title>
    <subtitle>欢迎来到智慧笔记~这里主要会记录编程学习笔记🌸</subtitle>
    <icon>https://anoxiahub.github.io/images/favicon.ico</icon>
    <link href="https://anoxiahub.github.io" />
    <author>
      <name>anoxia</name>
    </author>
    <updated>2023-08-14T16:00:00.000Z</updated>
    <category term="起源" />
    <entry>
        <id>https://anoxiahub.github.io/interview/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
        <title>多线程相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;有关多线程内容可以看&lt;a href=&#34;/java/JUC%E8%AF%A6%E8%A7%A3&#34;&gt;JUC详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：聊一下并行和并发有什么区别？&#34;&gt;&lt;a href=&#34;#面试官：聊一下并行和并发有什么区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：聊一下并行和并发有什么区别？&#34;&gt;&lt;/a&gt;面试官：聊一下并行和并发有什么区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是这样的~~&lt;/p&gt;
&lt;p&gt;现在都是多核CPU，在多核CPU下&lt;/p&gt;
&lt;p&gt;并发是同一时间应对多件事情的能力，多个线程轮流使用一个或多个CPU&lt;/p&gt;
&lt;p&gt;并行是同一时间动手做多件事情的能力，4核CPU同时执行4个线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：说一下线程和进程的区别？&#34;&gt;&lt;a href=&#34;#面试官：说一下线程和进程的区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：说一下线程和进程的区别？&#34;&gt;&lt;/a&gt;面试官：说一下线程和进程的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务&lt;/li&gt;
&lt;li&gt;不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间&lt;/li&gt;
&lt;li&gt;线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如果在java中创建线程有哪些方式？&#34;&gt;&lt;a href=&#34;#面试官：如果在java中创建线程有哪些方式？&#34; class=&#34;headerlink&#34; title=&#34;面试官：如果在java中创建线程有哪些方式？&#34;&gt;&lt;/a&gt;面试官：如果在java中创建线程有哪些方式？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在java中一共有四种常见的创建方式，分别是：继承Thread类、实现runnable接口、实现Callable接口、线程池创建线程。通常情况下，我们项目中都会采用线程池的方式创建线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，刚才你说的runnable-和-callable-两个接口创建线程有什么不同呢？&#34;&gt;&lt;a href=&#34;#面试官：好的，刚才你说的runnable-和-callable-两个接口创建线程有什么不同呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，刚才你说的runnable 和 callable 两个接口创建线程有什么不同呢？&#34;&gt;&lt;/a&gt;面试官：好的，刚才你说的runnable 和 callable 两个接口创建线程有什么不同呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是这样的~&lt;/p&gt;
&lt;p&gt;最主要的两个线程一个是有返回值，一个是没有返回值的。&lt;/p&gt;
&lt;p&gt;Runnable 接口run方法无返回值；Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果&lt;/p&gt;
&lt;p&gt;还有一个就是，他们异常处理也不一样。Runnable接口run方法只能抛出运行时异常，也无法捕获处理；Callable接口call方法允许抛出异常，可以获取异常信息&lt;/p&gt;
&lt;p&gt;在实际开发中，如果需要拿到执行的结果，需要使用Callalbe接口创建线程，调用FutureTask.get()得到可以得到返回值，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：线程包括哪些状态，状态之间是如何变化的？&#34;&gt;&lt;a href=&#34;#面试官：线程包括哪些状态，状态之间是如何变化的？&#34; class=&#34;headerlink&#34; title=&#34;面试官：线程包括哪些状态，状态之间是如何变化的？&#34;&gt;&lt;/a&gt;面试官：线程包括哪些状态，状态之间是如何变化的？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在JDK中的Thread类中的枚举State里面定义了6中线程的状态分别是：新建、可运行、终结、阻塞、等待和有时限等待六种。&lt;/p&gt;
&lt;p&gt;关于线程的状态切换情况比较多。我分别介绍一下&lt;/p&gt;
&lt;p&gt;当一个线程对象被创建，但还未调用 start 方法时处于&lt;strong&gt;新建&lt;/strong&gt;状态，调用了 start 方法，就会由&lt;strong&gt;新建&lt;/strong&gt;进入&lt;strong&gt;可运行&lt;/strong&gt;状态。如果线程内代码已经执行完毕，由&lt;strong&gt;可运行&lt;/strong&gt;进入&lt;strong&gt;终结&lt;/strong&gt;状态。当然这些是一个线程正常执行情况。&lt;/p&gt;
&lt;p&gt;如果线程获取锁失败后，由&lt;strong&gt;可运行&lt;/strong&gt;进入 Monitor 的阻塞队列&lt;strong&gt;阻塞&lt;/strong&gt;，只有当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的&lt;strong&gt;阻塞&lt;/strong&gt;线程，唤醒后的线程进入&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/p&gt;
&lt;p&gt;如果线程获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从&lt;strong&gt;可运行&lt;/strong&gt;状态释放锁&lt;strong&gt;等待&lt;/strong&gt;状态，当其它持锁线程调用 notify() 或 notifyAll() 方法，会恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/p&gt;
&lt;p&gt;还有一种情况是调用 sleep(long) 方法也会从&lt;strong&gt;可运行&lt;/strong&gt;状态进入&lt;strong&gt;有时限等待&lt;/strong&gt;状态，不需要主动唤醒，超时时间到自然恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：嗯，好的，刚才你说的线程中的-wait-和-sleep方法有什么不同呢？&#34;&gt;&lt;a href=&#34;#面试官：嗯，好的，刚才你说的线程中的-wait-和-sleep方法有什么不同呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：嗯，好的，刚才你说的线程中的 wait 和 sleep方法有什么不同呢？&#34;&gt;&lt;/a&gt;面试官：嗯，好的，刚才你说的线程中的 wait 和 sleep方法有什么不同呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它们两个的相同点是都可以让当前线程暂时放弃 CPU 的使用权，进入阻塞状态。&lt;/p&gt;
&lt;p&gt;不同点主要有三个方面：&lt;/p&gt;
&lt;p&gt;第一：方法归属不同&lt;/p&gt;
&lt;p&gt;sleep(long) 是 Thread 的静态方法。而 wait()，是 Object 的成员方法，每个对象都有&lt;/p&gt;
&lt;p&gt;第二：线程醒来时机不同&lt;/p&gt;
&lt;p&gt;线程执行 sleep(long) 会在等待相应毫秒后醒来，而 wait() 需要被 notify 唤醒，wait() 如果不唤醒就一直等下去&lt;/p&gt;
&lt;p&gt;第三：锁特性不同&lt;/p&gt;
&lt;p&gt;wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制&lt;/p&gt;
&lt;p&gt;wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（相当于我放弃 cpu，但你们还可以用）&lt;/p&gt;
&lt;p&gt;而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（相当于我放弃 cpu，你们也用不了）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，我现在举一个场景，你来分析一下怎么做，新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？&#34;&gt;&lt;a href=&#34;#面试官：好的，我现在举一个场景，你来分析一下怎么做，新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，我现在举一个场景，你来分析一下怎么做，新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？&#34;&gt;&lt;/a&gt;面试官：好的，我现在举一个场景，你来分析一下怎么做，新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯~~，我思考一下 （适当的思考或想一下属于正常情况，脱口而出反而太假[背诵痕迹]）&lt;/p&gt;
&lt;p&gt;可以这么做，在多线程中有多种方法让线程按特定顺序执行，可以用线程类的&lt;strong&gt;join&lt;/strong&gt;()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。&lt;/p&gt;
&lt;p&gt;比如说：&lt;/p&gt;
&lt;p&gt;使用join方法，T3调用T2，T2调用T1，这样就能确保T1就会先完成而T3最后完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：在我们使用线程的过程中，有两个方法。线程的-run-和-start-有什么区别？&#34;&gt;&lt;a href=&#34;#面试官：在我们使用线程的过程中，有两个方法。线程的-run-和-start-有什么区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：在我们使用线程的过程中，有两个方法。线程的 run()和 start()有什么区别？&#34;&gt;&lt;/a&gt;面试官：在我们使用线程的过程中，有两个方法。线程的 run()和 start()有什么区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;start方法用来启动线程，通过该线程调用run方法执行run方法中所定义的逻辑代码。start方法只能被调用一次。run方法封装了要被线程执行的代码，可以被调用多次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那如何停止一个正在运行的线程呢？&#34;&gt;&lt;a href=&#34;#面试官：那如何停止一个正在运行的线程呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那如何停止一个正在运行的线程呢？&#34;&gt;&lt;/a&gt;面试官：那如何停止一个正在运行的线程呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;有三种方式可以停止线程&lt;/p&gt;
&lt;p&gt;第一：可以使用退出标志，使线程正常退出，也就是当run方法完成后线程终止，一般我们加一个标记&lt;/p&gt;
&lt;p&gt;第二：可以使用线程的stop方法强行终止，不过一般不推荐，这个方法已作废&lt;/p&gt;
&lt;p&gt;第三：可以使用线程的interrupt方法中断线程，内部其实也是使用中断标志来中断线程&lt;/p&gt;
&lt;p&gt;我们项目中使用的话，建议使用第一种或第三种方式中断线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：讲一下synchronized关键字的底层原理？&#34;&gt;&lt;a href=&#34;#面试官：讲一下synchronized关键字的底层原理？&#34; class=&#34;headerlink&#34; title=&#34;面试官：讲一下synchronized关键字的底层原理？&#34;&gt;&lt;/a&gt;面试官：讲一下synchronized关键字的底层原理？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~好的，&lt;/p&gt;
&lt;p&gt;synchronized 底层使用的JVM级别中的Monitor 来决定当前线程是否获得了锁，如果某一个线程获得了锁，在没有释放锁之前，其他线程是不能或得到锁的。synchronized 属于悲观锁。&lt;/p&gt;
&lt;p&gt;synchronized 因为需要依赖于JVM级别的Monitor ，相对性能也比较低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，你能具体说下Monitor-吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，你能具体说下Monitor-吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，你能具体说下Monitor 吗？&#34;&gt;&lt;/a&gt;面试官：好的，你能具体说下Monitor 吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因&lt;/p&gt;
&lt;p&gt;monitor内部维护了三个变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WaitSet：保存处于Waiting状态的线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EntryList：保存处于Blocked状态的线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Owner：持有锁的线程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有一个线程获取到的标志就是在monitor中设置成功了Owner，一个monitor中只能有一个Owner&lt;/p&gt;
&lt;p&gt;在上锁的过程中，如果有其他线程也来抢锁，则进入EntryList 进行阻塞，当获得锁的线程执行完了，释放了锁，就会唤醒EntryList 中等待的线程竞争锁，竞争的时候是非公平的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，那关于synchronized-的锁升级的情况了解吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，那关于synchronized-的锁升级的情况了解吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，那关于synchronized 的锁升级的情况了解吗？&#34;&gt;&lt;/a&gt;面试官：好的，那关于synchronized 的锁升级的情况了解吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，知道一些（要谦虚）&lt;/p&gt;
&lt;p&gt;Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。&lt;/p&gt;
&lt;p&gt;重量级锁：底层使用的Monitor实现，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。&lt;/p&gt;
&lt;p&gt;轻量级锁：线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志，相对重量级锁性能提升很多。每次修改都是CAS操作，保证原子性&lt;/p&gt;
&lt;p&gt;偏向锁：一段很长的时间内都只被一个线程使用锁，可以使用了偏向锁，在第一次获得锁时，会有一个CAS操作，之后该线程再获取锁，只需要判断mark word中是否是自己的线程id即可，而不是开销相对较大的CAS命令&lt;/p&gt;
&lt;p&gt;一旦锁发生了竞争，都会升级为重量级锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？&#34;&gt;&lt;a href=&#34;#面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？&#34;&gt;&lt;/a&gt;面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，其实，在高并发下，我们可以采用ReentrantLock来加锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：嗯，那你说下ReentrantLock的使用方式和底层原理？&#34;&gt;&lt;a href=&#34;#面试官：嗯，那你说下ReentrantLock的使用方式和底层原理？&#34; class=&#34;headerlink&#34; title=&#34;面试官：嗯，那你说下ReentrantLock的使用方式和底层原理？&#34;&gt;&lt;/a&gt;面试官：嗯，那你说下ReentrantLock的使用方式和底层原理？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;好的，&lt;/p&gt;
&lt;p&gt;ReentrantLock是一个可重入锁:，调用 lock 方 法获取了锁之后，再次调用 lock，是不会再阻塞，内部直接增加重入次数 就行了，标识这个线程已经重复获取一把锁而不需要等待锁的释放。&lt;/p&gt;
&lt;p&gt;ReentrantLock是属于juc报下的类，属于api层面的锁，跟synchronized一样，都是悲观锁。通过lock()用来获取锁，unlock()释放锁。&lt;/p&gt;
&lt;p&gt;它的底层实现原理主要利用&lt;strong&gt;CAS+AQS队列&lt;/strong&gt;来实现。它支持公平锁和非公平锁，两者的实现类似&lt;/p&gt;
&lt;p&gt;构造方法接受一个可选的公平参数（&lt;strong&gt;默认非公平锁&lt;/strong&gt;），当设置为true时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，刚才你说了CAS和AQS，你能介绍一下吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，刚才你说了CAS和AQS，你能介绍一下吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，刚才你说了CAS和AQS，你能介绍一下吗？&#34;&gt;&lt;/a&gt;面试官：好的，刚才你说了CAS和AQS，你能介绍一下吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;好的。&lt;/p&gt;
&lt;p&gt;CAS的全称是： Compare And Swap(比较再交换);它体现的一种乐观锁的思想，在无锁状态下保证线程操作数据的原子性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CAS使用到的地方很多：AQS框架、AtomicXXX类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在操作共享变量的时候使用的自旋锁，效率上更高一些&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CAS的底层是调用的Unsafe类中的方法，都是操作系统提供的，其他语言实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AQS的话，其实就一个jdk提供的类AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架。&lt;/p&gt;
&lt;p&gt;内部有一个属性 state 属性来表示资源的状态，默认state等于0，表示没有获取锁，state等于1的时候才标明获取到了锁。通过cas 机制设置 state 状态&lt;/p&gt;
&lt;p&gt;在它的内部还提供了基于 FIFO 的等待队列，是一个双向列表，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;tail 指向队列最后一个元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;head  指向队列中最久的一个元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中我们刚刚聊的ReentrantLock底层的实现就是一个AQS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：synchronized和Lock有什么区别&#34;&gt;&lt;a href=&#34;#面试官：synchronized和Lock有什么区别&#34; class=&#34;headerlink&#34; title=&#34;面试官：synchronized和Lock有什么区别 ?&#34;&gt;&lt;/a&gt;面试官：synchronized和Lock有什么区别 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~，好的，主要有三个方面不太一样&lt;/p&gt;
&lt;p&gt;第一，语法层面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现，退出同步代码块锁会自动释放&lt;/li&gt;
&lt;li&gt;Lock 是接口，源码由 jdk 提供，用 java 语言实现，需要手动调用 unlock 方法释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二，功能层面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能&lt;/li&gt;
&lt;li&gt;Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量，同时Lock 可以实现不同的场景，如 ReentrantLock， ReentrantReadWriteLock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三，性能层面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖&lt;/li&gt;
&lt;li&gt;在竞争激烈时，Lock 的实现通常会提供更好的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统合来看，需要根据不同的场景来选择不同的锁的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：死锁产生的条件是什么？&#34;&gt;&lt;a href=&#34;#面试官：死锁产生的条件是什么？&#34; class=&#34;headerlink&#34; title=&#34;面试官：死锁产生的条件是什么？&#34;&gt;&lt;/a&gt;面试官：死锁产生的条件是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，是这样的，一个线程需要同时获取多把锁，这时就容易发生死锁，举个例子来说：&lt;/p&gt;
&lt;p&gt;t1 线程获得A对象锁，接下来想获取B对象的锁&lt;/p&gt;
&lt;p&gt;t2 线程获得B对象锁，接下来想获取A对象的锁 &lt;/p&gt;
&lt;p&gt;这个时候t1线程和t2线程都在互相等待对方的锁，就产生了死锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那如果产出了这样的，如何进行死锁诊断？&#34;&gt;&lt;a href=&#34;#面试官：那如果产出了这样的，如何进行死锁诊断？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那如果产出了这样的，如何进行死锁诊断？&#34;&gt;&lt;/a&gt;面试官：那如果产出了这样的，如何进行死锁诊断？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;这个也很容易，我们只需要通过jdk自动的工具就能搞定&lt;/p&gt;
&lt;p&gt;我们可以先通过jps来查看当前java程序运行的进程id&lt;/p&gt;
&lt;p&gt;然后通过jstack来查看这个进程id，就能展示出来死锁的问题，并且，可以定位代码的具体行号范围，我们再去找到对应的代码进行排查就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：请谈谈你对-volatile-的理解&#34;&gt;&lt;a href=&#34;#面试官：请谈谈你对-volatile-的理解&#34; class=&#34;headerlink&#34; title=&#34;面试官：请谈谈你对 volatile 的理解&#34;&gt;&lt;/a&gt;面试官：请谈谈你对 volatile 的理解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~&lt;/p&gt;
&lt;p&gt;volatile 是一个关键字，可以修饰类的成员变量、类的静态成员变量，主要有两个功能&lt;/p&gt;
&lt;p&gt;第一：保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。&lt;/p&gt;
&lt;p&gt;第二： 禁止进行指令重排序，可以保证代码执行有序性。底层实现原理是，添加了一个&lt;strong&gt;内存屏障&lt;/strong&gt;，通过插入内存屏障禁止在内存屏障&lt;strong&gt;前后&lt;/strong&gt;的指令执行重排序优化&lt;/p&gt;
&lt;p&gt;–&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文作者&lt;/strong&gt;：接《集合相关面试题》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那你能聊一下ConcurrentHashMap的原理吗？&#34;&gt;&lt;a href=&#34;#面试官：那你能聊一下ConcurrentHashMap的原理吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那你能聊一下ConcurrentHashMap的原理吗？&#34;&gt;&lt;/a&gt;面试官：那你能聊一下ConcurrentHashMap的原理吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯好的，&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap 是一种线程安全的高效Map集合，jdk1.7和1.8也做了很多调整。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK1.7的底层采用是&lt;strong&gt;分段的数组&lt;/strong&gt;+&lt;strong&gt;链表&lt;/strong&gt; 实现&lt;/li&gt;
&lt;li&gt;JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表&amp;#x2F;红黑二叉树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在jdk1.7中 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一 种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构 的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修 改时，必须首先获得对应的 Segment的锁。&lt;/p&gt;
&lt;p&gt;Segment 是一种可重入的锁 ReentrantLock，每个 Segment 守护一个HashEntry 数组里得元 素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment 锁&lt;/p&gt;
&lt;p&gt;在jdk1.8中的ConcurrentHashMap 做了较大的优化，性能提升了不少。首先是它的数据结构与jdk1.8的hashMap数据结构完全一致。其次是放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保 证并发安全进行实现，synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲 突，就不会产生并发 , 效率得到提升&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：线程池的种类有哪些？&#34;&gt;&lt;a href=&#34;#面试官：线程池的种类有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：线程池的种类有哪些？&#34;&gt;&lt;/a&gt;面试官：线程池的种类有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！是这样&lt;/p&gt;
&lt;p&gt;在jdk中默认提供了4中方式创建线程池&lt;/p&gt;
&lt;p&gt;第一个是：newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回 收空闲线程，若无可回收，则新建线程。 &lt;/p&gt;
&lt;p&gt;第二个是：newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列 中等待。 &lt;/p&gt;
&lt;p&gt;第三个是：newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 &lt;/p&gt;
&lt;p&gt;第四个是：newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：线程池的核心参数有哪些？&#34;&gt;&lt;a href=&#34;#面试官：线程池的核心参数有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：线程池的核心参数有哪些？&#34;&gt;&lt;/a&gt;面试官：线程池的核心参数有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;在线程池中一共有7个核心参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;corePoolSize 核心线程数目 - 池中会保留的最多线程数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  在拒绝策略中又有4中拒绝策略&lt;/p&gt;
&lt;p&gt;  当线程数过多以后，第一种是抛异常、第二种是由调用者执行任务、第三是丢弃当前的任务，第四是丢弃最早排队任务。默认是直接抛异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如何确定核心线程池呢？&#34;&gt;&lt;a href=&#34;#面试官：如何确定核心线程池呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：如何确定核心线程池呢？&#34;&gt;&lt;/a&gt;面试官：如何确定核心线程池呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;是这样的，我们公司当时有一些规范，为了减少线程上下文的切换，要根据当时部署的服务器的CPU核数来决定，我们规则是：CPU核数+1就是最终的核心线程数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：线程池的执行原理知道吗？&#34;&gt;&lt;a href=&#34;#面试官：线程池的执行原理知道吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：线程池的执行原理知道吗？&#34;&gt;&lt;/a&gt;面试官：线程池的执行原理知道吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~，它是这样的&lt;/p&gt;
&lt;p&gt;首先判断线程池里的核心线程是否都在执行任务，如果不是则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队 列里。如果工作队列满了，则判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任 务。如果已经满了，则交给拒绝策略来处理这个任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：为什么不建议使用Executors创建线程池呢？&#34;&gt;&lt;a href=&#34;#面试官：为什么不建议使用Executors创建线程池呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：为什么不建议使用Executors创建线程池呢？&#34;&gt;&lt;/a&gt;面试官：为什么不建议使用Executors创建线程池呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;好的，其实这个事情在阿里提供的最新开发手册《Java开发手册-嵩山版》中也提到了&lt;/p&gt;
&lt;p&gt;主要原因是如果使用Executors创建线程池的话，它允许的请求队列默认长度是Integer.MAX_VALUE，这样的话，有可能导致堆积大量的请求，从而导致OOM（内存溢出）。&lt;/p&gt;
&lt;p&gt;所以，我们一般推荐使用ThreadPoolExecutor来创建线程池，这样可以明确规定线程池的参数，避免资源的耗尽。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如果控制某一个方法允许并发访问线程的数量？&#34;&gt;&lt;a href=&#34;#面试官：如果控制某一个方法允许并发访问线程的数量？&#34; class=&#34;headerlink&#34; title=&#34;面试官：如果控制某一个方法允许并发访问线程的数量？&#34;&gt;&lt;/a&gt;面试官：如果控制某一个方法允许并发访问线程的数量？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~，我想一下&lt;/p&gt;
&lt;p&gt;在jdk中提供了一个Semaphore[seməfɔːr]类（信号量）&lt;/p&gt;
&lt;p&gt;它提供了两个方法，semaphore.acquire() 请求信号量，可以限制线程的个数，是一个正数，如果信号量是-1,就代表已经用完了信号量，其他线程需要阻塞了&lt;/p&gt;
&lt;p&gt;第二个方法是semaphore.release()，代表是释放一个信号量，此时信号量的个数+1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，那该如何保证Java程序在多线程的情况下执行安全呢？&#34;&gt;&lt;a href=&#34;#面试官：好的，那该如何保证Java程序在多线程的情况下执行安全呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，那该如何保证Java程序在多线程的情况下执行安全呢？&#34;&gt;&lt;/a&gt;面试官：好的，那该如何保证Java程序在多线程的情况下执行安全呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，刚才讲过了导致线程安全的原因，如果解决的话，jdk中也提供了很多的类帮助我们解决多线程安全的问题，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK Atomic开头的原子类、synchronized、LOCK，可以解决原子性问题&lt;/li&gt;
&lt;li&gt;synchronized、volatile、LOCK，可以解决可见性问题&lt;/li&gt;
&lt;li&gt;Happens-Before 规则可以解决有序性问题&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你在项目中哪里用了多线程？&#34;&gt;&lt;a href=&#34;#面试官：你在项目中哪里用了多线程？&#34; class=&#34;headerlink&#34; title=&#34;面试官：你在项目中哪里用了多线程？&#34;&gt;&lt;/a&gt;面试官：你在项目中哪里用了多线程？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~，我想一下当时的场景[根据自己简历上的模块设计多线程场景]&lt;/p&gt;
&lt;p&gt;参考场景一：&lt;/p&gt;
&lt;p&gt;es数据批量导入&lt;/p&gt;
&lt;p&gt;在我们项目上线之前，我们需要把数据量的数据一次性的同步到es索引库中，但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），如果分批执行的话，耗时也太久了。所以，当时我就想到可以使用线程池的方式导入，利用CountDownLatch+Future来控制，就能大大提升导入的时间。&lt;/p&gt;
&lt;p&gt;参考场景二：&lt;/p&gt;
&lt;p&gt;在我做那个xx电商网站的时候，里面有一个数据汇总的功能，在用户下单之后需要查询订单信息，也需要获得订单中的商品详细信息（可能是多个），还需要查看物流发货信息。因为它们三个对应的分别三个微服务，如果一个一个的操作的话，互相等待的时间比较长。所以，我当时就想到可以使用线程池，让多个线程同时处理，最终再汇总结果就可以了，当然里面需要用到Future来获取每个线程执行之后的结果才行&lt;/p&gt;
&lt;p&gt;参考场景三：&lt;/p&gt;
&lt;p&gt;《黑马头条》项目中使用的&lt;/p&gt;
&lt;p&gt;我当时做了一个文章搜索的功能，用户输入关键字要搜索文章，同时需要保存用户的搜索记录（搜索历史），这块我设计的时候，为了不影响用户的正常搜索，我们采用的异步的方式进行保存的，为了提升性能，我们加入了线程池，也就说在调用异步方法的时候，直接从线程池中获取线程使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：谈谈你对ThreadLocal的理解&#34;&gt;&lt;a href=&#34;#面试官：谈谈你对ThreadLocal的理解&#34; class=&#34;headerlink&#34; title=&#34;面试官：谈谈你对ThreadLocal的理解&#34;&gt;&lt;/a&gt;面试官：谈谈你对ThreadLocal的理解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，是这样的~~&lt;/p&gt;
&lt;p&gt;ThreadLocal 主要功能有两个，第一个是可以实现资源对象的线程隔离，让每个线程各用各的资源对象，避免争用引发的线程安全问题，第二个是实现了线程内的资源共享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，那你知道ThreadLocal的底层原理实现吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，那你知道ThreadLocal的底层原理实现吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，那你知道ThreadLocal的底层原理实现吗？&#34;&gt;&lt;/a&gt;面试官：好的，那你知道ThreadLocal的底层原理实现吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，知道一些~&lt;/p&gt;
&lt;p&gt;在ThreadLocal内部维护了一个一个 ThreadLocalMap 类型的成员变量，用来存储资源对象&lt;/p&gt;
&lt;p&gt;当我们调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中&lt;/p&gt;
&lt;p&gt;当调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值&lt;/p&gt;
&lt;p&gt;当调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，那关于ThreadLocal会导致内存溢出这个事情，了解吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，那关于ThreadLocal会导致内存溢出这个事情，了解吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，那关于ThreadLocal会导致内存溢出这个事情，了解吗？&#34;&gt;&lt;/a&gt;面试官：好的，那关于ThreadLocal会导致内存溢出这个事情，了解吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，我之前看过源码，我想一下~~&lt;/p&gt;
&lt;p&gt;是应为ThreadLocalMap 中的 key 被设计为弱引用，它是被动的被GC调用释放key，不过关键的是只有key可以得到内存释放，而value不会，因为value是一个强引用。&lt;/p&gt;
&lt;p&gt;在使用ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收，建议主动的remove 释放 key，这样就能避免内存溢出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="JUC" scheme="https://anoxiahub.github.io/tags/JUC/" />
        <updated>2023-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/</id>
        <title>JVM相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;有关JVM内容可以看&lt;a href=&#34;/java/JVM%E8%AF%A6%E8%A7%A3&#34;&gt;JVM详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：JVM由那些部分组成，运行流程是什么？&#34;&gt;&lt;a href=&#34;#面试官：JVM由那些部分组成，运行流程是什么？&#34; class=&#34;headerlink&#34; title=&#34;面试官：JVM由那些部分组成，运行流程是什么？&#34;&gt;&lt;/a&gt;面试官：JVM由那些部分组成，运行流程是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好的~~&lt;/p&gt;
&lt;p&gt;在JVM中共有四大部分，分别是ClassLoader（类加载器）、Runtime Data Area（运行时数据区，内存分区）、Execution Engine（执行引擎）、Native Method Library（本地库接口）&lt;/p&gt;
&lt;p&gt;它们的运行流程是：&lt;/p&gt;
&lt;p&gt;第一，类加载器（ClassLoader）把Java代码转换为字节码&lt;/p&gt;
&lt;p&gt;第二，运行时数据区（Runtime Data Area）把字节码加载到内存中，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是有执行引擎运行&lt;/p&gt;
&lt;p&gt;第三，执行引擎（Execution Engine）将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口（Native Method Library）来实现整个程序的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，你能详细说一下-JVM-运行时数据区吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，你能详细说一下-JVM-运行时数据区吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，你能详细说一下 JVM 运行时数据区吗？&#34;&gt;&lt;/a&gt;面试官：好的，你能详细说一下 JVM 运行时数据区吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好~&lt;/p&gt;
&lt;p&gt;运行时数据区包含了堆、方法区、栈、本地方法栈、程序计数器这几部分，每个功能作用不一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。&lt;/li&gt;
&lt;li&gt;方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。&lt;/li&gt;
&lt;li&gt;栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。&lt;/li&gt;
&lt;li&gt;本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。&lt;/li&gt;
&lt;li&gt;程序计数器（PC寄存器）程序计数器中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，你再详细介绍一下程序计数器的作用？&#34;&gt;&lt;a href=&#34;#面试官：好的，你再详细介绍一下程序计数器的作用？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，你再详细介绍一下程序计数器的作用？&#34;&gt;&lt;/a&gt;面试官：好的，你再详细介绍一下程序计数器的作用？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，是这样~~&lt;/p&gt;
&lt;p&gt;java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。这时候程序计数器就起到了关键作用，程序计数器在来回切换的线程中记录他上一次执行的行号，然后接着继续向下执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你能给我详细的介绍Java堆吗&#34;&gt;&lt;a href=&#34;#面试官：你能给我详细的介绍Java堆吗&#34; class=&#34;headerlink&#34; title=&#34;面试官：你能给我详细的介绍Java堆吗?&#34;&gt;&lt;/a&gt;面试官：你能给我详细的介绍Java堆吗?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的~&lt;/p&gt;
&lt;p&gt;Java中的堆术语线程共享的区域。主要用来保存&lt;strong&gt;对象实例，数组&lt;/strong&gt;等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;p&gt;​	在JAVA8中堆内会存在年轻代、老年代&lt;/p&gt;
&lt;p&gt;​	1）Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用。在Eden区变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。&lt;/p&gt;
&lt;p&gt;​	2）Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：能不能解释一下方法区？&#34;&gt;&lt;a href=&#34;#面试官：能不能解释一下方法区？&#34; class=&#34;headerlink&#34; title=&#34;面试官：能不能解释一下方法区？&#34;&gt;&lt;/a&gt;面试官：能不能解释一下方法区？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的~&lt;/p&gt;
&lt;p&gt;与虚拟机栈类似。本地方法栈是为虚拟机&lt;strong&gt;执行本地方法时提供服务的&lt;/strong&gt;。不需要进行GC。本地方法一般是由其他语言编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你听过直接内存吗？&#34;&gt;&lt;a href=&#34;#面试官：你听过直接内存吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：你听过直接内存吗？&#34;&gt;&lt;/a&gt;面试官：你听过直接内存吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯~~&lt;/p&gt;
&lt;p&gt;它又叫做&lt;strong&gt;堆外内存&lt;/strong&gt;，&lt;strong&gt;线程共享的区域&lt;/strong&gt;，在 Java 8 之前有个&lt;strong&gt;永久代&lt;/strong&gt;的概念，实际上指的是 HotSpot 虚拟机上的永久代，它用永久代实现了 JVM 规范定义的方法区功能，&lt;strong&gt;主要存储类的信息，常量，静态变量&lt;/strong&gt;，即时编译器编译后代码等，这部分由于是在堆中实现的，受 GC 的管理，不过由于永久代有 -XX:MaxPermSize 的上限，所以如果大量动态生成类（将类信息放入永久代），很容易造成 OOM，有人说可以把永久代设置得足够大，但很难确定一个合适的大小，受类数量，常量数量的多少影响很大。&lt;/p&gt;
&lt;p&gt;​	所以在 Java 8 中就把方法区的实现移到了本地内存中的元空间中，这样方法区就不受 JVM 的控制了,也就不会进行 GC，也因此提升了性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是虚拟机栈&#34;&gt;&lt;a href=&#34;#面试官：什么是虚拟机栈&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是虚拟机栈&#34;&gt;&lt;/a&gt;面试官：什么是虚拟机栈&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虚拟机栈是描述的是方法执行时的内存模型,是线程私有的，生命周期与线程相同,每个方法被执行的同时会创建&lt;strong&gt;栈桢&lt;/strong&gt;。保存执行方法时的&lt;strong&gt;局部变量、动态连接信息、方法返回地址信息&lt;/strong&gt;等等。方法开始执行的时候会进栈，方法执行完会出栈【相当于清空了数据】，所以这块区域&lt;strong&gt;不需要进行 GC&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：能说一下堆栈的区别是什么吗？&#34;&gt;&lt;a href=&#34;#面试官：能说一下堆栈的区别是什么吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：能说一下堆栈的区别是什么吗？&#34;&gt;&lt;/a&gt;面试官：能说一下堆栈的区别是什么吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，好的，有这几个区别&lt;/p&gt;
&lt;p&gt;第一，栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的的。堆会GC垃圾回收，而栈不会。&lt;/p&gt;
&lt;p&gt;第二、栈内存是线程私有的，而堆内存是线程共有的。&lt;/p&gt;
&lt;p&gt;第三、两者异常错误不同，但如果栈内存或者堆内存不足都会抛出异常。&lt;/p&gt;
&lt;p&gt;栈空间不足：java.lang.StackOverFlowError。&lt;/p&gt;
&lt;p&gt;堆空间不足：java.lang.OutOfMemoryError。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是类加载器，类加载器有哪些&#34;&gt;&lt;a href=&#34;#面试官：什么是类加载器，类加载器有哪些&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是类加载器，类加载器有哪些?&#34;&gt;&lt;/a&gt;面试官：什么是类加载器，类加载器有哪些?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，是这样的&lt;/p&gt;
&lt;p&gt;JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将&lt;strong&gt;字节码文件加载到JVM中&lt;/strong&gt;，从而让Java程序能够启动起来。&lt;/p&gt;
&lt;p&gt;常见的类加载器有4个&lt;/p&gt;
&lt;p&gt;第一个是启动类加载器(BootStrap ClassLoader)：其是由C++编写实现。用于加载JAVA_HOME&amp;#x2F;jre&amp;#x2F;lib目录下的类库。&lt;/p&gt;
&lt;p&gt;第二个是扩展类加载器(ExtClassLoader)：该类是ClassLoader的子类，主要加载JAVA_HOME&amp;#x2F;jre&amp;#x2F;lib&amp;#x2F;ext目录中的类库。&lt;/p&gt;
&lt;p&gt;第三个是应用类加载器(AppClassLoader)：该类是ClassLoader的子类，主要用于加载classPath下的类，也就是加载开发者自己编写的Java类。&lt;/p&gt;
&lt;p&gt;第四个是自定义类加载器：开发者自定义类继承ClassLoader，实现自定义类加载规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：说一下类装载的执行过程？&#34;&gt;&lt;a href=&#34;#面试官：说一下类装载的执行过程？&#34; class=&#34;headerlink&#34; title=&#34;面试官：说一下类装载的执行过程？&#34;&gt;&lt;/a&gt;面试官：说一下类装载的执行过程？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，这个过程还是挺多的。&lt;/p&gt;
&lt;p&gt;类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）&lt;/p&gt;
&lt;p&gt;1.加载：查找和导入class文件&lt;/p&gt;
&lt;p&gt;2.验证：保证加载类的准确性&lt;/p&gt;
&lt;p&gt;3.准备：为类变量分配内存并设置类变量初始值&lt;/p&gt;
&lt;p&gt;4.解析：把类中的符号引用转换为直接引用&lt;/p&gt;
&lt;p&gt;5.初始化：对类的静态变量，静态代码块执行初始化操作&lt;/p&gt;
&lt;p&gt;6.使用：JVM 开始从入口方法开始执行用户的程序代码&lt;/p&gt;
&lt;p&gt;7.卸载：当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是双亲委派模型？&#34;&gt;&lt;a href=&#34;#面试官：什么是双亲委派模型？&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是双亲委派模型？&#34;&gt;&lt;/a&gt;面试官：什么是双亲委派模型？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，它是是这样的。&lt;/p&gt;
&lt;p&gt;如果一个类加载器收到了类加载的请求，它首先不会自己尝试加载这个类，而是把这请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传说到顶层的启动类加载器中，只有当父类加载器返回自己无法完成这个加载请求（它的搜索返回中没有找到所需的类）时，子类加载器才会尝试自己去加载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：JVM为什么采用双亲委派机制&#34;&gt;&lt;a href=&#34;#面试官：JVM为什么采用双亲委派机制&#34; class=&#34;headerlink&#34; title=&#34;面试官：JVM为什么采用双亲委派机制&#34;&gt;&lt;/a&gt;面试官：JVM为什么采用双亲委派机制&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要有两个原因。&lt;/p&gt;
&lt;p&gt;第一、通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。&lt;/p&gt;
&lt;p&gt;第二、为了安全，保证类库API不会被修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;垃圾回收&#34;&gt;&lt;a href=&#34;#垃圾回收&#34; class=&#34;headerlink&#34; title=&#34;垃圾回收&#34;&gt;&lt;/a&gt;垃圾回收&lt;/h2&gt;&lt;h3 id=&#34;面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）&#34;&gt;&lt;a href=&#34;#面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）&#34; class=&#34;headerlink&#34; title=&#34;面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）&#34;&gt;&lt;/a&gt;面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，是这样~~&lt;/p&gt;
&lt;p&gt;为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC(Garbage Collection)。&lt;/p&gt;
&lt;p&gt;有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。&lt;/p&gt;
&lt;p&gt;在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：强引用、软引用、弱引用、虚引用的区别？&#34;&gt;&lt;a href=&#34;#面试官：强引用、软引用、弱引用、虚引用的区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：强引用、软引用、弱引用、虚引用的区别？&#34;&gt;&lt;/a&gt;面试官：强引用、软引用、弱引用、虚引用的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯嗯~&lt;/p&gt;
&lt;p&gt;强引用最为普通的引用方式，表示一个对象处于&lt;strong&gt;有用且必须&lt;/strong&gt;的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收&lt;/p&gt;
&lt;p&gt;软引用表示一个对象处于&lt;strong&gt;有用且非必须&lt;/strong&gt;状态，如果一个对象处于软引用，在内存空间足够的情况下，GC机制并不会回收它，而在内存空间不足时，则会在OOM异常出现之间对其进行回收。但值得注意的是，因为GC线程优先级较低，软引用并不会立即被回收。&lt;/p&gt;
&lt;p&gt;弱引用表示一个对象处于&lt;strong&gt;可能有用且非必须&lt;/strong&gt;的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收。同样的，因为GC线程优先级较低，所以弱引用也并不是会被立刻回收。&lt;/p&gt;
&lt;p&gt;虚引用表示一个对象处于&lt;strong&gt;无用&lt;/strong&gt;的状态。在任何时候都有可能被垃圾回收。虚引用的使用必须和引用队列Reference Queue联合使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：对象什么时候可以被垃圾器回收&#34;&gt;&lt;a href=&#34;#面试官：对象什么时候可以被垃圾器回收&#34; class=&#34;headerlink&#34; title=&#34;面试官：对象什么时候可以被垃圾器回收&#34;&gt;&lt;/a&gt;面试官：对象什么时候可以被垃圾器回收&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;思考一会~~&lt;/p&gt;
&lt;p&gt;如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。&lt;/p&gt;
&lt;p&gt;如果要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法&lt;/p&gt;
&lt;p&gt;通常都使用可达性分析算法来确定是不是垃圾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：-JVM-垃圾回收算法有哪些？&#34;&gt;&lt;a href=&#34;#面试官：-JVM-垃圾回收算法有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官： JVM 垃圾回收算法有哪些？&#34;&gt;&lt;/a&gt;面试官： JVM 垃圾回收算法有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我记得一共有四种，分别是标记清除算法、复制算法、标记整理算法、分代回收&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：-你能详细聊一下分代回收吗？&#34;&gt;&lt;a href=&#34;#面试官：-你能详细聊一下分代回收吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官： 你能详细聊一下分代回收吗？&#34;&gt;&lt;/a&gt;面试官： 你能详细聊一下分代回收吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于分代回收是这样的&lt;/p&gt;
&lt;p&gt;在java8时，堆被分为了两份：新生代和老年代，它们默认空间占用比例是1:2&lt;/p&gt;
&lt;p&gt;对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区默认空间占用比例是8:1:1&lt;/p&gt;
&lt;p&gt;具体的工作机制是有些情况：&lt;/p&gt;
&lt;p&gt;1）当创建一个对象的时候，那么这个对象会被分配在新生代的Eden区。当Eden区要满了时候，触发YoungGC。&lt;/p&gt;
&lt;p&gt;2）当进行YoungGC后，此时在Eden区存活的对象被移动到S0区，并且&lt;strong&gt;当前对象的年龄会加1&lt;/strong&gt;，清空Eden区。&lt;/p&gt;
&lt;p&gt;3）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S0中的对象，移动到S1区中，这些对象的年龄会加1，清空Eden区和S0区。&lt;/p&gt;
&lt;p&gt;4）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S1中的对象，移动到S0区中，这些对象的年龄会加1，清空Eden区和S1区。&lt;/p&gt;
&lt;p&gt;5）对象的年龄达到了某一个限定的值（&lt;strong&gt;默认15岁&lt;/strong&gt;  ），那么这个对象就会进入到老年代中。&lt;/p&gt;
&lt;p&gt;当然也有特殊情况，如果进入Eden区的是一个大对象，在触发YoungGC的时候，会直接存放到老年代&lt;/p&gt;
&lt;p&gt;当老年代满了之后，&lt;strong&gt;触发FullGC&lt;/strong&gt;。&lt;strong&gt;FullGC同时回收新生代和老年代&lt;/strong&gt;，当前只会存在一个FullGC的线程进行执行，其他的线程全部会被挂起。  我们在程序中要尽量避免FullGC的出现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：讲一下新生代、老年代、永久代的区别？&#34;&gt;&lt;a href=&#34;#面试官：讲一下新生代、老年代、永久代的区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：讲一下新生代、老年代、永久代的区别？&#34;&gt;&lt;/a&gt;面试官：讲一下新生代、老年代、永久代的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯！是这样的，简单说就是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新生代&lt;/strong&gt;主要用来存放新生的对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老年代&lt;/strong&gt;主要存放应用中生命周期长的内存对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;永久代&lt;/strong&gt;指的是永久保存区域。主要存放Class和Meta（元数据）的信息。在Java8中，永久代已经被移除，取而代之的是一个称之为“元数据区”（&lt;strong&gt;元空间&lt;/strong&gt;）的区域。元空间和永久代类似，不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存的限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：说一下-JVM-有哪些垃圾回收器？&#34;&gt;&lt;a href=&#34;#面试官：说一下-JVM-有哪些垃圾回收器？&#34; class=&#34;headerlink&#34; title=&#34;面试官：说一下 JVM 有哪些垃圾回收器？&#34;&gt;&lt;/a&gt;面试官：说一下 JVM 有哪些垃圾回收器？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在jvm中，实现了多种垃圾收集器，包括：串行垃圾收集器、并行垃圾收集器（JDK8默认）、CMS（并发）垃圾收集器、G1垃圾收集器（JDK9默认）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Minor-GC、Major-GC、Full-GC是什么&#34;&gt;&lt;a href=&#34;#面试官：Minor-GC、Major-GC、Full-GC是什么&#34; class=&#34;headerlink&#34; title=&#34;面试官：Minor GC、Major GC、Full GC是什么&#34;&gt;&lt;/a&gt;面试官：Minor GC、Major GC、Full GC是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，其实它们指的是不同代之间的垃圾回收&lt;/p&gt;
&lt;p&gt;Minor GC 发生在新生代的垃圾回收，暂停时间短&lt;/p&gt;
&lt;p&gt;Major GC 老年代区域的垃圾回收，老年代空间不足时，会先尝试触发Minor GC。Minor GC之后空间还不足，则会触发Major GC，Major GC速度比较慢，暂停时间长&lt;/p&gt;
&lt;p&gt;Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，&lt;strong&gt;应尽力避免&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：JVM-调优的参数可以在哪里设置参数值？&#34;&gt;&lt;a href=&#34;#面试官：JVM-调优的参数可以在哪里设置参数值？&#34; class=&#34;headerlink&#34; title=&#34;面试官：JVM 调优的参数可以在哪里设置参数值？&#34;&gt;&lt;/a&gt;面试官：JVM 调优的参数可以在哪里设置参数值？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们当时的项目是springboot项目，可以在项目启动的时候，java -jar中加入参数就行了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：用的-JVM-调优的参数都有哪些？&#34;&gt;&lt;a href=&#34;#面试官：用的-JVM-调优的参数都有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：用的 JVM 调优的参数都有哪些？&#34;&gt;&lt;/a&gt;面试官：用的 JVM 调优的参数都有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，这些参数是比较多的&lt;/p&gt;
&lt;p&gt;我记得当时我们设置过堆的大小，像-Xms和-Xmx&lt;/p&gt;
&lt;p&gt;还有就是可以设置年轻代中Eden区和两个Survivor区的大小比例&lt;/p&gt;
&lt;p&gt;还有就是可以设置使用哪种垃圾回收器等等。具体的指令还真记不太清楚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：嗯，好的，你们平时调试-JVM都用了哪些工具呢？&#34;&gt;&lt;a href=&#34;#面试官：嗯，好的，你们平时调试-JVM都用了哪些工具呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：嗯，好的，你们平时调试 JVM都用了哪些工具呢？&#34;&gt;&lt;/a&gt;面试官：嗯，好的，你们平时调试 JVM都用了哪些工具呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我们一般都是使用jdk自带的一些工具，比如&lt;/p&gt;
&lt;p&gt;jps 输出JVM中运行的进程状态信息&lt;/p&gt;
&lt;p&gt;jstack查看java进程内&lt;strong&gt;线程的堆栈&lt;/strong&gt;信息。&lt;/p&gt;
&lt;p&gt;jmap 用于生成堆转存快照&lt;/p&gt;
&lt;p&gt;jstat用于JVM统计监测工具&lt;/p&gt;
&lt;p&gt;还有一些可视化工具，像jconsole和VisualVM等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？&#34;&gt;&lt;a href=&#34;#面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？&#34; class=&#34;headerlink&#34; title=&#34;面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？&#34;&gt;&lt;/a&gt;面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，这个我在之前项目排查过&lt;/p&gt;
&lt;p&gt;第一呢可以通过jmap指定打印他的内存快照 dump文件，不过有的情况打印不了，我们会设置vm参数让程序自动生成dump文件&lt;/p&gt;
&lt;p&gt;第二，可以通过工具去分析 dump文件，jdk自带的VisualVM就可以分析&lt;/p&gt;
&lt;p&gt;第三，通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题&lt;/p&gt;
&lt;p&gt;第四，找到对应的代码，通过阅读上下文的情况，进行修复即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？&#34;&gt;&lt;a href=&#34;#面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？&#34;&gt;&lt;/a&gt;面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我思考一下~~&lt;/p&gt;
&lt;p&gt;可以这么做~~&lt;/p&gt;
&lt;p&gt;第一可以使用使用top命令查看占用cpu的情况&lt;/p&gt;
&lt;p&gt;第二通过top命令查看后，可以查看是哪一个进程占用cpu较高，记录这个进程id&lt;/p&gt;
&lt;p&gt;第三可以通过ps 查看当前进程中的线程信息，看看哪个线程的cpu占用较高&lt;/p&gt;
&lt;p&gt;第四可以jstack命令打印进行的id，找到这个线程，就可以进一步定位问题代码的行号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="Java基础" scheme="https://anoxiahub.github.io/tags/Java%E5%9F%BA%E7%A1%80/" />
        <updated>2023-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/%E5%B8%B8%E8%A7%81%E6%8A%80%E6%9C%AF%E5%9C%BA%E6%99%AF/</id>
        <title>常见技术场景</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/%E5%B8%B8%E8%A7%81%E6%8A%80%E6%9C%AF%E5%9C%BA%E6%99%AF/"/>
        <content type="html">&lt;h2 id=&#34;常见技术场景&#34;&gt;&lt;a href=&#34;#常见技术场景&#34; class=&#34;headerlink&#34; title=&#34;常见技术场景&#34;&gt;&lt;/a&gt;常见技术场景&lt;/h2&gt;&lt;h3 id=&#34;单点登录这块怎么实现的&#34;&gt;&lt;a href=&#34;#单点登录这块怎么实现的&#34; class=&#34;headerlink&#34; title=&#34;单点登录这块怎么实现的&#34;&gt;&lt;/a&gt;单点登录这块怎么实现的&lt;/h3&gt;&lt;h4 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;单点登录的英文名叫做：Single Sign On（简称&lt;strong&gt;SSO&lt;/strong&gt;）,只需要登录一次，就可以访问所有信任的应用系统&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;以前&lt;/strong&gt;的时候，一般我们就&lt;strong&gt;单系统&lt;/strong&gt;，所有的功能都在同一个系统上。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521113500488.png&#34; alt=&#34;image-20230521113500488&#34;&gt;&lt;/p&gt;
&lt;p&gt;单体系统的session共享&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;登录&lt;/strong&gt;：将用户信息保存在Session对象中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;如果在Session对象中能查到，说明已经登录&lt;/li&gt;
&lt;li&gt;如果在Session对象中查不到，说明没登录（或者已经退出了登录）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注销（退出登录）&lt;/strong&gt;：从Session中删除用户的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后来，我们为了&lt;strong&gt;合理利用资源和降低耦合性&lt;/strong&gt;，于是把单系统&lt;strong&gt;拆分&lt;/strong&gt;成多个子系统。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521113544219.png&#34; alt=&#34;image-20230521113544219&#34;&gt;&lt;/p&gt;
&lt;p&gt;多系统即可能有多个Tomcat，而Session是依赖当前系统的Tomcat，所以系统A的Session和系统B的Session是&lt;strong&gt;不共享&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;解决系统之间Session不共享问题有一下几种方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tomcat集群Session全局复制（最多支持5台tomcat，不推荐使用）&lt;/li&gt;
&lt;li&gt;JWT(常见)&lt;/li&gt;
&lt;li&gt;Oauth2&lt;/li&gt;
&lt;li&gt;CAS&lt;/li&gt;
&lt;li&gt;自己实现（redis+token）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;JWT解决单点登录&#34;&gt;&lt;a href=&#34;#JWT解决单点登录&#34; class=&#34;headerlink&#34; title=&#34;JWT解决单点登录&#34;&gt;&lt;/a&gt;JWT解决单点登录&lt;/h4&gt;&lt;p&gt;现在有一个微服务的简单架构，如图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521113906521.png&#34; alt=&#34;image-20230521113906521&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用jwt解决单点登录的流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521113941467.png&#34; alt=&#34;image-20230521113941467&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;回答要点&#34;&gt;&lt;a href=&#34;#回答要点&#34; class=&#34;headerlink&#34; title=&#34;回答要点&#34;&gt;&lt;/a&gt;回答要点&lt;/h4&gt;&lt;p&gt;1，先解释什么是单点登录&lt;/p&gt;
&lt;p&gt;单点登录的英文名叫做：Single Sign On（简称&lt;strong&gt;SSO&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;2，介绍自己项目中涉及到的单点登录（即使没涉及过，也可以说实现的思路）&lt;/p&gt;
&lt;p&gt;3，介绍单点登录的解决方案，以JWT为例&lt;/p&gt;
&lt;p&gt;​	   I.  用户访问其他系统，会在网关判断token是否有效&lt;/p&gt;
&lt;p&gt;​     II.  如果token无效则会返回401（认证失败）前端跳转到登录页面&lt;/p&gt;
&lt;p&gt;​    III.  用户发送登录请求，返回浏览器一个token，浏览器把token保存到cookie&lt;/p&gt;
&lt;p&gt;​    IV.  再去访问其他服务的时候，都需要携带token，由网关统一验证后路由到目标服务&lt;/p&gt;
&lt;h3 id=&#34;权限认证是如何实现的&#34;&gt;&lt;a href=&#34;#权限认证是如何实现的&#34; class=&#34;headerlink&#34; title=&#34;权限认证是如何实现的&#34;&gt;&lt;/a&gt;权限认证是如何实现的&lt;/h3&gt;&lt;h4 id=&#34;概述-1&#34;&gt;&lt;a href=&#34;#概述-1&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;后台的管理系统，更注重权限控制，最常见的就是RBAC模型来指导实现权限&lt;/p&gt;
&lt;p&gt;RBAC(Role-Based Access Control)基于角色的访问控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;3个基础部分组成：用户、角色、权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5张表（用户表、角色表、权限表、用户角色中间表、角色权限中间表）&lt;/li&gt;
&lt;li&gt;7张表（用户表、角色表、权限表、菜单表、用户角色中间表、角色权限中间表、权限菜单中间表）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;RBAC权限模型&#34;&gt;&lt;a href=&#34;#RBAC权限模型&#34; class=&#34;headerlink&#34; title=&#34;RBAC权限模型&#34;&gt;&lt;/a&gt;RBAC权限模型&lt;/h4&gt;&lt;p&gt;最常见的5张表的关系&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521114305463.png&#34; alt=&#34;image-20230521114305463&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据流转&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;张三具有什么权限呢？&lt;/p&gt;
&lt;p&gt;流程：张三登录系统—&amp;gt; 查询张三拥有的角色列表—&amp;gt;再根据角色查询拥有的权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521114432028.png&#34; alt=&#34;image-20230521114432028&#34;&gt;&lt;/p&gt;
&lt;p&gt;在实际的开发中，也会使用权限框架完成权限功能的实现，并且设置多种粒度，常见的框架有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache shiro  &lt;/li&gt;
&lt;li&gt;Spring security（推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;回答要点-1&#34;&gt;&lt;a href=&#34;#回答要点-1&#34; class=&#34;headerlink&#34; title=&#34;回答要点&#34;&gt;&lt;/a&gt;回答要点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;后台管理系统的开发经验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;介绍RBAC权限模型5张表的关系（用户、角色、权限）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;权限框架：Spring security&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上传数据的安全性你们怎么控制？&#34;&gt;&lt;a href=&#34;#上传数据的安全性你们怎么控制？&#34; class=&#34;headerlink&#34; title=&#34;上传数据的安全性你们怎么控制？&#34;&gt;&lt;/a&gt;上传数据的安全性你们怎么控制？&lt;/h3&gt;&lt;h4 id=&#34;概述-2&#34;&gt;&lt;a href=&#34;#概述-2&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521124717749.png&#34; alt=&#34;image-20230521124717749&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的安全性，主要说的是，浏览器访问后台，需要经过网络传输，有可能会出现安全的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方案：使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台负责解密后处理数据&lt;/p&gt;
&lt;h4 id=&#34;对称加密&#34;&gt;&lt;a href=&#34;#对称加密&#34; class=&#34;headerlink&#34; title=&#34;对称加密&#34;&gt;&lt;/a&gt;对称加密&lt;/h4&gt;&lt;p&gt;文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521125012727.png&#34; alt=&#34;image-20230521125012727&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据发信方将明文和加密密钥一起经过特殊的加密算法处理后，使其变成复杂的加密密文发送出去，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;收信方收到密文后，若想解读出原文，则需要使用加密时用的密钥以及相同加密算法的逆算法对密文进行解密，才能使其回复成可读明文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在对称加密算法中，使用的密钥只有一个，收发双方都使用这个密钥，这就需要解密方事先知道加密密钥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优点:&lt;/strong&gt;  对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点:&lt;/strong&gt;  没有非对称加密安全.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用途：&lt;/strong&gt; 一般用于保存用户手机号、身份证等敏感但能解密的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见的对称加密算法有&lt;/strong&gt;: &lt;code&gt;AES、DES、3DES、Blowfish、IDEA、RC4、RC5、RC6、HS256 &lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;非对称加密&#34;&gt;&lt;a href=&#34;#非对称加密&#34; class=&#34;headerlink&#34; title=&#34;非对称加密&#34;&gt;&lt;/a&gt;非对称加密&lt;/h4&gt;&lt;p&gt;两个密钥：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521125136717.png&#34; alt=&#34;image-20230521125136717&#34;&gt;&lt;/p&gt;
&lt;p&gt;解释:  同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端.&lt;/p&gt;
&lt;p&gt;加密与解密:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私钥加密，持有公钥才可以解密&lt;/li&gt;
&lt;li&gt;公钥加密，持有私钥才可解密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;签名:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私钥签名,  持有公钥进行验证是否被篡改过.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**优点: ** 非对称加密与对称加密相比，其安全性更好；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点:&lt;/strong&gt;  非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。&lt;br&gt;&lt;strong&gt;用途：&lt;/strong&gt; 一般用于签名和认证。私钥服务器保存, 用来加密,  公钥客户拿着用于对于令牌或者签名的解密或者校验使用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见的非对称加密算法有：&lt;/strong&gt; RSA、DSA（数字签名用）、ECC（移动设备用）、RS256 (采用SHA-256 的 RSA 签名) &lt;/p&gt;
&lt;h4 id=&#34;回答要点-2&#34;&gt;&lt;a href=&#34;#回答要点-2&#34; class=&#34;headerlink&#34; title=&#34;回答要点&#34;&gt;&lt;/a&gt;回答要点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台解密后处理数据&lt;ul&gt;
&lt;li&gt;传输的数据很大建议使用对称加密，不过不能保存敏感信息&lt;/li&gt;
&lt;li&gt;传输的数据较小，要求安全性高，建议采用非对称加密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;你负责项目的时候遇到了哪些比较棘手的问题&#34;&gt;&lt;a href=&#34;#你负责项目的时候遇到了哪些比较棘手的问题&#34; class=&#34;headerlink&#34; title=&#34;你负责项目的时候遇到了哪些比较棘手的问题&#34;&gt;&lt;/a&gt;你负责项目的时候遇到了哪些比较棘手的问题&lt;/h3&gt;&lt;p&gt;这个面试题主要考察的是，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你是否有过开发经验&lt;/li&gt;
&lt;li&gt;是否是核心开发人员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有4个方面可以回答，只要挑出一个回答就行了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）设计模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式+策略&lt;/li&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;回答思路&lt;/p&gt;
&lt;p&gt;1，什么背景（技术问题）&lt;/p&gt;
&lt;p&gt;2，过程（解决问题的过程）&lt;/p&gt;
&lt;p&gt;3，最终落地方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;①：介绍登录业务（一开始没有用设计模式，所有的登录方式都柔和在一个业务类中，不过，发现需求经常改）&lt;/p&gt;
&lt;p&gt;②：登录方式经常会增加或更换，每次都要修改业务层代码，所以，经过我的设计，使用了工厂设计模式和策略模式，解决了，经常修改业务层代码的问题&lt;/p&gt;
&lt;p&gt;③：详细介绍一下工厂模式和策略模式（参考前面设计模式的课程）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）线上BUG&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU飙高&lt;/li&gt;
&lt;li&gt;内存泄漏&lt;/li&gt;
&lt;li&gt;线程死锁&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回答方式参考上面的回答思路，具体问题可以参考前面的课程（JVM和多线程相关的面试题）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）调优&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢接口&lt;/li&gt;
&lt;li&gt;慢SQL&lt;/li&gt;
&lt;li&gt;缓存方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（4）组件封装&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;li&gt;接口幂等&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;支付通用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;你们项目中日志怎么采集的&#34;&gt;&lt;a href=&#34;#你们项目中日志怎么采集的&#34; class=&#34;headerlink&#34; title=&#34;你们项目中日志怎么采集的&#34;&gt;&lt;/a&gt;你们项目中日志怎么采集的&lt;/h3&gt;&lt;h4 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;1，为什么要采集日志？&lt;/p&gt;
&lt;p&gt;日志是定位系统问题的重要手段，可以根据日志信息快速定位系统中的问题&lt;/p&gt;
&lt;p&gt;2，采集日志的方式有哪些?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ELK：即Elasticsearch、Logstash和Kibana三个软件的首字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常规采集：按天保存到一个日志文件&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521232726959.png&#34; alt=&#34;image-20230521232726959&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ELK基本架构&#34;&gt;&lt;a href=&#34;#ELK基本架构&#34; class=&#34;headerlink&#34; title=&#34;ELK基本架构&#34;&gt;&lt;/a&gt;ELK基本架构&lt;/h4&gt;&lt;p&gt;ELK即Elasticsearch、Logstash和Kibana三个开源软件的缩写&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521232913086.png&#34; alt=&#34;image-20230521232913086&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Elasticsearch&lt;br&gt;Elasticsearch  全文搜索和分析引擎，对大容量的数据进行接近实时的存储、搜索和分析操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logstash&lt;br&gt;Logstash是一个数据收集引擎，它可以动态的从各种数据源搜集数据，并对数据进行过滤、分析和统一格式等操作，并将输出结果存储到指定位置上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kibana&lt;br&gt;Kibana是一个数据分析和可视化平台，通常与Elasticsearch配合使用，用于对其中的数据进行搜索、分析，并且以统计图标的形式展示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参考回答&#34;&gt;&lt;a href=&#34;#参考回答&#34; class=&#34;headerlink&#34; title=&#34;参考回答&#34;&gt;&lt;/a&gt;参考回答&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们搭建了ELK日志采集系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;介绍ELK的三个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch是全文搜索分析引擎，可以对数据存储、搜索、分析&lt;/li&gt;
&lt;li&gt;Logstash是一个数据收集引擎，可以动态收集数据，可以对数据进行过滤、分析，将数据存储到指定的位置&lt;/li&gt;
&lt;li&gt;Kibana是一个数据分析和可视化平台，配合Elasticsearch对数据进行搜索，分析，图表化展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看日志的命令&#34;&gt;&lt;a href=&#34;#查看日志的命令&#34; class=&#34;headerlink&#34; title=&#34;查看日志的命令&#34;&gt;&lt;/a&gt;查看日志的命令&lt;/h3&gt;&lt;p&gt;目前采集日志的方式：按天保存到一个日志文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233150276.png&#34; alt=&#34;image-20230521233150276&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以在logback配置文件中设置日志的目录和名字&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233220905.png&#34; alt=&#34;image-20230521233220905&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要掌握的Linux中的日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实时监控日志的变化&lt;/p&gt;
&lt;p&gt;实时监控某一个日志文件的变化：tail -f xx.log；实时监控日志最后100行日志： tail –n 100 -f xx.log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照行号查询&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查询日志尾部最后100行日志：tail – n 100 xx.log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询日志头部开始100行日志：head –n 100 xx.log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询某一个日志行号区间：cat -n xx.log | tail -n +100 | head -n 100 (查询100行至200行的日志)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照关键字找日志的信息&lt;/p&gt;
&lt;p&gt;查询日志文件中包含debug的日志行号：cat -n xx.log | grep “debug”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按照日期查询&lt;/p&gt;
&lt;p&gt;sed -n ‘&amp;#x2F;2023-05-18 14:22:31.070&amp;#x2F;,&amp;#x2F; 2023-05-18 14:27:14.158&amp;#x2F;p’xx.log &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;日志太多，处理方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分页查询日志信息：cat -n xx.log |grep “debug” | more&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;筛选过滤以后，输出到一个文件：cat -n xx.log | grep “debug” &amp;gt;debug.txt&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生产问题怎么排查&#34;&gt;&lt;a href=&#34;#生产问题怎么排查&#34; class=&#34;headerlink&#34; title=&#34;生产问题怎么排查&#34;&gt;&lt;/a&gt;生产问题怎么排查&lt;/h3&gt;&lt;p&gt;已经上线的bug排查的思路：&lt;/p&gt;
&lt;p&gt;1，先分析日志，通常在业务中都会有日志的记录，或者查看系统日志，或者查看日志文件，然后定位问题&lt;/p&gt;
&lt;p&gt;2，远程debug(通常公司的正式环境（生产环境）是不允许远程debug的。一般远程debug都是公司的测试环境，方便调试代码)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;远程debug配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前提条件：&lt;strong&gt;远程的代码和本地的代码要保持一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.远程代码需要配置启动参数，把项目打包放到服务器后启动项目的参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 project-1.0-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;-agentlib:jdwp&lt;/strong&gt;  是通知JVM使用(java debug wire protocol)来运行调试环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;transport&amp;#x3D;dt_socket&lt;/strong&gt;  调试数据的传送方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;server&amp;#x3D;y&lt;/strong&gt;  参数是指是否支持在server模式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;suspend&amp;#x3D;n&lt;/strong&gt; 是否在调试客户端建立起来后，再执行JVM。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;address&amp;#x3D;5005&lt;/strong&gt;  调试端口设置为5005，其它端口也可以&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.idea中设置远程debug，找到idea中的 Edit Configurations…&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233554657.png&#34; alt=&#34;image-20230521233554657&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233600556.png&#34; alt=&#34;image-20230521233600556&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;idea中启动远程debug&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233715574.png&#34; alt=&#34;image-20230521233715574&#34;&gt;&lt;/li&gt;
&lt;li&gt;访问远程服务器，在本地代码中打断点即可调试远程&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;怎么快速定位系统的瓶颈&#34;&gt;&lt;a href=&#34;#怎么快速定位系统的瓶颈&#34; class=&#34;headerlink&#34; title=&#34;怎么快速定位系统的瓶颈&#34;&gt;&lt;/a&gt;怎么快速定位系统的瓶颈&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;压测（性能测试），项目上线之前测评系统的压力&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压测目的：给出系统当前的性能状况；定位系统性能瓶颈或潜在性能瓶颈&lt;/li&gt;
&lt;li&gt;指标：响应时间、 QPS、并发数、吞吐量、 CPU利用率、内存使用率、磁盘IO、错误率&lt;/li&gt;
&lt;li&gt;压测工具：LoadRunner、Apache Jmeter …&lt;/li&gt;
&lt;li&gt;后端工程师：根据压测的结果进行解决或调优（接口慢、代码报错、并发达不到要求…）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监控工具、链路追踪工具，项目上线之后监控&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控工具：Prometheus+Grafana&lt;/li&gt;
&lt;li&gt;链路追踪工具：skywalking、Zipkin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线上诊断工具Arthas(阿尔萨斯)，项目上线之后监控、排查&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcnRoYXMuYWxpeXVuLmNvbS8=&#34;&gt;https://arthas.aliyun.com/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;核心功能：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233926897.png&#34; alt=&#34;image-20230521233926897&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230521233934644.png&#34; alt=&#34;image-20230521233934644&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="项目" scheme="https://anoxiahub.github.io/tags/%E9%A1%B9%E7%9B%AE/" />
        <updated>2023-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/java/JUC%E8%AF%A6%E8%A7%A3/</id>
        <title>JUC详解</title>
        <link rel="alternate" href="https://anoxiahub.github.io/java/JUC%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;p&gt;&lt;code&gt; 文档说明&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在文档中对所有的面试题都进行了&lt;strong&gt;难易程度&lt;/strong&gt;和&lt;strong&gt;出现频率&lt;/strong&gt;的等级说明&lt;/p&gt;
&lt;p&gt;星数越多代表权重越大，最多五颗星（☆☆☆☆☆） 最少一颗星（☆）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;线程的基础知识&#34;&gt;&lt;a href=&#34;#线程的基础知识&#34; class=&#34;headerlink&#34; title=&#34;线程的基础知识&#34;&gt;&lt;/a&gt;线程的基础知识&lt;/h2&gt;&lt;h3 id=&#34;线程和进程的区别？&#34;&gt;&lt;a href=&#34;#线程和进程的区别？&#34; class=&#34;headerlink&#34; title=&#34;线程和进程的区别？&#34;&gt;&lt;/a&gt;线程和进程的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20221026105350827.png&#34; alt=&#34;image-20221026105350827&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个进程之内可以分为一到多个线程。&lt;/p&gt;
&lt;p&gt;一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行&lt;/p&gt;
&lt;p&gt;Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。在 windows 中进程是不活动的，只是作为线程的容器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20221026105442158.png&#34; alt=&#34;image-20221026105442158&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二者对比&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务&lt;/li&gt;
&lt;li&gt;不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间&lt;/li&gt;
&lt;li&gt;线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并行和并发有什么区别？&#34;&gt;&lt;a href=&#34;#并行和并发有什么区别？&#34; class=&#34;headerlink&#34; title=&#34;并行和并发有什么区别？&#34;&gt;&lt;/a&gt;并行和并发有什么区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆&lt;/p&gt;
&lt;p&gt;出现频率：☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单核CPU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单核CPU下线程实际还是串行执行的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作系统中有一个组件叫做任务调度器，将cpu的时间片（windows下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于cpu在线程间（时间片很短）的切换非常快，人类感觉是同时运行的 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总结为一句话就是： 微观串行，宏观并行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般会将这种线程轮流使用CPU的做法称为并发（concurrent）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230503203246348.png&#34; alt=&#34;image-20230503203246348&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20221026105607248.png&#34; alt=&#34;image-20221026105607248&#34;&gt;&lt;/p&gt;
&lt;p&gt;多核CPU&lt;/p&gt;
&lt;p&gt;每个核（core）都可以调度运行线程，这时候线程可以是并行的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230503203330700.png&#34; alt=&#34;image-20230503203330700&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并发（concurrent）是同一时间应对（dealing with）多件事情的能力&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行（parallel）是同一时间动手做（doing）多件事情的能力&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一个人用锅时，另一个人就得等待）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;创建线程的四种方式&#34;&gt;&lt;a href=&#34;#创建线程的四种方式&#34; class=&#34;headerlink&#34; title=&#34;创建线程的四种方式&#34;&gt;&lt;/a&gt;创建线程的四种方式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;p&gt;共有四种方式可以创建线程，分别是：继承Thread类、实现runnable接口、实现Callable接口、线程池创建线程&lt;/p&gt;
&lt;p&gt;详细创建方式参考下面代码：&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;继承Thread类&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyThread extends Thread &amp;#123;

    @Override
    public void run() &amp;#123;
        System.out.println(&amp;quot;MyThread...run...&amp;quot;);
    &amp;#125;

    
    public static void main(String[] args) &amp;#123;

        // 创建MyThread对象
        MyThread t1 = new MyThread() ;
        MyThread t2 = new MyThread() ;

        // 调用start方法启动线程
        t1.start();
        t2.start();

    &amp;#125;
    
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;② &lt;strong&gt;实现runnable接口&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyRunnable implements Runnable&amp;#123;

    @Override
    public void run() &amp;#123;
        System.out.println(&amp;quot;MyRunnable...run...&amp;quot;);
    &amp;#125;

    public static void main(String[] args) &amp;#123;

        // 创建MyRunnable对象
        MyRunnable mr = new MyRunnable() ;

        // 创建Thread对象
        Thread t1 = new Thread(mr) ;
        Thread t2 = new Thread(mr) ;

        // 调用start方法启动线程
        t1.start();
        t2.start();

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③ &lt;strong&gt;实现Callable接口&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyCallable implements Callable&amp;lt;String&amp;gt; &amp;#123;

    @Override
    public String call() throws Exception &amp;#123;
        System.out.println(&amp;quot;MyCallable...call...&amp;quot;);
        return &amp;quot;OK&amp;quot;;
    &amp;#125;

    public static void main(String[] args) throws ExecutionException, InterruptedException &amp;#123;

        // 创建MyCallable对象
        MyCallable mc = new MyCallable() ;

        // 创建F
        FutureTask&amp;lt;String&amp;gt; ft = new FutureTask&amp;lt;String&amp;gt;(mc) ;

        // 创建Thread对象
        Thread t1 = new Thread(ft) ;
        Thread t2 = new Thread(ft) ;

        // 调用start方法启动线程
        t1.start();

        // 调用ft的get方法获取执行结果
        String result = ft.get();

        // 输出
        System.out.println(result);

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;④ &lt;strong&gt;线程池创建线程&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyExecutors implements Runnable&amp;#123;

    @Override
    public void run() &amp;#123;
        System.out.println(&amp;quot;MyRunnable...run...&amp;quot;);
    &amp;#125;

    public static void main(String[] args) &amp;#123;

        // 创建线程池对象
        ExecutorService threadPool = Executors.newFixedThreadPool(3);
        threadPool.submit(new MyExecutors()) ;

        // 关闭线程池
        threadPool.shutdown();

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;runnable-和-callable-有什么区别&#34;&gt;&lt;a href=&#34;#runnable-和-callable-有什么区别&#34; class=&#34;headerlink&#34; title=&#34;runnable 和 callable 有什么区别&#34;&gt;&lt;/a&gt;runnable 和 callable 有什么区别&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Runnable 接口run方法没有返回值；Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果&lt;/li&gt;
&lt;li&gt;Callalbe接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。&lt;/li&gt;
&lt;li&gt;Callable接口的call()方法允许抛出异常；而Runnable接口的run()方法的异常只能在内部消化，不能继续上抛&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;线程的-run-和-start-有什么区别？&#34;&gt;&lt;a href=&#34;#线程的-run-和-start-有什么区别？&#34; class=&#34;headerlink&#34; title=&#34;线程的 run()和 start()有什么区别？&#34;&gt;&lt;/a&gt;线程的 run()和 start()有什么区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;start(): 用来启动线程，通过该线程调用run方法执行run方法中所定义的逻辑代码。start方法只能被调用一次。&lt;/p&gt;
&lt;p&gt;run(): 封装了要被线程执行的代码，可以被调用多次。&lt;/p&gt;
&lt;h3 id=&#34;线程包括哪些状态，状态之间是如何变化的&#34;&gt;&lt;a href=&#34;#线程包括哪些状态，状态之间是如何变化的&#34; class=&#34;headerlink&#34; title=&#34;线程包括哪些状态，状态之间是如何变化的&#34;&gt;&lt;/a&gt;线程包括哪些状态，状态之间是如何变化的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程的状态可以参考JDK中的Thread类中的枚举State&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public enum State &amp;#123;
        /**
         * 尚未启动的线程的线程状态
         */
        NEW,

        /**
         * 可运行线程的线程状态。处于可运行状态的线程正在 Java 虚拟机中执行，但它可能正在等待来自		 * 操作系统的其他资源，例如处理器。
         */
        RUNNABLE,

        /**
         * 线程阻塞等待监视器锁的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法或在调          * 用Object.wait后重新进入同步块/方法。
         */
        BLOCKED,

        /**
         * 等待线程的线程状态。由于调用以下方法之一，线程处于等待状态：
        * Object.wait没有超时
         * 没有超时的Thread.join
         * LockSupport.park
         * 处于等待状态的线程正在等待另一个线程执行特定操作。
         * 例如，一个对对象调用Object.wait()的线程正在等待另一个线程对该对象调用Object.notify()			* 或Object.notifyAll() 。已调用Thread.join()的线程正在等待指定线程终止。
         */
        WAITING,

        /**
         * 具有指定等待时间的等待线程的线程状态。由于以指定的正等待时间调用以下方法之一，线程处于定          * 时等待状态：
        * Thread.sleep
        * Object.wait超时
        * Thread.join超时
        * LockSupport.parkNanos
        * LockSupport.parkUntil
         * &amp;lt;/ul&amp;gt;
         */
        TIMED_WAITING,

        /**
         * 已终止线程的线程状态。线程已完成执行
         */
        TERMINATED;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;状态之间是如何变化的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230503203629212.png&#34; alt=&#34;image-20230503203629212&#34;&gt;&lt;/p&gt;
&lt;p&gt;分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建&lt;ul&gt;
&lt;li&gt;当一个线程对象被创建，但还未调用 start 方法时处于&lt;strong&gt;新建&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;此时未与操作系统底层线程关联&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可运行&lt;ul&gt;
&lt;li&gt;调用了 start 方法，就会由&lt;strong&gt;新建&lt;/strong&gt;进入&lt;strong&gt;可运行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;此时与底层线程关联，由操作系统调度执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终结&lt;ul&gt;
&lt;li&gt;线程内代码已经执行完毕，由&lt;strong&gt;可运行&lt;/strong&gt;进入&lt;strong&gt;终结&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;此时会取消与底层线程关联&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阻塞&lt;ul&gt;
&lt;li&gt;当获取锁失败后，由&lt;strong&gt;可运行&lt;/strong&gt;进入 Monitor 的阻塞队列&lt;strong&gt;阻塞&lt;/strong&gt;，此时不占用 cpu 时间&lt;/li&gt;
&lt;li&gt;当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的&lt;strong&gt;阻塞&lt;/strong&gt;线程，唤醒后的线程进入&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;等待&lt;ul&gt;
&lt;li&gt;当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从&lt;strong&gt;可运行&lt;/strong&gt;状态释放锁进入 Monitor 等待集合&lt;strong&gt;等待&lt;/strong&gt;，同样不占用 cpu 时间&lt;/li&gt;
&lt;li&gt;当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的&lt;strong&gt;等待&lt;/strong&gt;线程，恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有时限等待&lt;ul&gt;
&lt;li&gt;当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从&lt;strong&gt;可运行&lt;/strong&gt;状态释放锁进入 Monitor 等待集合进行&lt;strong&gt;有时限等待&lt;/strong&gt;，同样不占用 cpu 时间&lt;/li&gt;
&lt;li&gt;当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的&lt;strong&gt;有时限等待&lt;/strong&gt;线程，恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态，并重新去竞争锁&lt;/li&gt;
&lt;li&gt;如果等待超时，也会从&lt;strong&gt;有时限等待&lt;/strong&gt;状态恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态，并重新去竞争锁&lt;/li&gt;
&lt;li&gt;还有一种情况是调用 sleep(long) 方法也会从&lt;strong&gt;可运行&lt;/strong&gt;状态进入&lt;strong&gt;有时限等待&lt;/strong&gt;状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？&#34;&gt;&lt;a href=&#34;#新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？&#34; class=&#34;headerlink&#34; title=&#34;新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？&#34;&gt;&lt;/a&gt;新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的&lt;strong&gt;join&lt;/strong&gt;()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。&lt;/p&gt;
&lt;p&gt;代码举例：&lt;/p&gt;
&lt;p&gt;为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class JoinTest &amp;#123;

    public static void main(String[] args) &amp;#123;

        // 创建线程对象
        Thread t1 = new Thread(() -&amp;gt; &amp;#123;
            System.out.println(&amp;quot;t1&amp;quot;);
        &amp;#125;) ;

        Thread t2 = new Thread(() -&amp;gt; &amp;#123;
            try &amp;#123;
                t1.join();                          // 加入线程t1,只有t1线程执行完毕以后，再次执行该线程
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            System.out.println(&amp;quot;t2&amp;quot;);
        &amp;#125;) ;


        Thread t3 = new Thread(() -&amp;gt; &amp;#123;
            try &amp;#123;
                t2.join();                              // 加入线程t2,只有t2线程执行完毕以后，再次执行该线程
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            System.out.println(&amp;quot;t3&amp;quot;);
        &amp;#125;) ;

        // 启动线程
        t1.start();
        t2.start();
        t3.start();

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;notify-和-notifyAll-有什么区别？&#34;&gt;&lt;a href=&#34;#notify-和-notifyAll-有什么区别？&#34; class=&#34;headerlink&#34; title=&#34;notify()和 notifyAll()有什么区别？&#34;&gt;&lt;/a&gt;notify()和 notifyAll()有什么区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;notifyAll：唤醒所有wait的线程&lt;/p&gt;
&lt;p&gt;notify：只随机唤醒一个 wait 线程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.itheima.basic;

public class WaitNotify &amp;#123;

    static boolean flag = false;
    static Object lock = new Object();

    public static void main(String[] args) &amp;#123;

        Thread t1 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (lock)&amp;#123;
                while (!flag)&amp;#123;
                    System.out.println(Thread.currentThread().getName()+&amp;quot;...wating...&amp;quot;);
                    try &amp;#123;
                        lock.wait();
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                &amp;#125;
                System.out.println(Thread.currentThread().getName()+&amp;quot;...flag is true&amp;quot;);
            &amp;#125;
        &amp;#125;);

        Thread t2 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (lock)&amp;#123;
                while (!flag)&amp;#123;
                    System.out.println(Thread.currentThread().getName()+&amp;quot;...wating...&amp;quot;);
                    try &amp;#123;
                        lock.wait();
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                &amp;#125;
                System.out.println(Thread.currentThread().getName()+&amp;quot;...flag is true&amp;quot;);
            &amp;#125;
        &amp;#125;);

        Thread t3 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (lock) &amp;#123;
                System.out.println(Thread.currentThread().getName() + &amp;quot; hold lock&amp;quot;);
                lock.notifyAll();
                flag = true;
                try &amp;#123;
                    Thread.sleep(2000);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;);
        t1.start();
        t2.start();
        t3.start();

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在-java-中-wait-和-sleep-方法的不同？&#34;&gt;&lt;a href=&#34;#在-java-中-wait-和-sleep-方法的不同？&#34; class=&#34;headerlink&#34; title=&#34;在 java 中 wait 和 sleep 方法的不同？&#34;&gt;&lt;/a&gt;在 java 中 wait 和 sleep 方法的不同？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;p&gt;共同点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法归属不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sleep(long) 是 Thread 的静态方法&lt;/li&gt;
&lt;li&gt;而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;醒来时机不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来&lt;/li&gt;
&lt;li&gt;wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去&lt;/li&gt;
&lt;li&gt;它们都可以被打断唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁特性不同（重点）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制&lt;/li&gt;
&lt;li&gt;wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）&lt;/li&gt;
&lt;li&gt;而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class WaitSleepCase &amp;#123;

    static final Object LOCK = new Object();

    public static void main(String[] args) throws InterruptedException &amp;#123;
        sleeping();
    &amp;#125;

    private static void illegalWait() throws InterruptedException &amp;#123;
        LOCK.wait();
    &amp;#125;

    private static void waiting() throws InterruptedException &amp;#123;
        Thread t1 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (LOCK) &amp;#123;
                try &amp;#123;
                    get(&amp;quot;t&amp;quot;).debug(&amp;quot;waiting...&amp;quot;);
                    LOCK.wait(5000L);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    get(&amp;quot;t&amp;quot;).debug(&amp;quot;interrupted...&amp;quot;);
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;, &amp;quot;t1&amp;quot;);
        t1.start();

        Thread.sleep(100);
        synchronized (LOCK) &amp;#123;
            main.debug(&amp;quot;other...&amp;quot;);
        &amp;#125;

    &amp;#125;

    private static void sleeping() throws InterruptedException &amp;#123;
        Thread t1 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (LOCK) &amp;#123;
                try &amp;#123;
                    get(&amp;quot;t&amp;quot;).debug(&amp;quot;sleeping...&amp;quot;);
                    Thread.sleep(5000L);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    get(&amp;quot;t&amp;quot;).debug(&amp;quot;interrupted...&amp;quot;);
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;, &amp;quot;t1&amp;quot;);
        t1.start();

        Thread.sleep(100);
        synchronized (LOCK) &amp;#123;
            main.debug(&amp;quot;other...&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;如何停止一个正在运行的线程？&#34;&gt;&lt;a href=&#34;#如何停止一个正在运行的线程？&#34; class=&#34;headerlink&#34; title=&#34;如何停止一个正在运行的线程？&#34;&gt;&lt;/a&gt;如何停止一个正在运行的线程？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;p&gt;有三种方式可以停止线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用退出标志，使线程正常退出，也就是当run方法完成后线程终止&lt;/li&gt;
&lt;li&gt;使用stop方法强行终止（不推荐，方法已作废）&lt;/li&gt;
&lt;li&gt;使用interrupt方法中断线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码参考如下：&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;使用退出标志，使线程正常退出&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyInterrupt1 extends Thread &amp;#123;

    volatile boolean flag = false ;     // 线程执行的退出标记

    @Override
    public void run() &amp;#123;
        while(!flag) &amp;#123;
            System.out.println(&amp;quot;MyThread...run...&amp;quot;);
            try &amp;#123;
                Thread.sleep(3000);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;

        // 创建MyThread对象
        MyInterrupt1 t1 = new MyInterrupt1() ;
        t1.start();

        // 主线程休眠6秒
        Thread.sleep(6000);

        // 更改标记为true
        t1.flag = true ;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;② &lt;strong&gt;使用stop方法强行终止&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyInterrupt2 extends Thread &amp;#123;

    volatile boolean flag = false ;     // 线程执行的退出标记

    @Override
    public void run() &amp;#123;
        while(!flag) &amp;#123;
            System.out.println(&amp;quot;MyThread...run...&amp;quot;);
            try &amp;#123;
                Thread.sleep(3000);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;

        // 创建MyThread对象
        MyInterrupt2 t1 = new MyInterrupt2() ;
        t1.start();

        // 主线程休眠2秒
        Thread.sleep(6000);

        // 调用stop方法
        t1.stop();

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③ &lt;strong&gt;使用interrupt方法中断线程&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.itheima.basic;

public class MyInterrupt3 &amp;#123;

    public static void main(String[] args) throws InterruptedException &amp;#123;

        //1.打断阻塞的线程
        /*Thread t1 = new Thread(()-&amp;gt;&amp;#123;
            System.out.println(&amp;quot;t1 正在运行...&amp;quot;);
            try &amp;#123;
                Thread.sleep(5000);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;, &amp;quot;t1&amp;quot;);
        t1.start();
        Thread.sleep(500);
        t1.interrupt();
        System.out.println(t1.isInterrupted());*/


        //2.打断正常的线程
        Thread t2 = new Thread(()-&amp;gt;&amp;#123;
            while(true) &amp;#123;
                Thread current = Thread.currentThread();
                boolean interrupted = current.isInterrupted();
                if(interrupted) &amp;#123;
                    System.out.println(&amp;quot;打断状态：&amp;quot;+interrupted);
                    break;
                &amp;#125;
            &amp;#125;
        &amp;#125;, &amp;quot;t2&amp;quot;);
        t2.start();
        Thread.sleep(500);
//        t2.interrupt();

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;线程中并发锁&#34;&gt;&lt;a href=&#34;#线程中并发锁&#34; class=&#34;headerlink&#34; title=&#34;线程中并发锁&#34;&gt;&lt;/a&gt;线程中并发锁&lt;/h2&gt;&lt;h3 id=&#34;讲一下synchronized关键字的底层原理？&#34;&gt;&lt;a href=&#34;#讲一下synchronized关键字的底层原理？&#34; class=&#34;headerlink&#34; title=&#34;讲一下synchronized关键字的底层原理？&#34;&gt;&lt;/a&gt;讲一下synchronized关键字的底层原理？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;基本使用&#34;&gt;&lt;a href=&#34;#基本使用&#34; class=&#34;headerlink&#34; title=&#34;基本使用&#34;&gt;&lt;/a&gt;基本使用&lt;/h4&gt;&lt;p&gt;如下抢票的代码，如果不加锁，就会出现超卖或者一张票卖给多个人&lt;/p&gt;
&lt;p&gt;Synchronized【对象锁】采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public class TicketDemo &amp;#123;

    static Object lock = new Object();
    int ticketNum = 10;


    public synchronized void getTicket() &amp;#123;
        synchronized (this) &amp;#123;
            if (ticketNum &amp;lt;= 0) &amp;#123;
                return;
            &amp;#125;
            System.out.println(Thread.currentThread().getName() + &amp;quot;抢到一张票,剩余:&amp;quot; + ticketNum);
            // 非原子性操作
            ticketNum--;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) &amp;#123;
        TicketDemo ticketDemo = new TicketDemo();
        for (int i = 0; i &amp;lt; 20; i++) &amp;#123;
            new Thread(() -&amp;gt; &amp;#123;
                ticketDemo.getTicket();
            &amp;#125;).start();
        &amp;#125;
    &amp;#125;


&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;Monitor&#34;&gt;&lt;a href=&#34;#Monitor&#34; class=&#34;headerlink&#34; title=&#34;Monitor&#34;&gt;&lt;/a&gt;Monitor&lt;/h4&gt;&lt;p&gt;Monitor 被翻译为监视器，是由jvm提供，c++语言实现&lt;/p&gt;
&lt;p&gt;在代码中想要体现monitor需要借助javap命令查看clsss的字节码，比如以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class SyncTest &amp;#123;

    static final Object lock = new Object();
    static int counter = 0;
    public static void main(String[] args) &amp;#123;
        synchronized (lock) &amp;#123;
            counter++;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到这个类的class文件，在class文件目录下执行&lt;code&gt;javap -v SyncTest.class&lt;/code&gt;，反编译效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504165342501.png&#34; alt=&#34;image-20230504165342501&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;monitorenter    上锁开始的地方&lt;/li&gt;
&lt;li&gt;monitorexit        解锁的地方&lt;/li&gt;
&lt;li&gt;其中被monitorenter和monitorexit包围住的指令就是上锁的代码&lt;/li&gt;
&lt;li&gt;有两个monitorexit的原因，第二个monitorexit是为了防止锁住的代码抛异常后不能及时释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在使用了synchornized代码块时需要指定一个对象，所以synchornized也被称为对象锁&lt;/p&gt;
&lt;p&gt;monitor主要就是跟这个对象产生关联，如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504165833809.png&#34; alt=&#34;image-20230504165833809&#34;&gt;&lt;/p&gt;
&lt;p&gt;Monitor内部具体的存储结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Owner：存储当前获取锁的线程的，只能有一个线程可以获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EntryList：关联没有抢到锁的线程，处于Blocked状态的线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WaitSet：关联调用了wait方法的线程，处于Waiting状态的线程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码进入synchorized代码块，先让lock（对象锁）关联的monitor，然后判断Owner是否有线程持有&lt;/li&gt;
&lt;li&gt;如果没有线程持有，则让当前线程持有，表示该线程获取锁成功&lt;/li&gt;
&lt;li&gt;如果有线程持有，则让当前线程进入entryList进行阻塞，如果Owner持有的线程已经释放了锁，在EntryList中的线程去竞争锁的持有权（非公平）&lt;/li&gt;
&lt;li&gt;如果代码块中调用了wait()方法，则会进去WaitSet中进行等待&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Synchronized【对象锁】采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它的底层由monitor实现的，monitor是jvm级别的对象（ C++实现），线程获得锁需要使用对象（锁）关联monitor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在monitor内部有三个属性，分别是owner、entrylist、waitset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其中owner是关联的获得锁的线程，并且只能关联一个线程；entrylist关联的是处于阻塞状态的线程；waitset关联的是处于Waiting状态的线程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;synchronized关键字的底层原理-进阶&#34;&gt;&lt;a href=&#34;#synchronized关键字的底层原理-进阶&#34; class=&#34;headerlink&#34; title=&#34;synchronized关键字的底层原理-进阶&#34;&gt;&lt;/a&gt;synchronized关键字的底层原理-进阶&lt;/h3&gt;&lt;p&gt;Monitor实现的锁属于重量级锁，你了解过锁升级吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Monitor实现的锁属于重量级锁，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在JDK 1.6引入了两种新型锁机制：偏向锁和轻量级锁，它们的引入是为了解决在没有多线程竞争或基本没有竞争的场景下因使用传统锁机制带来的性能开销问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对象的内存结构&#34;&gt;&lt;a href=&#34;#对象的内存结构&#34; class=&#34;headerlink&#34; title=&#34;对象的内存结构&#34;&gt;&lt;/a&gt;对象的内存结构&lt;/h4&gt;&lt;p&gt;在HotSpot虚拟机中，对象在内存中存储的布局可分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504172253826.png&#34; alt=&#34;image-20230504172253826&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们需要重点分析MarkWord对象头&lt;/p&gt;
&lt;h4 id=&#34;MarkWord&#34;&gt;&lt;a href=&#34;#MarkWord&#34; class=&#34;headerlink&#34; title=&#34;MarkWord&#34;&gt;&lt;/a&gt;MarkWord&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504172541922.png&#34; alt=&#34;image-20230504172541922&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hashcode：25位的对象标识Hash码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;age：对象分代年龄占4位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;biased_lock：偏向锁标识，占1位 ，0表示没有开始偏向锁，1表示开启了偏向锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;thread：持有偏向锁的线程ID，占23位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;epoch：偏向时间戳，占2位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ptr_to_lock_record：轻量级锁状态下，指向栈中锁记录的指针，占30位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ptr_to_heavyweight_monitor：重量级锁状态下，指向对象监视器Monitor的指针，占30位&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以通过lock的标识，来判断是哪一种锁的等级&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后三位是001表示无锁&lt;/li&gt;
&lt;li&gt;后三位是101表示偏向锁&lt;/li&gt;
&lt;li&gt;后两位是00表示轻量级锁&lt;/li&gt;
&lt;li&gt;后两位是10表示重量级锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;再说Monitor重量级锁&#34;&gt;&lt;a href=&#34;#再说Monitor重量级锁&#34; class=&#34;headerlink&#34; title=&#34;再说Monitor重量级锁&#34;&gt;&lt;/a&gt;再说Monitor重量级锁&lt;/h4&gt;&lt;p&gt;每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，&lt;strong&gt;该对象头的Mark Word 中就被设置指向 Monitor 对象的指针&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504172957271.png&#34; alt=&#34;image-20230504172957271&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单说就是：每个对象的对象头都可以设置monoitor的指针，让对象与monitor产生关联&lt;/p&gt;
&lt;h4 id=&#34;轻量级锁&#34;&gt;&lt;a href=&#34;#轻量级锁&#34; class=&#34;headerlink&#34; title=&#34;轻量级锁&#34;&gt;&lt;/a&gt;轻量级锁&lt;/h4&gt;&lt;p&gt;在很多的情况下，在Java程序运行时，同步块中的代码都是不存在竞争的，不同的线程交替的执行同步块中的代码。这种情况下，用重量级锁是没必要的。因此JVM引入了轻量级锁的概念。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;static final Object obj = new Object();

public static void method1() &amp;#123;
    synchronized (obj) &amp;#123;
        // 同步块 A
        method2();
    &amp;#125;
&amp;#125;

public static void method2() &amp;#123;
    synchronized (obj) &amp;#123;
        // 同步块 B
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;加锁的流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在线程栈中创建一个Lock Record，将其obj字段指向锁对象。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504173520412.png&#34; alt=&#34;image-20230504173520412&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.通过CAS指令将Lock Record的地址存储在对象头的mark word中（数据进行交换），如果对象处于无锁状态则修改成功，代表该线程获得了轻量级锁。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504173611219.png&#34; alt=&#34;image-20230504173611219&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.如果是当前线程已经持有该锁了，代表这是一次锁重入。设置Lock Record第一部分为null，起到了一个重入计数器的作用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504173922343.png&#34; alt=&#34;image-20230504173922343&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.如果CAS修改失败，说明发生了竞争，需要膨胀为重量级锁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解锁过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.遍历线程栈,找到所有obj字段等于当前锁对象的Lock Record。&lt;/p&gt;
&lt;p&gt;2.如果Lock Record的Mark Word为null，代表这是一次重入，将obj设置为null后continue。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504173955680.png&#34; alt=&#34;image-20230504173955680&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.如果Lock Record的 Mark Word不为null，则利用CAS指令将对象头的mark word恢复成为无锁状态。如果失败则膨胀为重量级锁。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504174045458.png&#34; alt=&#34;image-20230504174045458&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;偏向锁&#34;&gt;&lt;a href=&#34;#偏向锁&#34; class=&#34;headerlink&#34; title=&#34;偏向锁&#34;&gt;&lt;/a&gt;偏向锁&lt;/h4&gt;&lt;p&gt;轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。&lt;/p&gt;
&lt;p&gt;Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现&lt;/p&gt;
&lt;p&gt;这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;static final Object obj = new Object();

public static void m1() &amp;#123;
    synchronized (obj) &amp;#123;
        // 同步块 A
        m2();
    &amp;#125;
&amp;#125;

public static void m2() &amp;#123;
    synchronized (obj) &amp;#123;
        // 同步块 B
        m3();
    &amp;#125;
&amp;#125;

public static void m3() &amp;#123;
    synchronized (obj) &amp;#123;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;加锁的流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.在线程栈中创建一个Lock Record，将其obj字段指向锁对象。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504174525256.png&#34; alt=&#34;image-20230504174525256&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.通过CAS指令将Lock Record的&lt;strong&gt;线程id&lt;/strong&gt;存储在对象头的mark word中，同时也设置偏向锁的标识为101，如果对象处于无锁状态则修改成功，代表该线程获得了偏向锁。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504174505031.png&#34; alt=&#34;image-20230504174505031&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.如果是当前线程已经持有该锁了，代表这是一次锁重入。设置Lock Record第一部分为null，起到了一个重入计数器的作用。与轻量级锁不同的时，这里不会再次进行cas操作，只是判断对象头中的线程id是否是自己，因为缺少了cas操作，性能相对轻量级锁更好一些&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504174736226.png&#34; alt=&#34;image-20230504174736226&#34;&gt;&lt;/p&gt;
&lt;p&gt;解锁流程参考轻量级锁&lt;/p&gt;
&lt;h4 id=&#34;参考回答&#34;&gt;&lt;a href=&#34;#参考回答&#34; class=&#34;headerlink&#34; title=&#34;参考回答&#34;&gt;&lt;/a&gt;参考回答&lt;/h4&gt;&lt;p&gt;Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;重量级锁&lt;/td&gt;
&lt;td&gt;底层使用的Monitor实现，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;轻量级锁&lt;/td&gt;
&lt;td&gt;线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志，相对重量级锁性能提升很多。每次修改都是CAS操作，保证原子性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;偏向锁&lt;/td&gt;
&lt;td&gt;一段很长的时间内都只被一个线程使用锁，可以使用了偏向锁，在第一次获得锁时，会有一个CAS操作，之后该线程再获取锁，只需要判断mark  word中是否是自己的线程id即可，而不是开销相对较大的CAS命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;一旦锁发生了竞争，都会升级为重量级锁&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;谈谈-JMM（Java-内存模型）&#34;&gt;&lt;a href=&#34;#谈谈-JMM（Java-内存模型）&#34; class=&#34;headerlink&#34; title=&#34;谈谈 JMM（Java 内存模型）&#34;&gt;&lt;/a&gt;谈谈 JMM（Java 内存模型）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JMM(Java Memory Model)Java内存模型,是java虚拟机规范中所定义的一种内存模型。&lt;/p&gt;
&lt;p&gt;Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504181638237.png&#34; alt=&#34;image-20230504181638237&#34;&gt;&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;所有的共享变量都存储于主内存(计算机的RAM)这里所说的变量指的是实例变量和类变量。不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程对变量的所有的操作(读，写)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主内存完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;CAS-你知道吗？&#34;&gt;&lt;a href=&#34;#CAS-你知道吗？&#34; class=&#34;headerlink&#34; title=&#34;CAS 你知道吗？&#34;&gt;&lt;/a&gt;CAS 你知道吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;概述及基本工作流程&#34;&gt;&lt;a href=&#34;#概述及基本工作流程&#34; class=&#34;headerlink&#34; title=&#34;概述及基本工作流程&#34;&gt;&lt;/a&gt;概述及基本工作流程&lt;/h4&gt;&lt;p&gt;CAS的全称是： Compare And Swap(比较再交换)，它体现的一种乐观锁的思想，在无锁情况下保证线程操作共享数据的原子性。&lt;/p&gt;
&lt;p&gt;在JUC（ java.util.concurrent ）包下实现的很多类都用到了CAS操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AbstractQueuedSynchronizer（AQS框架）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AtomicXXX类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;我们还是基于刚才学习过的JMM内存模型进行说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程1与线程2都从主内存中获取变量int a &amp;#x3D; 100,同时放到各个线程的工作内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504181947319.png&#34; alt=&#34;image-20230504181947319&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当旧的预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。如果CAS操作失败，通过自旋的方式等待并再次尝试，直到成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;线程1操作：V：int a &amp;#x3D; 100，A：int a &amp;#x3D; 100，B：修改后的值：int a &amp;#x3D; 101 (a++)&lt;ul&gt;
&lt;li&gt;线程1拿A的值与主内存V的值进行比较，判断是否相等&lt;/li&gt;
&lt;li&gt;如果相等，则把B的值101更新到主内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504182129820.png&#34; alt=&#34;image-20230504182129820&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程2操作：V：int a &amp;#x3D; 100，A：int a &amp;#x3D; 100，B：修改后的值：int a &amp;#x3D; 99(a–)&lt;ul&gt;
&lt;li&gt;线程2拿A的值与主内存V的值进行比较，判断是否相等(目前不相等，因为线程1已更新V的值99)&lt;/li&gt;
&lt;li&gt;不相等，则线程2更新失败&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504181827330.png&#34; alt=&#34;image-20230504181827330&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自旋锁操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为没有加锁，所以线程不会陷入阻塞，效率较高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果竞争激烈，重试频繁发生，效率会受影响&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504182447552.png&#34; alt=&#34;image-20230504182447552&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要不断尝试获取共享内存V中最新的值，然后再在新的值的基础上进行更新操作，如果失败就继续尝试获取新的值，直到更新成功&lt;/p&gt;
&lt;h4 id=&#34;CAS-底层实现&#34;&gt;&lt;a href=&#34;#CAS-底层实现&#34; class=&#34;headerlink&#34; title=&#34;CAS 底层实现&#34;&gt;&lt;/a&gt;CAS 底层实现&lt;/h4&gt;&lt;p&gt;CAS 底层依赖于一个 Unsafe 类来直接调用操作系统底层的 CAS 指令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504182737931.png&#34; alt=&#34;image-20230504182737931&#34;&gt;&lt;/p&gt;
&lt;p&gt;都是native修饰的方法，由系统提供的接口执行，并非java代码实现，一般的思路也都是自旋锁实现&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504182838426.png&#34; alt=&#34;image-20230504182838426&#34;&gt;&lt;/p&gt;
&lt;p&gt;在java中比较常见使用有很多，比如ReentrantLock和Atomic开头的线程安全类，都调用了Unsafe中的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReentrantLock中的一段CAS代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230504182958703.png&#34; alt=&#34;image-20230504182958703&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;乐观锁和悲观锁&#34;&gt;&lt;a href=&#34;#乐观锁和悲观锁&#34; class=&#34;headerlink&#34; title=&#34;乐观锁和悲观锁&#34;&gt;&lt;/a&gt;乐观锁和悲观锁&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请谈谈你对-volatile-的理解&#34;&gt;&lt;a href=&#34;#请谈谈你对-volatile-的理解&#34; class=&#34;headerlink&#34; title=&#34;请谈谈你对 volatile 的理解&#34;&gt;&lt;/a&gt;请谈谈你对 volatile 的理解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：&lt;/p&gt;
&lt;h4 id=&#34;保证线程间的可见性&#34;&gt;&lt;a href=&#34;#保证线程间的可见性&#34; class=&#34;headerlink&#34; title=&#34;保证线程间的可见性&#34;&gt;&lt;/a&gt;保证线程间的可见性&lt;/h4&gt;&lt;p&gt;保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。&lt;/p&gt;
&lt;p&gt;一个典型的例子：永不停止的循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.itheima.basic;


// 可见性例子
// -Xint
public class ForeverLoop &amp;#123;
    static boolean stop = false;

    public static void main(String[] args) &amp;#123;
        new Thread(() -&amp;gt; &amp;#123;
            try &amp;#123;
                Thread.sleep(100);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            stop = true;
            System.out.println(&amp;quot;modify stop to true...&amp;quot;);
        &amp;#125;).start();
        foo();
    &amp;#125;

    static void foo() &amp;#123;
        int i = 0;
        while (!stop) &amp;#123;
            i++;
        &amp;#125;
        System.out.println(&amp;quot;stopped... c:&amp;quot;+ i);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当执行上述代码的时候，发现foo()方法中的循环是结束不了的，也就说读取不到共享变量的值结束循环。&lt;/p&gt;
&lt;p&gt;主要是因为在JVM虚拟机中有一个JIT（即时编辑器）给代码做了优化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上述代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;while (!stop) &amp;#123;
i++;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在很短的时间内，这个代码执行的次数太多了，当达到了一个阈值，JIT就会优化此代码，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;while (true) &amp;#123;
i++;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当把代码优化成这样子以后，及时&lt;code&gt;stop&lt;/code&gt;变量改变为了&lt;code&gt;false&lt;/code&gt;也依然停止不了循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;第一：&lt;/p&gt;
&lt;p&gt;在程序运行的时候加入vm参数&lt;code&gt;-Xint&lt;/code&gt;表示禁用即时编辑器，不推荐，得不偿失（其他程序还要使用）&lt;/p&gt;
&lt;p&gt;第二：&lt;/p&gt;
&lt;p&gt;在修饰&lt;code&gt;stop&lt;/code&gt;变量的时候加上&lt;code&gt;volatile&lt;/code&gt;,表示当前代码禁用了即时编辑器，问题就可以解决，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;static volatile boolean stop = false;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;禁止进行指令重排序&#34;&gt;&lt;a href=&#34;#禁止进行指令重排序&#34; class=&#34;headerlink&#34; title=&#34;禁止进行指令重排序&#34;&gt;&lt;/a&gt;禁止进行指令重排序&lt;/h4&gt;&lt;p&gt;用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505082441116.png&#34; alt=&#34;image-20230505082441116&#34;&gt;&lt;/p&gt;
&lt;p&gt;在去获取上面的结果的时候，有可能会出现4种情况&lt;/p&gt;
&lt;p&gt;情况一：先执行actor2获取结果—&amp;gt;0,0(正常)&lt;/p&gt;
&lt;p&gt;情况二：先执行actor1中的第一行代码，然后执行actor2获取结果—&amp;gt;0,1(正常)&lt;/p&gt;
&lt;p&gt;情况三：先执行actor1中所有代码，然后执行actor2获取结果—&amp;gt;1,1(正常)&lt;/p&gt;
&lt;p&gt;情况四：先执行actor1中第二行代码，然后执行actor2获取结果—&amp;gt;1,0(发生了指令重排序，影响结果)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在变量上添加volatile，禁止指令重排序，则可以解决问题&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505082835588.png&#34; alt=&#34;image-20230505082835588&#34;&gt;&lt;/p&gt;
&lt;p&gt;屏障添加的示意图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505082923729.png&#34; alt=&#34;image-20230505082923729&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作加的屏障是阻止上方其它写操作越过屏障排到volatile变量写之下&lt;/li&gt;
&lt;li&gt;读操作加的屏障是阻止下方其它读操作越过屏障排到volatile变量读之上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们上面的解决方案是把volatile加在了int y这个变量上，我们能不能把它加在int x这个变量上呢？&lt;/p&gt;
&lt;p&gt;下面代码使用volatile修饰了x变量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505083124159.png&#34; alt=&#34;image-20230505083124159&#34;&gt;&lt;/p&gt;
&lt;p&gt;屏障添加的示意图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505083217904.png&#34; alt=&#34;image-20230505083217904&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样显然是不行的，主要是因为下面两个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作加的屏障是阻止上方其它写操作越过屏障排到volatile变量写之下&lt;/li&gt;
&lt;li&gt;读操作加的屏障是阻止下方其它读操作越过屏障排到volatile变量读之上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，现在我们就可以总结一个volatile使用的小妙招：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写变量让volatile修饰的变量的在代码最后位置&lt;/li&gt;
&lt;li&gt;读变量让volatile修饰的变量的在代码最开始位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是AQS？&#34;&gt;&lt;a href=&#34;#什么是AQS？&#34; class=&#34;headerlink&#34; title=&#34;什么是AQS？&#34;&gt;&lt;/a&gt;什么是AQS？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架，它是构建锁或者其他同步组件的基础框架&lt;/p&gt;
&lt;p&gt;AQS与Synchronized的区别&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;synchronized&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;AQS&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;关键字，c++ 语言实现&lt;/td&gt;
&lt;td&gt;java  语言实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;悲观锁，自动释放锁&lt;/td&gt;
&lt;td&gt;悲观锁，手动开启和关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;锁竞争激烈都是重量级锁，性能差&lt;/td&gt;
&lt;td&gt;锁竞争激烈的情况下，提供了多种解决方案&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;AQS常见的实现类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ReentrantLock      阻塞式锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Semaphore        信号量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CountDownLatch   倒计时锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工作机制&#34;&gt;&lt;a href=&#34;#工作机制&#34; class=&#34;headerlink&#34; title=&#34;工作机制&#34;&gt;&lt;/a&gt;工作机制&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在AQS中维护了一个使用了volatile修饰的state属性来表示资源的状态，0表示无锁，1表示有锁&lt;/li&gt;
&lt;li&gt;提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList&lt;/li&gt;
&lt;li&gt;条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505083840046.png&#34; alt=&#34;image-20230505083840046&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;线程0来了以后，去尝试修改state属性，如果发现state属性是0，就修改state状态为1，表示线程0抢锁成功&lt;/li&gt;
&lt;li&gt;线程1和线程2也会先尝试修改state属性，发现state的值已经是1了，有其他线程持有锁，它们都会到FIFO队列中进行等待，&lt;/li&gt;
&lt;li&gt;FIFO是一个双向队列，head属性表示头结点，tail表示尾结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果多个线程共同去抢这个资源是如何保证原子性的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505084451193.png&#34; alt=&#34;image-20230505084451193&#34;&gt;&lt;/p&gt;
&lt;p&gt;在去修改state状态的时候，使用的cas自旋锁来保证原子性，确保只能有一个线程修改成功，修改失败的线程将会进入FIFO队列中等待&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AQS是公平锁吗，还是非公平锁？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新的线程与队列中的线程共同来抢资源，是非公平锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新的线程到队列中等待，只让队列中的head线程获取锁，是公平锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;比较典型的AQS实现类ReentrantLock，它默认就是非公平锁，新的线程与队列中的线程共同来抢资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ReentrantLock的实现原理&#34;&gt;&lt;a href=&#34;#ReentrantLock的实现原理&#34; class=&#34;headerlink&#34; title=&#34;ReentrantLock的实现原理&#34;&gt;&lt;/a&gt;ReentrantLock的实现原理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;概述-1&#34;&gt;&lt;a href=&#34;#概述-1&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;ReentrantLock翻译过来是可重入锁，相对于synchronized它具备以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可中断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以设置超时时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以设置公平锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持多个条件变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与synchronized一样，都支持重入&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505091736569.png&#34; alt=&#34;image-20230505091736569&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;实现原理&#34;&gt;&lt;a href=&#34;#实现原理&#34; class=&#34;headerlink&#34; title=&#34;实现原理&#34;&gt;&lt;/a&gt;实现原理&lt;/h4&gt;&lt;p&gt;ReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现类似&lt;/p&gt;
&lt;p&gt;构造方法接受一个可选的公平参数（默认非公平锁），当设置为true时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高，在许多线程访问的情况下，公平锁表现出较低的吞吐量。&lt;/p&gt;
&lt;p&gt;查看ReentrantLock源码中的构造方法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505091827720.png&#34; alt=&#34;image-20230505091827720&#34;&gt;&lt;/p&gt;
&lt;p&gt;提供了两个构造方法，不带参数的默认为非公平&lt;/p&gt;
&lt;p&gt;如果使用带参数的构造函数，并且传的值为true，则是公平锁&lt;/p&gt;
&lt;p&gt;其中NonfairSync和FairSync这两个类父类都是Sync&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505092151244.png&#34; alt=&#34;image-20230505092151244&#34;&gt;&lt;/p&gt;
&lt;p&gt;而Sync的父类是AQS，所以可以得出ReentrantLock底层主要实现就是基于AQS来实现的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505091833629.png&#34; alt=&#34;image-20230505091833629&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505092340431.png&#34; alt=&#34;image-20230505092340431&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线程来抢锁后使用cas的方式修改state状态，修改状态成功为1，则让exclusiveOwnerThread属性指向当前线程，获取锁成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;假如修改状态失败，则会进入双向队列中等待，head指向双向队列头部，tail指向双向队列尾部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当exclusiveOwnerThread为null的时候，则会唤醒在双向队列中等待的线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;公平锁则体现在按照先后顺序获取锁，非公平体现在不在排队的线程也可以抢锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;synchronized和Lock有什么区别&#34;&gt;&lt;a href=&#34;#synchronized和Lock有什么区别&#34; class=&#34;headerlink&#34; title=&#34;synchronized和Lock有什么区别 ?&#34;&gt;&lt;/a&gt;synchronized和Lock有什么区别 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考回答&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法层面&lt;ul&gt;
&lt;li&gt;synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现&lt;/li&gt;
&lt;li&gt;Lock 是接口，源码由 jdk 提供，用 java 语言实现&lt;/li&gt;
&lt;li&gt;使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能层面&lt;ul&gt;
&lt;li&gt;二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能&lt;/li&gt;
&lt;li&gt;Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量&lt;/li&gt;
&lt;li&gt;Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能层面&lt;ul&gt;
&lt;li&gt;在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖&lt;/li&gt;
&lt;li&gt;在竞争激烈时，Lock 的实现通常会提供更好的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁产生的条件是什么？&#34;&gt;&lt;a href=&#34;#死锁产生的条件是什么？&#34; class=&#34;headerlink&#34; title=&#34;死锁产生的条件是什么？&#34;&gt;&lt;/a&gt;死锁产生的条件是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;死锁&lt;/strong&gt;：一个线程需要同时获取多把锁，这时就容易发生死锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;t1 线程获得A对象锁，接下来想获取B对象的锁&lt;/p&gt;
&lt;p&gt;t2 线程获得B对象锁，接下来想获取A对象的锁 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.itheima.basic;

import static java.lang.Thread.sleep;

public class Deadlock &amp;#123;

    public static void main(String[] args) &amp;#123;
        Object A = new Object();
        Object B = new Object();
        Thread t1 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (A) &amp;#123;
                System.out.println(&amp;quot;lock A&amp;quot;);
                try &amp;#123;
                    sleep(1000);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    throw new RuntimeException(e);
                &amp;#125;
                synchronized (B) &amp;#123;
                    System.out.println(&amp;quot;lock B&amp;quot;);
                    System.out.println(&amp;quot;操作...&amp;quot;);
                &amp;#125;
            &amp;#125;
        &amp;#125;, &amp;quot;t1&amp;quot;);

        Thread t2 = new Thread(() -&amp;gt; &amp;#123;
            synchronized (B) &amp;#123;
                System.out.println(&amp;quot;lock B&amp;quot;);
                try &amp;#123;
                    sleep(500);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    throw new RuntimeException(e);
                &amp;#125;
                synchronized (A) &amp;#123;
                    System.out.println(&amp;quot;lock A&amp;quot;);
                    System.out.println(&amp;quot;操作...&amp;quot;);
                &amp;#125;
            &amp;#125;
        &amp;#125;, &amp;quot;t2&amp;quot;);
        t1.start();
        t2.start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;控制台输出结果&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220902171032898.png&#34; alt=&#34;image-20220902171032898&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时程序并没有结束，这种现象就是死锁现象…线程t1持有A的锁等待获取B锁，线程t2持有B的锁等待获取A的锁。&lt;/p&gt;
&lt;h3 id=&#34;如何进行死锁诊断？&#34;&gt;&lt;a href=&#34;#如何进行死锁诊断？&#34; class=&#34;headerlink&#34; title=&#34;如何进行死锁诊断？&#34;&gt;&lt;/a&gt;如何进行死锁诊断？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当程序出现了死锁现象，我们可以使用jdk自带的工具：jps和 jstack&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;p&gt;第一：查看运行的线程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220902171426738.png&#34; alt=&#34;image-20220902171426738&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二：使用jstack查看线程运行的情况，下图是截图的关键信息&lt;/p&gt;
&lt;p&gt;运行命令：&lt;code&gt;jstack -l 46032&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220902172229567.png&#34; alt=&#34;image-20220902172229567&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他解决工具，可视化工具&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jconsole&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具&lt;/p&gt;
&lt;p&gt;打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VisualVM：故障处理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈&lt;/p&gt;
&lt;p&gt;打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行&lt;/p&gt;
&lt;h3 id=&#34;ConcurrentHashMap&#34;&gt;&lt;a href=&#34;#ConcurrentHashMap&#34; class=&#34;headerlink&#34; title=&#34;ConcurrentHashMap&#34;&gt;&lt;/a&gt;ConcurrentHashMap&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ConcurrentHashMap 是一种线程安全的高效Map集合&lt;/p&gt;
&lt;p&gt;底层数据结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK1.7底层采用分段的数组+链表实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表&amp;#x2F;红黑二叉树。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;（1）-JDK1-7中concurrentHashMap&#34;&gt;&lt;a href=&#34;#（1）-JDK1-7中concurrentHashMap&#34; class=&#34;headerlink&#34; title=&#34;（1） JDK1.7中concurrentHashMap&#34;&gt;&lt;/a&gt;（1） JDK1.7中concurrentHashMap&lt;/h4&gt;&lt;p&gt;数据结构&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505092654811.png&#34; alt=&#34;image-20230505092654811&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;提供了一个segment数组，在初始化ConcurrentHashMap 的时候可以指定数组的长度，默认是16，一旦初始化之后中间不可扩容&lt;/li&gt;
&lt;li&gt;在每个segment中都可以挂一个HashEntry数组，数组里面可以存储具体的元素，HashEntry数组是可以扩容的&lt;/li&gt;
&lt;li&gt;在HashEntry存储的数组中存储的元素，如果发生冲突，则可以挂单向链表&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;存储流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505093055382.png&#34; alt=&#34;image-20230505093055382&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先去计算key的hash值，然后确定segment数组下标&lt;/li&gt;
&lt;li&gt;再通过hash值确定hashEntry数组中的下标存储数据&lt;/li&gt;
&lt;li&gt;在进行操作数据的之前，会先判断当前segment对应下标位置是否有线程进行操作，为了线程安全使用的是ReentrantLock进行加锁，如果获取锁是被会使用cas自旋锁进行尝试&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;（2）-JDK1-8中concurrentHashMap&#34;&gt;&lt;a href=&#34;#（2）-JDK1-8中concurrentHashMap&#34; class=&#34;headerlink&#34; title=&#34;（2） JDK1.8中concurrentHashMap&#34;&gt;&lt;/a&gt;（2） JDK1.8中concurrentHashMap&lt;/h4&gt;&lt;p&gt;在JDK1.8中，放弃了Segment臃肿的设计，数据结构跟HashMap的数据结构是一样的：数组+红黑树+链表&lt;/p&gt;
&lt;p&gt;采用 CAS + Synchronized来保证并发安全进行实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CAS控制数组节点的添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;synchronized只锁定当前链表或红黑二叉树的首节点，只要hash不冲突，就不会产生并发的问题 , 效率得到提升&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505093507265.png&#34; alt=&#34;image-20230505093507265&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;导致并发程序出现问题的根本原因是什么&#34;&gt;&lt;a href=&#34;#导致并发程序出现问题的根本原因是什么&#34; class=&#34;headerlink&#34; title=&#34;导致并发程序出现问题的根本原因是什么&#34;&gt;&lt;/a&gt;导致并发程序出现问题的根本原因是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java并发编程三大特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可见性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;（1）原子性&#34;&gt;&lt;a href=&#34;#（1）原子性&#34; class=&#34;headerlink&#34; title=&#34;（1）原子性&#34;&gt;&lt;/a&gt;（1）原子性&lt;/h4&gt;&lt;p&gt;一个线程在CPU中操作不可暂停，也不可中断，要不执行完成，要不不执行&lt;/p&gt;
&lt;p&gt;比如，如下代码能保证原子性吗？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505205200628.png&#34; alt=&#34;image-20230505205200628&#34;&gt;&lt;/p&gt;
&lt;p&gt;以上代码会出现超卖或者是一张票卖给同一个人，执行并不是原子性的&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;1.synchronized：同步加锁&lt;/p&gt;
&lt;p&gt;2.JUC里面的lock：加锁&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505210853493.png&#34; alt=&#34;image-20230505210853493&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;（3）内存可见性&#34;&gt;&lt;a href=&#34;#（3）内存可见性&#34; class=&#34;headerlink&#34; title=&#34;（3）内存可见性&#34;&gt;&lt;/a&gt;（3）内存可见性&lt;/h4&gt;&lt;p&gt;内存可见性：让一个线程对共享变量的修改对另一个线程可见&lt;/p&gt;
&lt;p&gt;比如，以下代码不能保证内存可见性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505211002252.png&#34; alt=&#34;image-20230505211002252&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;synchronized&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;volatile（推荐）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LOCK&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;（3）有序性&#34;&gt;&lt;a href=&#34;#（3）有序性&#34; class=&#34;headerlink&#34; title=&#34;（3）有序性&#34;&gt;&lt;/a&gt;（3）有序性&lt;/h4&gt;&lt;p&gt;指令重排：处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的&lt;/p&gt;
&lt;p&gt;还是之前的例子，如下代码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505211209336.png&#34; alt=&#34;image-20230505211209336&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volatile&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程池&#34;&gt;&lt;a href=&#34;#线程池&#34; class=&#34;headerlink&#34; title=&#34;线程池&#34;&gt;&lt;/a&gt;线程池&lt;/h2&gt;&lt;h3 id=&#34;说一下线程池的核心参数（线程池的执行原理知道嘛）&#34;&gt;&lt;a href=&#34;#说一下线程池的核心参数（线程池的执行原理知道嘛）&#34; class=&#34;headerlink&#34; title=&#34;说一下线程池的核心参数（线程池的执行原理知道嘛）&#34;&gt;&lt;/a&gt;说一下线程池的核心参数（线程池的执行原理知道嘛）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程池核心参数主要参考ThreadPoolExecutor这个类的7个参数的构造函数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505220514872.png&#34; alt=&#34;image-20230505220514872&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;corePoolSize 核心线程数目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;maximumPoolSize 最大线程数目 &amp;#x3D; (核心线程+救急线程的最大数目)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505220701835.png&#34; alt=&#34;image-20230505220701835&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1，任务在提交的时候，首先判断核心线程数是否已满，如果没有满则直接添加到工作线程执行&lt;/p&gt;
&lt;p&gt;2，如果核心线程数满了，则判断阻塞队列是否已满，如果没有满，当前任务存入阻塞队列&lt;/p&gt;
&lt;p&gt;3，如果阻塞队列也满了，则判断线程数是否小于最大线程数，如果满足条件，则使用临时线程执行任务&lt;/p&gt;
&lt;p&gt;如果核心或临时线程执行完成任务后会检查阻塞队列中是否有需要执行的线程，如果有，则使用非核心线程执行任务&lt;/p&gt;
&lt;p&gt;4，如果所有线程都在忙着（核心线程+临时线程），则走拒绝策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;拒绝策略：&lt;/p&gt;
&lt;p&gt;1.AbortPolicy：直接抛出异常，默认策略；&lt;/p&gt;
&lt;p&gt;2.CallerRunsPolicy：用调用者所在的线程来执行任务；&lt;/p&gt;
&lt;p&gt;3.DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；&lt;/p&gt;
&lt;p&gt;4.DiscardPolicy：直接丢弃任务；&lt;/p&gt;
&lt;p&gt;参考代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestThreadPoolExecutor &amp;#123;

    static class MyTask implements Runnable &amp;#123;
        private final String name;
        private final long duration;

        public MyTask(String name) &amp;#123;
            this(name, 0);
        &amp;#125;

        public MyTask(String name, long duration) &amp;#123;
            this.name = name;
            this.duration = duration;
        &amp;#125;

        @Override
        public void run() &amp;#123;
            try &amp;#123;
                LoggerUtils.get(&amp;quot;myThread&amp;quot;).debug(&amp;quot;running...&amp;quot; + this);
                Thread.sleep(duration);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;

        @Override
        public String toString() &amp;#123;
            return &amp;quot;MyTask(&amp;quot; + name + &amp;quot;)&amp;quot;;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        AtomicInteger c = new AtomicInteger(1);
        ArrayBlockingQueue&amp;lt;Runnable&amp;gt; queue = new ArrayBlockingQueue&amp;lt;&amp;gt;(2);
        ThreadPoolExecutor threadPool = new ThreadPoolExecutor(
                2,
                3,
                0,
                TimeUnit.MILLISECONDS,
                queue,
                r -&amp;gt; new Thread(r, &amp;quot;myThread&amp;quot; + c.getAndIncrement()),
                new ThreadPoolExecutor.AbortPolicy());
        showState(queue, threadPool);
        threadPool.submit(new MyTask(&amp;quot;1&amp;quot;, 3600000));
        showState(queue, threadPool);
        threadPool.submit(new MyTask(&amp;quot;2&amp;quot;, 3600000));
        showState(queue, threadPool);
        threadPool.submit(new MyTask(&amp;quot;3&amp;quot;));
        showState(queue, threadPool);
        threadPool.submit(new MyTask(&amp;quot;4&amp;quot;));
        showState(queue, threadPool);
        threadPool.submit(new MyTask(&amp;quot;5&amp;quot;,3600000));
        showState(queue, threadPool);
        threadPool.submit(new MyTask(&amp;quot;6&amp;quot;));
        showState(queue, threadPool);
    &amp;#125;

    private static void showState(ArrayBlockingQueue&amp;lt;Runnable&amp;gt; queue, ThreadPoolExecutor threadPool) &amp;#123;
        try &amp;#123;
            Thread.sleep(300);
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        List&amp;lt;Object&amp;gt; tasks = new ArrayList&amp;lt;&amp;gt;();
        for (Runnable runnable : queue) &amp;#123;
            try &amp;#123;
                Field callable = FutureTask.class.getDeclaredField(&amp;quot;callable&amp;quot;);
                callable.setAccessible(true);
                Object adapter = callable.get(runnable);
                Class&amp;lt;?&amp;gt; clazz = Class.forName(&amp;quot;java.util.concurrent.Executors$RunnableAdapter&amp;quot;);
                Field task = clazz.getDeclaredField(&amp;quot;task&amp;quot;);
                task.setAccessible(true);
                Object o = task.get(adapter);
                tasks.add(o);
            &amp;#125; catch (Exception e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
        LoggerUtils.main.debug(&amp;quot;pool size: &amp;#123;&amp;#125;, queue: &amp;#123;&amp;#125;&amp;quot;, threadPool.getPoolSize(), tasks);
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;线程池中有哪些常见的阻塞队列&#34;&gt;&lt;a href=&#34;#线程池中有哪些常见的阻塞队列&#34; class=&#34;headerlink&#34; title=&#34;线程池中有哪些常见的阻塞队列&#34;&gt;&lt;/a&gt;线程池中有哪些常见的阻塞队列&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务&lt;/p&gt;
&lt;p&gt;比较常见的有4个，用的最多是ArrayBlockingQueue和LinkedBlockingQueue&lt;/p&gt;
&lt;p&gt;1.ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。&lt;/p&gt;
&lt;p&gt;2.LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。&lt;/p&gt;
&lt;p&gt;3.DelayedWorkQueue ：是一个优先级队列，它可以保证每次出队的任务都是当前队列中执行时间最靠前的&lt;/p&gt;
&lt;p&gt;4.SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ArrayBlockingQueue的LinkedBlockingQueue区别&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;LinkedBlockingQueue&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ArrayBlockingQueue&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;默认无界，支持有界&lt;/td&gt;
&lt;td&gt;强制有界&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底层是链表&lt;/td&gt;
&lt;td&gt;底层是数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是懒惰的，创建节点的时候添加数据&lt;/td&gt;
&lt;td&gt;提前初始化 Node  数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;入队会生成新 Node&lt;/td&gt;
&lt;td&gt;Node需要是提前创建好的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;两把锁（头尾）&lt;/td&gt;
&lt;td&gt;一把锁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;左边是LinkedBlockingQueue加锁的方式，右边是ArrayBlockingQueue加锁的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LinkedBlockingQueue读和写各有一把锁，性能相对较好&lt;/li&gt;
&lt;li&gt;ArrayBlockingQueue只有一把锁，读和写公用，性能相对于LinkedBlockingQueue差一些&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505221424359.png&#34; alt=&#34;image-20230505221424359&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何确定核心线程数&#34;&gt;&lt;a href=&#34;#如何确定核心线程数&#34; class=&#34;headerlink&#34; title=&#34;如何确定核心线程数&#34;&gt;&lt;/a&gt;如何确定核心线程数&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在设置核心线程数之前，需要先熟悉一些执行线程池执行任务的类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IO密集型任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说：文件读写、DB读写、网络请求等&lt;/p&gt;
&lt;p&gt;推荐：核心线程数大小设置为2N+1    （N为计算机的CPU核数）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU密集型任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说：计算型代码、Bitmap转换、Gson转换等&lt;/p&gt;
&lt;p&gt;推荐：核心线程数大小设置为N+1    （N为计算机的CPU核数）&lt;/p&gt;
&lt;p&gt;java代码查看CPU核数&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505221837189.png&#34; alt=&#34;image-20230505221837189&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① 高并发、任务执行时间短 –&amp;gt;（ CPU核数+1 ），减少线程上下文的切换&lt;/p&gt;
&lt;p&gt;② 并发不高、任务执行时间长&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IO密集型的任务 –&amp;gt; (CPU核数 * 2 + 1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算密集型任务 –&amp;gt; （ CPU核数+1 ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;③ 并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）&lt;/p&gt;
&lt;h3 id=&#34;线程池的种类有哪些&#34;&gt;&lt;a href=&#34;#线程池的种类有哪些&#34; class=&#34;headerlink&#34; title=&#34;线程池的种类有哪些&#34;&gt;&lt;/a&gt;线程池的种类有哪些&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在java.util.concurrent.Executors类中提供了大量创建连接池的静态方法，常见就有四种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建使用固定线程数的线程池&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505221959259.png&#34; alt=&#34;image-20230505221959259&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核心线程数与最大线程数一样，没有救急线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞队列是LinkedBlockingQueue，最大容量为Integer.MAX_VALUE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适用场景：适用于任务量已知，相对耗时的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class FixedThreadPoolCase &amp;#123;

    static class FixedThreadDemo implements Runnable&amp;#123;
        @Override
        public void run() &amp;#123;
            String name = Thread.currentThread().getName();
            for (int i = 0; i &amp;lt; 2; i++) &amp;#123;
                System.out.println(name + &amp;quot;:&amp;quot; + i);
            &amp;#125;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        //创建一个固定大小的线程池，核心线程数和最大线程数都是3
        ExecutorService executorService = Executors.newFixedThreadPool(3);

        for (int i = 0; i &amp;lt; 5; i++) &amp;#123;
            executorService.submit(new FixedThreadDemo());
            Thread.sleep(10);
        &amp;#125;

        executorService.shutdown();
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO)执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505222050294.png&#34; alt=&#34;image-20230505222050294&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核心线程数和最大线程数都是1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞队列是LinkedBlockingQueue，最大容量为Integer.MAX_VALUE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适用场景：适用于按照顺序执行的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class NewSingleThreadCase &amp;#123;

    static int count = 0;

    static class Demo implements Runnable &amp;#123;
        @Override
        public void run() &amp;#123;
            count++;
            System.out.println(Thread.currentThread().getName() + &amp;quot;:&amp;quot; + count);
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        //单个线程池，核心线程数和最大线程数都是1
        ExecutorService exec = Executors.newSingleThreadExecutor();

        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            exec.execute(new Demo());
            Thread.sleep(5);
        &amp;#125;
        exec.shutdown();
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可缓存线程池&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505222126391.png&#34; alt=&#34;image-20230505222126391&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核心线程数为0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最大线程数是Integer.MAX_VALUE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞队列为SynchronousQueue:不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适用场景：适合任务数比较密集，但每个任务执行时间较短的情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CachedThreadPoolCase &amp;#123;

    static class Demo implements Runnable &amp;#123;
        @Override
        public void run() &amp;#123;
            String name = Thread.currentThread().getName();
            try &amp;#123;
                //修改睡眠时间，模拟线程执行需要花费的时间
                Thread.sleep(100);

                System.out.println(name + &amp;quot;执行完了&amp;quot;);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        //创建一个缓存的线程，没有核心线程数，最大线程数为Integer.MAX_VALUE
        ExecutorService exec = Executors.newCachedThreadPool();
        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            exec.execute(new Demo());
            Thread.sleep(1);
        &amp;#125;
        exec.shutdown();
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供了“延迟”和“周期执行”功能的ThreadPoolExecutor。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505222203615.png&#34; alt=&#34;image-20230505222203615&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;适用场景：有定时和延迟执行的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ScheduledThreadPoolCase &amp;#123;

    static class Task implements Runnable &amp;#123;
        @Override
        public void run() &amp;#123;
            try &amp;#123;
                String name = Thread.currentThread().getName();

                System.out.println(name + &amp;quot;, 开始：&amp;quot; + new Date());
                Thread.sleep(1000);
                System.out.println(name + &amp;quot;, 结束：&amp;quot; + new Date());

            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        //按照周期执行的线程池，核心线程数为2，最大线程数为Integer.MAX_VALUE
        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(2);
        System.out.println(&amp;quot;程序开始：&amp;quot; + new Date());

        /**
         * schedule 提交任务到线程池中
         * 第一个参数：提交的任务
         * 第二个参数：任务执行的延迟时间
         * 第三个参数：时间单位
         */
        scheduledThreadPool.schedule(new Task(), 0, TimeUnit.SECONDS);
        scheduledThreadPool.schedule(new Task(), 1, TimeUnit.SECONDS);
        scheduledThreadPool.schedule(new Task(), 5, TimeUnit.SECONDS);

        Thread.sleep(5000);

        // 关闭线程池
        scheduledThreadPool.shutdown();

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;为什么不建议用Executors创建线程池&#34;&gt;&lt;a href=&#34;#为什么不建议用Executors创建线程池&#34; class=&#34;headerlink&#34; title=&#34;为什么不建议用Executors创建线程池&#34;&gt;&lt;/a&gt;为什么不建议用Executors创建线程池&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考阿里开发手册《Java开发手册-嵩山版》&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220821003816845.png&#34; alt=&#34;image-20220821003816845&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程使用场景问题&#34;&gt;&lt;a href=&#34;#线程使用场景问题&#34; class=&#34;headerlink&#34; title=&#34;线程使用场景问题&#34;&gt;&lt;/a&gt;线程使用场景问题&lt;/h2&gt;&lt;h3 id=&#34;线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）&#34;&gt;&lt;a href=&#34;#线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）&#34; class=&#34;headerlink&#34; title=&#34;线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）&#34;&gt;&lt;/a&gt;线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;CountDownLatch&#34;&gt;&lt;a href=&#34;#CountDownLatch&#34; class=&#34;headerlink&#34; title=&#34;CountDownLatch&#34;&gt;&lt;/a&gt;CountDownLatch&lt;/h4&gt;&lt;p&gt;CountDownLatch（闭锁&amp;#x2F;倒计时锁）用来进行线程同步协作，等待所有线程完成倒计时（一个或者多个线程，等待其他多个线程完成某件事情之后才能执行）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其中构造参数用来初始化等待计数值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;await() 用来等待计数归零&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;countDown() 用来让计数减一&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505223014946.png&#34; alt=&#34;image-20230505223014946&#34;&gt;&lt;/p&gt;
&lt;p&gt;案例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CountDownLatchDemo &amp;#123;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        //初始化了一个倒计时锁 参数为 3
        CountDownLatch latch = new CountDownLatch(3);

        new Thread(() -&amp;gt; &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;-begin...&amp;quot;);
            try &amp;#123;
                Thread.sleep(1000);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                throw new RuntimeException(e);
            &amp;#125;
            //count--
            latch.countDown();
            System.out.println(Thread.currentThread().getName()+&amp;quot;-end...&amp;quot; +latch.getCount());
        &amp;#125;).start();
        new Thread(() -&amp;gt; &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;-begin...&amp;quot;);
            try &amp;#123;
                Thread.sleep(2000);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                throw new RuntimeException(e);
            &amp;#125;
            //count--
            latch.countDown();
            System.out.println(Thread.currentThread().getName()+&amp;quot;-end...&amp;quot; +latch.getCount());
        &amp;#125;).start();
        new Thread(() -&amp;gt; &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;-begin...&amp;quot;);
            try &amp;#123;
                Thread.sleep(1500);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                throw new RuntimeException(e);
            &amp;#125;
            //count--
            latch.countDown();
            System.out.println(Thread.currentThread().getName()+&amp;quot;-end...&amp;quot; +latch.getCount());
        &amp;#125;).start();
        String name = Thread.currentThread().getName();
        System.out.println(name + &amp;quot;-waiting...&amp;quot;);
        //等待其他线程完成
        latch.await();
        System.out.println(name + &amp;quot;-wait end...&amp;quot;);
    &amp;#125;
    
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;案例一（es数据批量导入）&#34;&gt;&lt;a href=&#34;#案例一（es数据批量导入）&#34; class=&#34;headerlink&#34; title=&#34;案例一（es数据批量导入）&#34;&gt;&lt;/a&gt;案例一（es数据批量导入）&lt;/h4&gt;&lt;p&gt;在我们项目上线之前，我们需要把数据库中的数据一次性的同步到es索引库中，但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），当时我就想到可以使用线程池的方式导入，利用CountDownLatch来控制，就能避免一次性加载过多，防止内存溢出&lt;/p&gt;
&lt;p&gt;整体流程就是通过CountDownLatch+线程池配合去执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505223219951.png&#34; alt=&#34;image-20230505223219951&#34;&gt;&lt;/p&gt;
&lt;p&gt;详细实现流程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505223246059.png&#34; alt=&#34;image-20230505223246059&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详细实现代码，请查看当天代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;案例二（数据汇总）&#34;&gt;&lt;a href=&#34;#案例二（数据汇总）&#34; class=&#34;headerlink&#34; title=&#34;案例二（数据汇总）&#34;&gt;&lt;/a&gt;案例二（数据汇总）&lt;/h4&gt;&lt;p&gt;在一个电商网站中，用户下单之后，需要查询数据，数据包含了三部分：订单信息、包含的商品、物流信息；这三块信息都在不同的微服务中进行实现的，我们如何完成这个业务呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505223442924.png&#34; alt=&#34;image-20230505223442924&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详细实现代码，请查看当天代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在实际开发的过程中，难免需要调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用线程池+future来提升性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;报表汇总&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505223536657.png&#34; alt=&#34;image-20230505223536657&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;案例二（异步调用）&#34;&gt;&lt;a href=&#34;#案例二（异步调用）&#34; class=&#34;headerlink&#34; title=&#34;案例二（异步调用）&#34;&gt;&lt;/a&gt;案例二（异步调用）&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505223640038.png&#34; alt=&#34;image-20230505223640038&#34;&gt;&lt;/p&gt;
&lt;p&gt;在进行搜索的时候，需要保存用户的搜索记录，而搜索记录不能影响用户的正常搜索，我们通常会开启一个线程去执行历史记录的保存，在新开启的线程在执行的过程中，可以利用线程提交任务&lt;/p&gt;
&lt;h3 id=&#34;如何控制某个方法允许并发访问线程的数量？&#34;&gt;&lt;a href=&#34;#如何控制某个方法允许并发访问线程的数量？&#34; class=&#34;headerlink&#34; title=&#34;如何控制某个方法允许并发访问线程的数量？&#34;&gt;&lt;/a&gt;如何控制某个方法允许并发访问线程的数量？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Semaphore [ˈsɛməˌfɔr] 信号量，是JUC包下的一个工具类，我们可以通过其限制执行的线程数量，达到限流的效果&lt;/p&gt;
&lt;p&gt;当一个线程执行时先通过其方法进行获取许可操作，获取到许可的线程继续执行业务逻辑，当线程执行完成后进行释放许可操作，未获取达到许可的线程进行等待或者直接结束。&lt;/p&gt;
&lt;p&gt;Semaphore两个重要的方法&lt;/p&gt;
&lt;p&gt;lsemaphore.acquire()： 请求一个信号量，这时候的信号量个数-1（一旦没有可使用的信号量，也即信号量个数变为负数时，再次请求的时候就会阻塞，直到其他线程释放了信号量）&lt;/p&gt;
&lt;p&gt;lsemaphore.release()：释放一个信号量，此时信号量个数+1&lt;/p&gt;
&lt;p&gt;线程任务类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class SemaphoreCase &amp;#123;
    public static void main(String[] args) &amp;#123;
        // 1. 创建 semaphore 对象
        Semaphore semaphore = new Semaphore(3);
        // 2. 10个线程同时运行
        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            new Thread(() -&amp;gt; &amp;#123;

                try &amp;#123;
                    // 3. 获取许可
                    semaphore.acquire();
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
                try &amp;#123;
                    System.out.println(&amp;quot;running...&amp;quot;);
                    try &amp;#123;
                        Thread.sleep(1000);
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                    System.out.println(&amp;quot;end...&amp;quot;);
                &amp;#125; finally &amp;#123;
                    // 4. 释放许可
                    semaphore.release();
                &amp;#125;
            &amp;#125;).start();
        &amp;#125;
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;h3 id=&#34;谈谈你对ThreadLocal的理解&#34;&gt;&lt;a href=&#34;#谈谈你对ThreadLocal的理解&#34; class=&#34;headerlink&#34; title=&#34;谈谈你对ThreadLocal的理解&#34;&gt;&lt;/a&gt;谈谈你对ThreadLocal的理解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;概述-2&#34;&gt;&lt;a href=&#34;#概述-2&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;ThreadLocal是多线程中对于解决线程安全的一个操作类，它会为每个线程都分配一个独立的线程副本从而解决了变量并发访问冲突的问题。ThreadLocal 同时实现了线程内的资源共享&lt;/p&gt;
&lt;p&gt;案例：使用JDBC操作数据库时，会将每一个线程的Connection放入各自的ThreadLocal中，从而保证每个线程都在各自的 Connection 上进行数据库的操作，避免A线程关闭了B线程的连接。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224057228.png&#34; alt=&#34;image-20230505224057228&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ThreadLocal基本使用&#34;&gt;&lt;a href=&#34;#ThreadLocal基本使用&#34; class=&#34;headerlink&#34; title=&#34;ThreadLocal基本使用&#34;&gt;&lt;/a&gt;ThreadLocal基本使用&lt;/h4&gt;&lt;p&gt;三个主要方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;set(value) 设置值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;get() 获取值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;remove() 清除值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ThreadLocalTest &amp;#123;
    static ThreadLocal&amp;lt;String&amp;gt; threadLocal = new ThreadLocal&amp;lt;&amp;gt;();

    public static void main(String[] args) &amp;#123;
        new Thread(() -&amp;gt; &amp;#123;
            String name = Thread.currentThread().getName();
            threadLocal.set(&amp;quot;itcast&amp;quot;);
            print(name);
            System.out.println(name + &amp;quot;-after remove : &amp;quot; + threadLocal.get());
        &amp;#125;, &amp;quot;t1&amp;quot;).start();
        new Thread(() -&amp;gt; &amp;#123;
            String name = Thread.currentThread().getName();
            threadLocal.set(&amp;quot;itheima&amp;quot;);
            print(name);
            System.out.println(name + &amp;quot;-after remove : &amp;quot; + threadLocal.get());
        &amp;#125;, &amp;quot;t2&amp;quot;).start();
    &amp;#125;

    static void print(String str) &amp;#123;
        //打印当前线程中本地内存中本地变量的值
        System.out.println(str + &amp;quot; :&amp;quot; + threadLocal.get());
        //清除本地内存中的本地变量
        threadLocal.remove();
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ThreadLocal的实现原理-源码解析&#34;&gt;&lt;a href=&#34;#ThreadLocal的实现原理-源码解析&#34; class=&#34;headerlink&#34; title=&#34;ThreadLocal的实现原理&amp;amp;源码解析&#34;&gt;&lt;/a&gt;ThreadLocal的实现原理&amp;amp;源码解析&lt;/h4&gt;&lt;p&gt;ThreadLocal本质来说就是一个线程内部存储类，从而让多个线程只操作自己内部的值，从而实现线程数据隔离&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224341410.png&#34; alt=&#34;image-20230505224341410&#34;&gt;&lt;/p&gt;
&lt;p&gt;在ThreadLocal中有一个内部类叫做ThreadLocalMap，类似于HashMap&lt;/p&gt;
&lt;p&gt;ThreadLocalMap中有一个属性table数组，这个是真正存储数据的位置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;set方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224626253.png&#34; alt=&#34;image-20230505224626253&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get方法&amp;#x2F;remove方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224715087.png&#34; alt=&#34;image-20230505224715087&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ThreadLocal-内存泄露问题&#34;&gt;&lt;a href=&#34;#ThreadLocal-内存泄露问题&#34; class=&#34;headerlink&#34; title=&#34;ThreadLocal-内存泄露问题&#34;&gt;&lt;/a&gt;ThreadLocal-内存泄露问题&lt;/h4&gt;&lt;p&gt;Java对象中的四种引用类型：强引用、软引用、弱引用、虚引用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强引用：最为普通的引用方式，表示一个对象处于有用且必须的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224755797.png&#34; alt=&#34;image-20230505224755797&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弱引用：表示一个对象处于可能有用且非必须的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224812015.png&#34; alt=&#34;image-20230505224812015&#34;&gt;&lt;/p&gt;
&lt;p&gt;每一个Thread维护一个ThreadLocalMap，在ThreadLocalMap中的Entry对象继承了WeakReference。其中key为使用弱引用的ThreadLocal实例，value为线程变量的副本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230505224857538.png&#34; alt=&#34;image-20230505224857538&#34;&gt;&lt;/p&gt;
&lt;p&gt;在使用ThreadLocal的时候，强烈建议：&lt;strong&gt;务必手动remove&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看完此文章可以看&lt;a href=&#34;interview/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98&#34;&gt;多线程相关面试题&lt;/a&gt;测试一下自己掌握情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="java" scheme="https://anoxiahub.github.io/categories/java/" />
        <category term="Java基础" scheme="https://anoxiahub.github.io/tags/Java%E5%9F%BA%E7%A1%80/" />
        <updated>2023-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/java/JVM%E8%AF%A6%E8%A7%A3/</id>
        <title>JVM详解</title>
        <link rel="alternate" href="https://anoxiahub.github.io/java/JVM%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;JVM组成&#34;&gt;&lt;a href=&#34;#JVM组成&#34; class=&#34;headerlink&#34; title=&#34;JVM组成&#34;&gt;&lt;/a&gt;JVM组成&lt;/h2&gt;&lt;h3 id=&#34;JVM由那些部分组成，运行流程是什么？&#34;&gt;&lt;a href=&#34;#JVM由那些部分组成，运行流程是什么？&#34; class=&#34;headerlink&#34; title=&#34;JVM由那些部分组成，运行流程是什么？&#34;&gt;&lt;/a&gt;JVM由那些部分组成，运行流程是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;JVM是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java Virtual Machine Java程序的运行环境（java二进制字节码的运行环境）&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一次编写，到处运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动内存管理，垃圾回收机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506094254360.png&#34; alt=&#34;image-20230506094254360&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVM由哪些部分组成，运行流程是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506094411247.png&#34; alt=&#34;image-20230506094411247&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出 JVM 的主要组成部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClassLoader（类加载器）&lt;/li&gt;
&lt;li&gt;Runtime Data Area（运行时数据区，内存分区）&lt;/li&gt;
&lt;li&gt;Execution Engine（执行引擎）&lt;/li&gt;
&lt;li&gt;Native Method Library（本地库接口）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行流程：&lt;/p&gt;
&lt;p&gt;（1）类加载器（ClassLoader）把Java代码转换为字节码&lt;/p&gt;
&lt;p&gt;（2）运行时数据区（Runtime Data Area）把字节码加载到内存中，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是有执行引擎运行&lt;/p&gt;
&lt;p&gt;（3）执行引擎（Execution Engine）将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口（Native Method Library）来实现整个程序的功能。&lt;/p&gt;
&lt;h3 id=&#34;什么是程序计数器？&#34;&gt;&lt;a href=&#34;#什么是程序计数器？&#34; class=&#34;headerlink&#34; title=&#34;什么是程序计数器？&#34;&gt;&lt;/a&gt;什么是程序计数器？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序计数器：线程私有的，内部保存的字节码的行号。用于记录正在执行的字节码指令的地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;javap -verbose  xx.class    打印堆栈大小，局部变量的数量和方法的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506094602329.png&#34; alt=&#34;image-20230506094602329&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。&lt;/p&gt;
&lt;p&gt;​	那么现在有一个问题就是，当前处理器如何能够知道，对于这个被挂起的线程，它上一次执行到了哪里？那么这时就需要从程序计数器中来回去到当前的这个线程他上一次执行的行号，然后接着继续向下执行。&lt;/p&gt;
&lt;p&gt;​	程序计数器是JVM规范中唯一一个没有规定出现OOM的区域，所以这个空间也不会进行GC。&lt;/p&gt;
&lt;h3 id=&#34;你能给我详细的介绍Java堆吗&#34;&gt;&lt;a href=&#34;#你能给我详细的介绍Java堆吗&#34; class=&#34;headerlink&#34; title=&#34;你能给我详细的介绍Java堆吗?&#34;&gt;&lt;/a&gt;你能给我详细的介绍Java堆吗?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程共享的区域：主要用来保存对象实例，数组等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506094803545.png&#34; alt=&#34;image-20230506094803545&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;年轻代被划分为三部分，Eden区和两个大小严格相同的Survivor区，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到老年代区间。&lt;/li&gt;
&lt;li&gt;老年代主要保存生命周期长的对象，一般是一些老的对象&lt;/li&gt;
&lt;li&gt;元空间保存的类信息、静态变量、常量、编译后的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;p&gt;为了避免方法区出现OOM，所以在java8中将堆上的方法区【永久代】给移动到了本地内存上，重新开辟了一块空间，叫做&lt;strong&gt;元空间&lt;/strong&gt;。那么现在就可以避免掉OOM的出现了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506094938843.png&#34; alt=&#34;image-20230506094938843&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;元空间-MetaSpace-介绍&#34;&gt;&lt;a href=&#34;#元空间-MetaSpace-介绍&#34; class=&#34;headerlink&#34; title=&#34;元空间(MetaSpace)介绍&#34;&gt;&lt;/a&gt;元空间(MetaSpace)介绍&lt;/h3&gt;&lt;p&gt;​	在 HotSpot JVM 中，永久代（ ≈ 方法区）中用于存放类和方法的元数据以及常量池，比如Class 和 Method。每当一个类初次被加载的时候，它的元数据都会放到永久代中。&lt;/p&gt;
&lt;p&gt;​	永久代是有大小限制的，因此如果加载的类太多，很有可能导致永久代内存溢出，即OutOfMemoryError，为此不得不对虚拟机做调优。&lt;/p&gt;
&lt;p&gt;​	那么，Java 8 中 PermGen 为什么被移出 HotSpot JVM 了？&lt;/p&gt;
&lt;p&gt;官网给出了解释：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29wZW5qZGsuamF2YS5uZXQvamVwcy8xMjI=&#34;&gt;http://openjdk.java.net/jeps/122&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.

移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1）由于 PermGen 内存经常会溢出，引发OutOfMemoryError，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM。&lt;/p&gt;
&lt;p&gt;2）移除 PermGen 可以促进 HotSpot JVM 与 JRockit VM 的融合，因为 JRockit 没有永久代。&lt;/p&gt;
&lt;p&gt;​	准确来说，Perm 区中的字符串常量池被移到了堆内存中是在 Java7 之后，Java 8 时，PermGen 被元空间代替，其他内容比如&lt;strong&gt;类元信息、字段、静态属性、方法、常量&lt;/strong&gt;等都移动到元空间区。比如 java&amp;#x2F;lang&amp;#x2F;Object 类元信息、静态属性 System.out、整型常量等。&lt;/p&gt;
&lt;p&gt;​	元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。&lt;/p&gt;
&lt;h3 id=&#34;什么是虚拟机栈&#34;&gt;&lt;a href=&#34;#什么是虚拟机栈&#34; class=&#34;headerlink&#34; title=&#34;什么是虚拟机栈&#34;&gt;&lt;/a&gt;什么是虚拟机栈&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java Virtual machine Stacks (java 虚拟机栈)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个线程运行时所需要的内存，称为虚拟机栈，先进后出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个栈由多个栈帧（frame）组成，对应着每次方法调用时所占用的内存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506095140595.png&#34; alt=&#34;image-20230506095140595&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;垃圾回收是否涉及栈内存？&lt;/p&gt;
&lt;p&gt;垃圾回收主要指就是堆内存，当栈帧弹栈以后，内存就会释放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈内存分配越大越好吗？&lt;/p&gt;
&lt;p&gt;未必，默认的栈内存通常为1024k&lt;/p&gt;
&lt;p&gt;栈帧过大会导致线程数变少，例如，机器总内存为512m，目前能活动的线程数则为512个，如果把栈内存改为2048k，那么能活动的栈帧就会减半&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法内的局部变量是否线程安全？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果方法内局部变量没有逃离方法的作用范围，它是线程安全的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;比如以下代码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506095306061.png&#34; alt=&#34;image-20230506095306061&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;栈内存溢出情况&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈帧过多导致栈内存溢出，典型问题：递归调用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506095401637.png&#34; alt=&#34;image-20230506095401637&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈帧过大导致栈内存溢出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;组成部分：堆、方法区、栈、本地方法栈、程序计数器&lt;/p&gt;
&lt;p&gt;1、堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。&lt;br&gt;2、方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。&lt;br&gt;3、栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。&lt;br&gt;4、本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。&lt;br&gt;5、程序计数器（PC寄存器）程序计数器中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。&lt;/p&gt;
&lt;h3 id=&#34;能不能解释一下方法区？&#34;&gt;&lt;a href=&#34;#能不能解释一下方法区？&#34; class=&#34;headerlink&#34; title=&#34;能不能解释一下方法区？&#34;&gt;&lt;/a&gt;能不能解释一下方法区？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法区(Method Area)是各个线程共享的内存区域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要存储类的信息、运行时常量池&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟机启动的时候创建，关闭虚拟机时释放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果方法区域中的内存无法满足分配请求，则会抛出OutOfMemoryError: Metaspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506095504213.png&#34; alt=&#34;image-20230506095504213&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;常量池&#34;&gt;&lt;a href=&#34;#常量池&#34; class=&#34;headerlink&#34; title=&#34;常量池&#34;&gt;&lt;/a&gt;常量池&lt;/h4&gt;&lt;p&gt;可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息&lt;/p&gt;
&lt;p&gt;查看字节码结构（类的基本信息、常量池、方法定义）&lt;code&gt;javap -v xx.class&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;比如下面是一个Application类的main方法执行，源码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Application &amp;#123;
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;hello world&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到类对应的class文件存放目录，执行命令：&lt;code&gt;javap -v Application.class&lt;/code&gt;   查看字节码结构&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;D:\code\jvm-demo\target\classes\com\heima\jvm&amp;gt;javap -v Application.class
Classfile /D:/code/jvm-demo/target/classes/com/heima/jvm/Application.class
  Last modified 2023-05-07; size 564 bytes    //最后修改的时间
  MD5 checksum c1b64ed6491b9a16c2baab5061c64f88   //签名
  Compiled from &amp;quot;Application.java&amp;quot;   //从哪个源码编译
public class com.heima.jvm.Application   //包名，类名
  minor version: 0
  major version: 52     //jdk版本
  flags: ACC_PUBLIC, ACC_SUPER  //修饰符
Constant pool:   //常量池
   #1 = Methodref          #6.#20         // java/lang/Object.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
   #2 = Fieldref           #21.#22        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = String             #23            // hello world
   #4 = Methodref          #24.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = Class              #26            // com/heima/jvm/Application
   #6 = Class              #27            // java/lang/Object
   #7 = Utf8               &amp;lt;init&amp;gt;
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               Lcom/heima/jvm/Application;
  #14 = Utf8               main
  #15 = Utf8               ([Ljava/lang/String;)V
  #16 = Utf8               args
  #17 = Utf8               [Ljava/lang/String;
  #18 = Utf8               SourceFile
  #19 = Utf8               Application.java
  #20 = NameAndType        #7:#8          // &amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
  #21 = Class              #28            // java/lang/System
  #22 = NameAndType        #29:#30        // out:Ljava/io/PrintStream;
  #23 = Utf8               hello world
  #24 = Class              #31            // java/io/PrintStream
  #25 = NameAndType        #32:#33        // println:(Ljava/lang/String;)V
  #26 = Utf8               com/heima/jvm/Application
  #27 = Utf8               java/lang/Object
  #28 = Utf8               java/lang/System
  #29 = Utf8               out
  #30 = Utf8               Ljava/io/PrintStream;
  #31 = Utf8               java/io/PrintStream
  #32 = Utf8               println
  #33 = Utf8               (Ljava/lang/String;)V
&amp;#123;
  public com.heima.jvm.Application();  //构造方法
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:()V
         4: return
      LineNumberTable:
        line 3: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcom/heima/jvm/Application;

  public static void main(java.lang.String[]);  //main方法
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #3                  // String hello world
         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: return
      LineNumberTable:
        line 7: 0
        line 8: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  args   [Ljava/lang/String;
&amp;#125;
SourceFile: &amp;quot;Application.java&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下图，左侧是main方法的指令信息，右侧constant pool  是常量池&lt;/p&gt;
&lt;p&gt;main方法按照指令执行的时候，需要到常量池中查表翻译找到具体的类和方法地址去执行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506095634842.png&#34; alt=&#34;image-20230506095634842&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;运行时常量池&#34;&gt;&lt;a href=&#34;#运行时常量池&#34; class=&#34;headerlink&#34; title=&#34;运行时常量池&#34;&gt;&lt;/a&gt;运行时常量池&lt;/h4&gt;&lt;p&gt;常量池是 *.class 文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506100142724.png&#34; alt=&#34;image-20230506100142724&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;你听过直接内存吗？&#34;&gt;&lt;a href=&#34;#你听过直接内存吗？&#34; class=&#34;headerlink&#34; title=&#34;你听过直接内存吗？&#34;&gt;&lt;/a&gt;你听过直接内存吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不受 JVM 内存回收管理，是虚拟机的系统内存，常见于 NIO 操作时，用于数据缓冲区，分配回收成本较高，但读写性能高，不受 JVM 内存回收管理&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;需求，在本地电脑中的一个较大的文件（超过100m）从一个磁盘挪到另外一个磁盘&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506100501905.png&#34; alt=&#34;image-20230506100501905&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 演示 ByteBuffer 作用
 */
public class Demo1_9 &amp;#123;
    static final String FROM = &amp;quot;E:\\编程资料\\第三方教学视频\\youtube\\Getting Started with Spring Boot-sbPSjI4tt10.mp4&amp;quot;;
    static final String TO = &amp;quot;E:\\a.mp4&amp;quot;;
    static final int _1Mb = 1024 * 1024;

    public static void main(String[] args) &amp;#123;
        io(); // io 用时：1535.586957 1766.963399 1359.240226
        directBuffer(); // directBuffer 用时：479.295165 702.291454 562.56592
    &amp;#125;

    private static void directBuffer() &amp;#123;
        long start = System.nanoTime();
        try (FileChannel from = new FileInputStream(FROM).getChannel();
             FileChannel to = new FileOutputStream(TO).getChannel();
        ) &amp;#123;
            ByteBuffer bb = ByteBuffer.allocateDirect(_1Mb);
            while (true) &amp;#123;
                int len = from.read(bb);
                if (len == -1) &amp;#123;
                    break;
                &amp;#125;
                bb.flip();
                to.write(bb);
                bb.clear();
            &amp;#125;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        long end = System.nanoTime();
        System.out.println(&amp;quot;directBuffer 用时：&amp;quot; + (end - start) / 1000_000.0);
    &amp;#125;

    private static void io() &amp;#123;
        long start = System.nanoTime();
        try (FileInputStream from = new FileInputStream(FROM);
             FileOutputStream to = new FileOutputStream(TO);
        ) &amp;#123;
            byte[] buf = new byte[_1Mb];
            while (true) &amp;#123;
                int len = from.read(buf);
                if (len == -1) &amp;#123;
                    break;
                &amp;#125;
                to.write(buf, 0, len);
            &amp;#125;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        long end = System.nanoTime();
        System.out.println(&amp;quot;io 用时：&amp;quot; + (end - start) / 1000_000.0);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以发现，使用传统的IO的时间要比NIO操作的时间长了很多了，也就说NIO的读性能更好。&lt;/p&gt;
&lt;p&gt;这个是跟我们的JVM的直接内存是有一定关系，如下图，是传统阻塞IO的数据传输流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506100548455.png&#34; alt=&#34;image-20230506100548455&#34;&gt;&lt;/p&gt;
&lt;p&gt;下图是NIO传输数据的流程，在这个里面主要使用到了一个直接内存，不需要在堆中开辟空间进行数据的拷贝，jvm可以直接操作直接内存，从而使数据读写传输更快。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506100621146.png&#34; alt=&#34;image-20230506100621146&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;堆栈的区别是什么？&#34;&gt;&lt;a href=&#34;#堆栈的区别是什么？&#34; class=&#34;headerlink&#34; title=&#34;堆栈的区别是什么？&#34;&gt;&lt;/a&gt;堆栈的区别是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的的。堆会GC垃圾回收，而栈不会。&lt;/p&gt;
&lt;p&gt;2、栈内存是线程私有的，而堆内存是线程共有的。&lt;/p&gt;
&lt;p&gt;3,、两者异常错误不同，但如果栈内存或者堆内存不足都会抛出异常。&lt;/p&gt;
&lt;p&gt;栈空间不足：java.lang.StackOverFlowError。&lt;/p&gt;
&lt;p&gt;堆空间不足：java.lang.OutOfMemoryError。&lt;/p&gt;
&lt;h2 id=&#34;类加载器&#34;&gt;&lt;a href=&#34;#类加载器&#34; class=&#34;headerlink&#34; title=&#34;类加载器&#34;&gt;&lt;/a&gt;类加载器&lt;/h2&gt;&lt;h3 id=&#34;什么是类加载器，类加载器有哪些&#34;&gt;&lt;a href=&#34;#什么是类加载器，类加载器有哪些&#34; class=&#34;headerlink&#34; title=&#34;什么是类加载器，类加载器有哪些?&#34;&gt;&lt;/a&gt;什么是类加载器，类加载器有哪些?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要想理解类加载器的话，务必要先清楚对于一个Java文件，它从编译到执行的整个过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220903233627146.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类加载器：用于装载字节码文件(.class文件)&lt;/li&gt;
&lt;li&gt;运行时数据区：用于分配存储空间&lt;/li&gt;
&lt;li&gt;执行引擎：执行字节码文件或本地方法&lt;/li&gt;
&lt;li&gt;垃圾回收器：用于对JVM中的垃圾内容进行回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;类加载器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将&lt;strong&gt;字节码文件加载到JVM中&lt;/strong&gt;，从而让Java程序能够启动起来。现有的类加载器基本上都是java.lang.ClassLoader的子类，该类的只要职责就是用于将指定的类找到或生成对应的字节码文件，同时类加载器还会负责加载程序所需要的资源&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类加载器种类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类加载器根据各自加载范围的不同，划分为四种类加载器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;启动类加载器(BootStrap ClassLoader)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类并不继承ClassLoader类，其是由C++编写实现。用于加载&lt;strong&gt;JAVA_HOME&amp;#x2F;jre&amp;#x2F;lib&lt;/strong&gt;目录下的类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;扩展类加载器(ExtClassLoader)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类是ClassLoader的子类，主要加载&lt;strong&gt;JAVA_HOME&amp;#x2F;jre&amp;#x2F;lib&amp;#x2F;ext&lt;/strong&gt;目录中的类库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;应用类加载器(AppClassLoader)：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该类是ClassLoader的子类，主要用于加载&lt;strong&gt;classPath&lt;/strong&gt;下的类，也就是加载开发者自己编写的Java类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;自定义类加载器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发者自定义类继承ClassLoader，实现自定义类加载规则。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述三种类加载器的层次结构如下如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506100746624.png&#34; alt=&#34;image-20230506100746624&#34;&gt;&lt;/p&gt;
&lt;p&gt;类加载器的体系并不是“继承”体系，而是&lt;strong&gt;委派体系&lt;/strong&gt;，类加载器首先会到自己的parent中查找类或者资源，如果找不到才会到自己本地查找。类加载器的委托行为动机是为了避免相同的类被加载多次。&lt;/p&gt;
&lt;h3 id=&#34;什么是双亲委派模型？&#34;&gt;&lt;a href=&#34;#什么是双亲委派模型？&#34; class=&#34;headerlink&#34; title=&#34;什么是双亲委派模型？&#34;&gt;&lt;/a&gt;什么是双亲委派模型？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就返回成功；只有父类加载器无法完成此加载任务时，才由下一级去加载。 &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506100920042.png&#34; alt=&#34;image-20230506100920042&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;JVM为什么采用双亲委派机制&#34;&gt;&lt;a href=&#34;#JVM为什么采用双亲委派机制&#34; class=&#34;headerlink&#34; title=&#34;JVM为什么采用双亲委派机制&#34;&gt;&lt;/a&gt;JVM为什么采用双亲委派机制&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（1）通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。&lt;/p&gt;
&lt;p&gt;（2）为了安全，保证类库API不会被修改&lt;/p&gt;
&lt;p&gt;在工程中新建java.lang包，接着在该包下新建String类，并定义main函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class String &amp;#123;

    public static void main(String[] args) &amp;#123;

        System.out.println(&amp;quot;demo info&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	此时执行main函数，会出现异常，在类 java.lang.String 中找不到 main 方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220903144547378.png&#34; alt=&#34;image-20220903144547378&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	出现该信息是因为由双亲委派的机制，java.lang.String的在启动类加载器(Bootstrap classLoader)得到加载，因为在核心jre库中有其相同名字的类文件，但该类中并没有main方法。这样就能防止恶意篡改核心API库。&lt;/p&gt;
&lt;h3 id=&#34;说一下类装载的执行过程？&#34;&gt;&lt;a href=&#34;#说一下类装载的执行过程？&#34; class=&#34;headerlink&#34; title=&#34;说一下类装载的执行过程？&#34;&gt;&lt;/a&gt;说一下类装载的执行过程？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101032605.png&#34; alt=&#34;image-20230506101032605&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类加载过程详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.加载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101115674.png&#34; alt=&#34;image-20230506101115674&#34;&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过类的全名，获取类的二进制数据流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解析类的二进制数据流为方法区内的数据结构（Java类模型） &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建java.lang.Class类的实例，表示该类型。作为方法区这个类的各种数据的访问入口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101213373.png&#34; alt=&#34;image-20230506101213373&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.验证&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101420202.png&#34; alt=&#34;image-20230506101420202&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;验证类是否符合JVM规范，安全性检查&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)文件格式验证:是否符合Class文件的规范&lt;br&gt;(2)元数据验证&lt;br&gt;    这个类是否有父类（除了Object这个类之外，其余的类都应该有父类）&lt;br&gt;    这个类是否继承（extends）了被final修饰过的类（被final修饰过的类表示类不能被继承）&lt;br&gt;    类中的字段、方法是否与父类产生矛盾。（被final修饰过的方法或字段是不能覆盖的）						&lt;br&gt;(3)字节码验证&lt;br&gt;    主要的目的是通过对数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。&lt;br&gt;(4)符号引用验证：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如：int i &amp;#x3D; 3;&lt;br&gt;字面量：3&lt;br&gt;符号引用：i&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.准备&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101445898.png&#34; alt=&#34;image-20230506101445898&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为类变量分配内存并设置类变量初始值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;static变量，分配空间在准备阶段完成（设置默认值），赋值在初始化阶段完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static变量是final的基本类型，以及字符串常量，值已确定，赋值在准备阶段完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static变量是final的引用类型，那么赋值也会在初始化阶段完成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101824622.png&#34; alt=&#34;image-20230506101824622&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.解析&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101504632.png&#34; alt=&#34;image-20230506101504632&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把类中的符号引用转换为直接引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：方法中调用了其他方法，方法名可以理解为符号引用，而直接引用就是使用指针直接指向方法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506102311951.png&#34; alt=&#34;image-20230506102311951&#34;&gt;&lt;/p&gt;
&lt;p&gt;5.初始化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101625087.png&#34; alt=&#34;image-20230506101625087&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对类的静态变量，静态代码块执行初始化操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.使用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506101641837.png&#34; alt=&#34;image-20230506101641837&#34;&gt;&lt;/p&gt;
&lt;p&gt;JVM 开始从入口方法开始执行用户的程序代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用静态类成员信息（比如：静态字段、静态方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用new关键字为其创建对象实例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7.卸载&lt;/p&gt;
&lt;p&gt;当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存&lt;/p&gt;
&lt;h2 id=&#34;垃圾收回&#34;&gt;&lt;a href=&#34;#垃圾收回&#34; class=&#34;headerlink&#34; title=&#34;垃圾收回&#34;&gt;&lt;/a&gt;垃圾收回&lt;/h2&gt;&lt;h3 id=&#34;简述Java垃圾回收机制？（GC是什么？为什么要GC）&#34;&gt;&lt;a href=&#34;#简述Java垃圾回收机制？（GC是什么？为什么要GC）&#34; class=&#34;headerlink&#34; title=&#34;简述Java垃圾回收机制？（GC是什么？为什么要GC）&#34;&gt;&lt;/a&gt;简述Java垃圾回收机制？（GC是什么？为什么要GC）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC(Garbage Collection)。&lt;/p&gt;
&lt;p&gt;有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。&lt;/p&gt;
&lt;p&gt;在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机&lt;/p&gt;
&lt;p&gt;换句话说，自动的垃圾回收的算法就会变得非常重要了，如果因为算法的不合理，导致内存资源一直没有释放，同样也可能会导致内存溢出的。&lt;/p&gt;
&lt;p&gt;当然，除了Java语言，C#、Python等语言也都有自动的垃圾回收机制。&lt;/p&gt;
&lt;h3 id=&#34;对象什么时候可以被垃圾器回收&#34;&gt;&lt;a href=&#34;#对象什么时候可以被垃圾器回收&#34; class=&#34;headerlink&#34; title=&#34;对象什么时候可以被垃圾器回收&#34;&gt;&lt;/a&gt;对象什么时候可以被垃圾器回收&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506104954777.png&#34; alt=&#34;image-20230506104954777&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单一句就是：如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。&lt;/p&gt;
&lt;p&gt;如果要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法&lt;/p&gt;
&lt;h4 id=&#34;引用计数法&#34;&gt;&lt;a href=&#34;#引用计数法&#34; class=&#34;headerlink&#34; title=&#34;引用计数法&#34;&gt;&lt;/a&gt;引用计数法&lt;/h4&gt;&lt;p&gt;一个对象被引用了一次，在当前的对象头上递增一次引用次数，如果这个对象的引用次数为0，代表这个对象可回收&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;String demo = new String(&amp;quot;123&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111102825.png&#34; alt=&#34;image-20230506111102825&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;String demo = null;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111136231.png&#34; alt=&#34;image-20230506111136231&#34;&gt;&lt;/p&gt;
&lt;p&gt;当对象间出现了循环引用的话，则引用计数法就会失效&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111255401.png&#34; alt=&#34;image-20230506111255401&#34;&gt;&lt;/p&gt;
&lt;p&gt;先执行右侧代码的前4行代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111327590.png&#34; alt=&#34;image-20230506111327590&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前上方的引用关系和计数都是没问题的，但是，如果代码继续往下执行，如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111512450.png&#34; alt=&#34;image-20230506111512450&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然a和b都为null，但是由于a和b存在循环引用，这样a和b永远都不会被回收。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。&lt;/li&gt;
&lt;li&gt;在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报OOM错误。&lt;/li&gt;
&lt;li&gt;区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次对象被引用时，都需要去更新计数器，有一点时间开销。 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浪费CPU资源&lt;/strong&gt;，即使内存够用，仍然在运行时进行计数器的统计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无法解决循环引用问题，会引发内存泄露&lt;/strong&gt;。（最大的缺点）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可达性分析算法&#34;&gt;&lt;a href=&#34;#可达性分析算法&#34; class=&#34;headerlink&#34; title=&#34;可达性分析算法&#34;&gt;&lt;/a&gt;可达性分析算法&lt;/h4&gt;&lt;p&gt;​	现在的虚拟机采用的都是通过可达性分析算法来确定哪些内容是垃圾。&lt;/p&gt;
&lt;p&gt;​	会存在一个根节点【GC Roots】，引出它下面指向的下一个节点，再以下一个节点节点开始找出它下面的节点，依次往下类推。直到所有的节点全部遍历完毕。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根对象是那些肯定不能当做垃圾回收的对象，就可以当做根对象&lt;/p&gt;
&lt;p&gt;局部变量，静态方法，静态变量，类信息&lt;/p&gt;
&lt;p&gt;核心是：判断某对象是否与根对象有直接或间接的引用，如果没有被引用，则可以当做垃圾回收&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904010634153.png&#34; alt=&#34;image-20220904010634153&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	X,Y这两个节点是可回收的，但是&lt;strong&gt;并不会马上的被回收！！&lt;/strong&gt; 对象中存在一个方法【finalize】。当对象被标记为可回收后，当发生GC时，首先&lt;strong&gt;会判断这个对象是否执行了finalize方法&lt;/strong&gt;，如果这个方法还没有被执行的话，那么就会先来执行这个方法，接着在这个方法执行中，可以设置当前这个对象与GC ROOTS产生关联，那么这个方法执行完成之后，GC会再次判断对象是否可达，如果仍然不可达，则会进行回收，如果可达了，则不会进行回收。&lt;/p&gt;
&lt;p&gt;​	finalize方法对于每一个对象来说，只会执行一次。如果第一次执行这个方法的时候，设置了当前对象与RC ROOTS关联，那么这一次不会进行回收。 那么等到这个对象第二次被标记为可回收时，那么该对象的finalize方法就不会再次执行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GC ROOTS：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机栈（栈帧中的本地变量表）中引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * demo是栈帧中的本地变量，当 demo = null 时，由于此时 demo 充当了 GC Root 的作用，demo与原来指向的实例 new Demo() 断开了连接，对象被回收。
 */
public class Demo &amp;#123;
    public static  void main(String[] args) &amp;#123;
        Demo demo = new Demo();
        demo = null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方法区中类静态属性引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 当栈帧中的本地变量 b = null 时，由于 b 原来指向的对象与 GC Root (变量 b) 断开了连接，所以 b 原来指向的对象会被回收，而由于我们给 a 赋值了变量的引用，a在此时是类静态属性引用，充当了 GC Root 的作用，它指向的对象依然存活!
 */
public class Demo &amp;#123;
    public static Demo a;
    public static  void main(String[] args) &amp;#123;
        Demo b = new Demo();
        b.a = new Demo();
        b = null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方法区中常量引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 常量 a 指向的对象并不会因为 demo 指向的对象被回收而回收
 */
public class Demo &amp;#123;
    
    public static final Demo a = new Demo();
    
    public static  void main(String[] args) &amp;#123;
        Demo demo = new Demo();
        demo = null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;本地方法栈中 JNI（即一般说的 Native 方法）引用的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;JVM-垃圾回收算法有哪些？&#34;&gt;&lt;a href=&#34;#JVM-垃圾回收算法有哪些？&#34; class=&#34;headerlink&#34; title=&#34;JVM 垃圾回收算法有哪些？&#34;&gt;&lt;/a&gt;JVM 垃圾回收算法有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;标记清除算法&#34;&gt;&lt;a href=&#34;#标记清除算法&#34; class=&#34;headerlink&#34; title=&#34;标记清除算法&#34;&gt;&lt;/a&gt;标记清除算法&lt;/h4&gt;&lt;p&gt;标记清除算法，是将垃圾回收分为2个阶段，分别是&lt;strong&gt;标记和清除&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1.根据可达性分析算法得出的垃圾进行标记&lt;/p&gt;
&lt;p&gt;2.对这些标记为可回收的内容进行垃圾回收&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506112047190.png&#34; alt=&#34;image-20230506112047190&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。&lt;/p&gt;
&lt;p&gt;同样，标记清除算法也是有缺点的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效率较低，&lt;strong&gt;标记和清除两个动作都需要遍历所有的对象&lt;/strong&gt;，并且在GC时，&lt;strong&gt;需要停止应用程序&lt;/strong&gt;，对于交互性要求比较高的应用而言这个体验是非常差的。&lt;/li&gt;
&lt;li&gt;（&lt;strong&gt;重要&lt;/strong&gt;）通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复制算法&#34;&gt;&lt;a href=&#34;#复制算法&#34; class=&#34;headerlink&#34; title=&#34;复制算法&#34;&gt;&lt;/a&gt;复制算法&lt;/h4&gt;&lt;p&gt;​	复制算法的核心就是，&lt;strong&gt;将原有的内存空间一分为二，每次只用其中的一块&lt;/strong&gt;，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。&lt;/p&gt;
&lt;p&gt;​	如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。 &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111919008.png&#34; alt=&#34;image-20230506111919008&#34;&gt;&lt;/p&gt;
&lt;p&gt;1）将内存区域分成两部分，每次操作其中一个。&lt;/p&gt;
&lt;p&gt;2）当进行垃圾回收时，将正在使用的内存区域中的存活对象移动到未使用的内存区域。当移动完对这部分内存区域一次性清除。&lt;/p&gt;
&lt;p&gt;3）周而复始。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在垃圾对象多的情况下，效率较高&lt;/li&gt;
&lt;li&gt;清理后，内存无碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;标记整理算法&#34;&gt;&lt;a href=&#34;#标记整理算法&#34; class=&#34;headerlink&#34; title=&#34;标记整理算法&#34;&gt;&lt;/a&gt;标记整理算法&lt;/h4&gt;&lt;p&gt;​	标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。和标记清除算法一样，也是从根节点开始，对对象的引用进行标记，在清理阶段，并不是简单的直接清理可回收对象，而是将存活对象都向内存另一端移动，然后清理边界以外的垃圾，从而解决了碎片化的问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506111957793.png&#34; alt=&#34;image-20230506111957793&#34;&gt;&lt;/p&gt;
&lt;p&gt;1）标记垃圾。&lt;/p&gt;
&lt;p&gt;2）需要清除向右边走，不需要清除的向左边走。&lt;/p&gt;
&lt;p&gt;3）清除边界以外的垃圾。&lt;/p&gt;
&lt;p&gt;优缺点同标记清除算法，解决了标记清除算法的碎片化的问题，同时，标记压缩算法多了一步，对象移动内存位置的步骤，其效率也有有一定的影响。&lt;/p&gt;
&lt;p&gt;与复制算法对比：复制算法标记完就复制，但标记整理算法得等把所有存活对象都标记完毕，再进行整理&lt;/p&gt;
&lt;h3 id=&#34;分代收集算法&#34;&gt;&lt;a href=&#34;#分代收集算法&#34; class=&#34;headerlink&#34; title=&#34;分代收集算法&#34;&gt;&lt;/a&gt;分代收集算法&lt;/h3&gt;&lt;h4 id=&#34;概述-1&#34;&gt;&lt;a href=&#34;#概述-1&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;在java8时，堆被分为了两份：&lt;strong&gt;新生代和老年代【1：2】&lt;/strong&gt;，在java7时，还存在一个永久代。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131229649.png&#34; alt=&#34;image-20230506131229649&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区【8：1：1】&lt;/p&gt;
&lt;p&gt;当对新生代产生GC：MinorGC【young GC】&lt;/p&gt;
&lt;p&gt;当对老年代代产生GC：Major GC &lt;/p&gt;
&lt;p&gt;当对新生代和老年代产生FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长，&lt;strong&gt;应尽力避免&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;作机制&#34;&gt;&lt;a href=&#34;#作机制&#34; class=&#34;headerlink&#34; title=&#34;作机制&#34;&gt;&lt;/a&gt;作机制&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131308654.png&#34; alt=&#34;image-20230506131308654&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新创建的对象，都会先分配到eden区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131415418.png&#34; alt=&#34;image-20230506131415418&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当伊甸园内存不足，标记伊甸园与 from（现阶段没有）的存活对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将存活对象采用复制算法复制到 to 中，复制完毕后，伊甸园和 from 内存都得到释放&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131442503.png&#34; alt=&#34;image-20230506131442503&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经过一段时间后伊甸园的内存又出现不足，标记eden区域to区存活的对象，将存活的对象复制到from区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131544447.png&#34; alt=&#34;image-20230506131544447&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131607645.png&#34; alt=&#34;image-20230506131607645&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当幸存区对象熬过几次回收（最多15次），晋升到老年代（幸存区内存不足或大对象会导致提前晋升）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MinorGC、 Mixed GC 、 FullGC的区别是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506131640893.png&#34; alt=&#34;image-20230506131640893&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MinorGC【young GC】发生在新生代的垃圾回收，暂停时间短（STW）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长（STW），应尽力避免？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;名词解释：&lt;/p&gt;
&lt;p&gt;STW（Stop-The-World）：暂停所有应用程序线程，等待垃圾回收的完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;说一下-JVM-有哪些垃圾回收器？&#34;&gt;&lt;a href=&#34;#说一下-JVM-有哪些垃圾回收器？&#34; class=&#34;headerlink&#34; title=&#34;说一下 JVM 有哪些垃圾回收器？&#34;&gt;&lt;/a&gt;说一下 JVM 有哪些垃圾回收器？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在jvm中，实现了多种垃圾收集器，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;串行垃圾收集器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并行垃圾收集器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CMS（并发）垃圾收集器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;G1垃圾收集器&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;串行垃圾收集器&#34;&gt;&lt;a href=&#34;#串行垃圾收集器&#34; class=&#34;headerlink&#34; title=&#34;串行垃圾收集器&#34;&gt;&lt;/a&gt;串行垃圾收集器&lt;/h4&gt;&lt;p&gt;Serial和Serial Old串行垃圾收集器，是指使用单线程进行垃圾回收，堆内存较小，适合个人电脑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Serial 作用于新生代，采用复制算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Serial Old 作用于老年代，采用标记-整理算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154006266.png&#34; alt=&#34;image-20230506154006266&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;并行垃圾收集器&#34;&gt;&lt;a href=&#34;#并行垃圾收集器&#34; class=&#34;headerlink&#34; title=&#34;并行垃圾收集器&#34;&gt;&lt;/a&gt;并行垃圾收集器&lt;/h4&gt;&lt;p&gt;Parallel New和Parallel Old是一个并行垃圾回收器，&lt;strong&gt;JDK8默认使用此垃圾回收器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parallel New作用于新生代，采用复制算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parallel Old作用于老年代，采用标记-整理算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;垃圾回收时，多个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154042673.png&#34; alt=&#34;image-20230506154042673&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;CMS（并发）垃圾收集器&#34;&gt;&lt;a href=&#34;#CMS（并发）垃圾收集器&#34; class=&#34;headerlink&#34; title=&#34;CMS（并发）垃圾收集器&#34;&gt;&lt;/a&gt;CMS（并发）垃圾收集器&lt;/h4&gt;&lt;p&gt;CMS全称 Concurrent Mark Sweep，是一款并发的、使用标记-清除算法的垃圾回收器，该回收器是针对老年代垃圾回收的，是一款以获取最短回收停顿时间为目标的收集器，停顿时间短，用户体验就好。其最大特点是在进行垃圾回收时，应用仍然能正常运行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154117857.png&#34; alt=&#34;image-20230506154117857&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154107944.png&#34; alt=&#34;image-20230506154107944&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;详细聊一下G1垃圾回收器&#34;&gt;&lt;a href=&#34;#详细聊一下G1垃圾回收器&#34; class=&#34;headerlink&#34; title=&#34;详细聊一下G1垃圾回收器&#34;&gt;&lt;/a&gt;详细聊一下G1垃圾回收器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;概述-2&#34;&gt;&lt;a href=&#34;#概述-2&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;应用于新生代和老年代，&lt;strong&gt;在&lt;strong&gt;&lt;strong&gt;JDK9&lt;/strong&gt;&lt;/strong&gt;之后默认使用****G1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;采用复制算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;响应时间与吞吐量兼顾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分成三个阶段：新生代回收、并发标记、混合收集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154323950.png&#34; alt=&#34;image-20230506154323950&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Young-Collection-年轻代垃圾回收&#34;&gt;&lt;a href=&#34;#Young-Collection-年轻代垃圾回收&#34; class=&#34;headerlink&#34; title=&#34;Young Collection(年轻代垃圾回收)&#34;&gt;&lt;/a&gt;Young Collection(年轻代垃圾回收)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始时，所有区域都处于空闲状态&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154542687.png&#34; alt=&#34;image-20230506154542687&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建了一些对象，挑出一些空闲区域作为伊甸园区存储这些对象&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154607558.png&#34; alt=&#34;image-20230506154607558&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154633118.png&#34; alt=&#34;image-20230506154633118&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154705088.png&#34; alt=&#34;image-20230506154705088&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随着时间流逝，伊甸园的内存又有不足&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154759809.png&#34; alt=&#34;image-20230506154759809&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154826981.png&#34; alt=&#34;image-20230506154826981&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506154859985.png&#34; alt=&#34;image-20230506154859985&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Young-Collection-Concurrent-Mark-年轻代垃圾回收-并发标记&#34;&gt;&lt;a href=&#34;#Young-Collection-Concurrent-Mark-年轻代垃圾回收-并发标记&#34; class=&#34;headerlink&#34; title=&#34;Young Collection + Concurrent Mark (年轻代垃圾回收+并发标记)&#34;&gt;&lt;/a&gt;Young Collection + Concurrent Mark (年轻代垃圾回收+并发标记)&lt;/h4&gt;&lt;p&gt;当老年代占用内存超过阈值(默认是45%)后，触发并发标记，这时无需暂停用户线程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155000503.png&#34; alt=&#34;image-20230506155000503&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据暂停时间目标优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155047765.png&#34; alt=&#34;image-20230506155047765&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Mixed-Collection-混合垃圾回收&#34;&gt;&lt;a href=&#34;#Mixed-Collection-混合垃圾回收&#34; class=&#34;headerlink&#34; title=&#34;Mixed Collection (混合垃圾回收)&#34;&gt;&lt;/a&gt;Mixed Collection (混合垃圾回收)&lt;/h4&gt;&lt;p&gt;复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155116267.png&#34; alt=&#34;image-20230506155116267&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中H叫做巨型对象，如果对象非常大，会开辟一块连续的空间存储巨型对象&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155146370.png&#34; alt=&#34;image-20230506155146370&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;强引用、软引用、弱引用、虚引用的区别？&#34;&gt;&lt;a href=&#34;#强引用、软引用、弱引用、虚引用的区别？&#34; class=&#34;headerlink&#34; title=&#34;强引用、软引用、弱引用、虚引用的区别？&#34;&gt;&lt;/a&gt;强引用、软引用、弱引用、虚引用的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;强引用&#34;&gt;&lt;a href=&#34;#强引用&#34; class=&#34;headerlink&#34; title=&#34;强引用&#34;&gt;&lt;/a&gt;强引用&lt;/h4&gt;&lt;p&gt;强引用：只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;User user = new User();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155341703.png&#34; alt=&#34;image-20230506155341703&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;软引用&#34;&gt;&lt;a href=&#34;#软引用&#34; class=&#34;headerlink&#34; title=&#34;软引用&#34;&gt;&lt;/a&gt;软引用&lt;/h4&gt;&lt;p&gt;软引用：仅有软引用引用该对象时，在垃圾回收后，内存仍不足时会再次出发垃圾回收&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;User user = new User();
SoftReference softReference = new SoftReference(user);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155416293.png&#34; alt=&#34;image-20230506155416293&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;弱引用&#34;&gt;&lt;a href=&#34;#弱引用&#34; class=&#34;headerlink&#34; title=&#34;弱引用&#34;&gt;&lt;/a&gt;弱引用&lt;/h4&gt;&lt;p&gt;弱引用：仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;User user = new User();
WeakReference weakReference = new WeakReference(user);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155501557.png&#34; alt=&#34;image-20230506155501557&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;延伸话题：ThreadLocal内存泄漏问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ThreadLocal用的就是弱引用，看以下源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;static class Entry extends WeakReference&amp;lt;ThreadLocal&amp;lt;?&amp;gt;&amp;gt; &amp;#123;
    Object value;

    Entry(ThreadLocal&amp;lt;?&amp;gt; k, Object v) &amp;#123;
         super(k);
         value = v; //强引用，不会被回收
     &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Entry&lt;/code&gt;的key是当前ThreadLocal，value值是我们要设置的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WeakReference&lt;/code&gt;表示的是弱引用，当JVM进行GC时，一旦发现了只具有弱引用的对象，不管当前内存空间是否足够，都会回收它的内存。但是&lt;code&gt;value&lt;/code&gt;是强引用，它不会被回收掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThreadLocal使用建议：使用完毕后注意调用清理方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;虚引用&#34;&gt;&lt;a href=&#34;#虚引用&#34; class=&#34;headerlink&#34; title=&#34;虚引用&#34;&gt;&lt;/a&gt;虚引用&lt;/h4&gt;&lt;p&gt;虚引用：必须配合引用队列使用，被引用对象回收时，会将虚引用入队，由 Reference Handler 线程调用虚引用相关方法释放直接内存&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155518510.png&#34; alt=&#34;image-20230506155518510&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155552693.png&#34; alt=&#34;image-20230506155552693&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;JVM实践（调优）&#34;&gt;&lt;a href=&#34;#JVM实践（调优）&#34; class=&#34;headerlink&#34; title=&#34;JVM实践（调优）&#34;&gt;&lt;/a&gt;JVM实践（调优）&lt;/h2&gt;&lt;h3 id=&#34;JVM-调优的参数可以在哪里设置参数值？&#34;&gt;&lt;a href=&#34;#JVM-调优的参数可以在哪里设置参数值？&#34; class=&#34;headerlink&#34; title=&#34;JVM 调优的参数可以在哪里设置参数值？&#34;&gt;&lt;/a&gt;JVM 调优的参数可以在哪里设置参数值？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;tomcat的设置vm参数&#34;&gt;&lt;a href=&#34;#tomcat的设置vm参数&#34; class=&#34;headerlink&#34; title=&#34;tomcat的设置vm参数&#34;&gt;&lt;/a&gt;tomcat的设置vm参数&lt;/h4&gt;&lt;p&gt;修改TOMCAT_HOME&amp;#x2F;bin&amp;#x2F;catalina.sh文件，如下图&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JAVA_OPTS=&amp;quot;-Xms512m -Xmx1024m&amp;quot; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904151948778.png&#34; alt=&#34;image-20220904151948778&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;springboot项目jar文件启动&#34;&gt;&lt;a href=&#34;#springboot项目jar文件启动&#34; class=&#34;headerlink&#34; title=&#34;springboot项目jar文件启动&#34;&gt;&lt;/a&gt;springboot项目jar文件启动&lt;/h4&gt;&lt;p&gt;通常在linux系统下直接加参数启动springboot项目&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;nohup java -Xms512m -Xmx1024m -jar xxxx.jar --spring.profiles.active=prod &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;nohup  :  用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行&lt;/p&gt;
&lt;p&gt;参数 &lt;strong&gt;&amp;amp;&lt;/strong&gt;  ：让命令在后台执行，终端退出后命令仍旧执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;用的-JVM-调优的参数都有哪些？&#34;&gt;&lt;a href=&#34;#用的-JVM-调优的参数都有哪些？&#34; class=&#34;headerlink&#34; title=&#34;用的 JVM 调优的参数都有哪些？&#34;&gt;&lt;/a&gt;用的 JVM 调优的参数都有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	对于JVM调优，主要就是调整年轻代、年老大、元空间的内存空间大小及使用的垃圾回收器类型。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2Uvdm1vcHRpb25zLWpzcC5odG1s&#34;&gt;https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1）设置堆的初始大小和最大大小，为了防止垃圾收集器在初始大小、最大大小之间收缩堆而产生额外的时间，通常把最大、初始大小设置为相同的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Xms：设置堆的初始化大小

-Xmx：设置堆的最大大小
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2） 设置年轻代中Eden区和两个Survivor区的大小比例。该值如果不设置，则默认比例为8:1:1。Java官方通过增大Eden区的大小，来减少YGC发生的次数，但有时我们发现，虽然次数减少了，但Eden区满&lt;/p&gt;
&lt;p&gt;的时候，由于占用的空间较大，导致释放缓慢，此时STW的时间较长，因此需要按照程序情况去调优。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-XXSurvivorRatio=3，表示年轻代中的分配比率：survivor:eden = 2:3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3）年轻代和老年代默认比例为1：2。可以通过调整二者空间大小比率来设置两者的大小。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-XX:newSize   设置年轻代的初始大小
-XX:MaxNewSize   设置年轻代的最大大小，  初始大小和最大大小两个值通常相同
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4）线程堆栈的设置：&lt;strong&gt;每个线程默认会开启1M的堆栈&lt;/strong&gt;，用于存放栈帧、调用参数、局部变量等，但一般256K就够用。通常减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Xss   对每个线程stack大小的调整,-Xss128k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5）一般来说，当survivor区不够大或者占用量达到50%，就会把一些对象放到老年区。通过设置合理的eden区，survivor区及使用率，可以将年轻对象保存在年轻代，从而避免full GC，使用-Xmn设置年轻代的大小&lt;/p&gt;
&lt;p&gt;6）系统CPU持续飙高的话，首先先排查代码问题，如果代码没问题，则咨询运维或者云服务器供应商，通常服务器重启或者服务器迁移即可解决。&lt;/p&gt;
&lt;p&gt;7）对于占用内存比较多的大对象，一般会选择在老年代分配内存。如果在年轻代给大对象分配内存，年轻代内存不够了，就要在eden区移动大量对象到老年代，然后这些移动的对象可能很快消亡，因此导致full GC。通过设置参数：-XX:PetenureSizeThreshold&amp;#x3D;1000000，单位为B，标明对象大小超过1M时，在老年代(tenured)分配内存空间。&lt;/p&gt;
&lt;p&gt;8）一般情况下，年轻对象放在eden区，当第一次GC后，如果对象还存活，放到survivor区，此后，每GC一次，年龄增加1，当对象的年龄达到阈值，就被放到tenured老年区。这个阈值可以同构-XX:MaxTenuringThreshold设置。如果想让对象留在年轻代，可以设置比较大的阈值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;（1）-XX:+UseParallelGC:年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能的减少垃圾回收时间。

（2）-XX:+UseParallelOldGC:设置老年代使用并行垃圾回收收集器。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;9）尝试使用大的内存分页：使用大的内存分页增加CPU的内存寻址能力，从而系统的性能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-XX:+LargePageSizeInBytes 设置内存页的大小
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10）使用非占用的垃圾收集器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-XX:+UseConcMarkSweepGC老年代使用CMS收集器降低停顿。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;说一下-JVM-调优的工具？&#34;&gt;&lt;a href=&#34;#说一下-JVM-调优的工具？&#34; class=&#34;headerlink&#34; title=&#34;说一下 JVM 调优的工具？&#34;&gt;&lt;/a&gt;说一下 JVM 调优的工具？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;命令工具&#34;&gt;&lt;a href=&#34;#命令工具&#34; class=&#34;headerlink&#34; title=&#34;命令工具&#34;&gt;&lt;/a&gt;命令工具&lt;/h4&gt;&lt;h5 id=&#34;jps（Java-Process-Status）&#34;&gt;&lt;a href=&#34;#jps（Java-Process-Status）&#34; class=&#34;headerlink&#34; title=&#34;jps（Java Process Status）&#34;&gt;&lt;/a&gt;jps（Java Process Status）&lt;/h5&gt;&lt;p&gt;输出JVM中运行的进程状态信息(现在一般使用jconsole)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904104739581.png&#34; alt=&#34;image-20220904104739581&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;jstack&#34;&gt;&lt;a href=&#34;#jstack&#34; class=&#34;headerlink&#34; title=&#34;jstack&#34;&gt;&lt;/a&gt;jstack&lt;/h5&gt;&lt;p&gt;查看java进程内&lt;strong&gt;线程的堆栈&lt;/strong&gt;信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;jstack [option] &amp;lt;pid&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;java案例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.heima.jvm;

public class Application &amp;#123;

    public static void main(String[] args) throws InterruptedException &amp;#123;
        while (true)&amp;#123;
            Thread.sleep(1000);
            System.out.println(&amp;quot;哈哈哈&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用jstack查看进行堆栈运行信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904111059602.png&#34; alt=&#34;image-20220904111059602&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;jmap&#34;&gt;&lt;a href=&#34;#jmap&#34; class=&#34;headerlink&#34; title=&#34;jmap&#34;&gt;&lt;/a&gt;jmap&lt;/h5&gt;&lt;p&gt;用于生成堆转存快照&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jmap [options] pid  内存映像信息&lt;/p&gt;
&lt;p&gt;jmap -heap pid   显示Java堆的信息&lt;/p&gt;
&lt;p&gt;jmap -dump:format&amp;#x3D;b,file&amp;#x3D;heap.hprof pid&lt;/p&gt;
&lt;p&gt;​		format&amp;#x3D;b表示以hprof二进制格式转储Java堆的内存&lt;br&gt;​		file&amp;#x3D;&lt;filename&gt;用于指定快照dump文件的文件名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：显示了某一个java运行的堆信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;C:\Users\yuhon&amp;gt;jmap -heap 53280
Attaching to process ID 53280, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.321-b07

using thread-local object allocation.
Parallel GC with 8 thread(s)   //并行的垃圾回收器

Heap Configuration:  //堆配置
   MinHeapFreeRatio         = 0   //空闲堆空间的最小百分比
   MaxHeapFreeRatio         = 100  //空闲堆空间的最大百分比
   MaxHeapSize              = 8524922880 (8130.0MB) //堆空间允许的最大值
   NewSize                  = 178257920 (170.0MB) //新生代堆空间的默认值
   MaxNewSize               = 2841640960 (2710.0MB) //新生代堆空间允许的最大值
   OldSize                  = 356515840 (340.0MB) //老年代堆空间的默认值
   NewRatio                 = 2 //新生代与老年代的堆空间比值，表示新生代：老年代=1：2
   SurvivorRatio            = 8 //两个Survivor区和Eden区的堆空间比值为8,表示S0:S1:Eden=1:1:8
   MetaspaceSize            = 21807104 (20.796875MB) //元空间的默认值
   CompressedClassSpaceSize = 1073741824 (1024.0MB) //压缩类使用空间大小
   MaxMetaspaceSize         = 17592186044415 MB //元空间允许的最大值
   G1HeapRegionSize         = 0 (0.0MB)//在使用 G1 垃圾回收算法时，JVM 会将 Heap 空间分隔为若干个 Region，该参数用来指定每个 Region 空间的大小。

Heap Usage:
PS Young Generation
Eden Space: //Eden使用情况
   capacity = 134217728 (128.0MB)
   used     = 10737496 (10.240074157714844MB)
   free     = 123480232 (117.75992584228516MB)
   8.000057935714722% used
From Space: //Survivor-From 使用情况
   capacity = 22020096 (21.0MB)
   used     = 0 (0.0MB)
   free     = 22020096 (21.0MB)
   0.0% used
To Space: //Survivor-To 使用情况
   capacity = 22020096 (21.0MB)
   used     = 0 (0.0MB)
   free     = 22020096 (21.0MB)
   0.0% used
PS Old Generation  //老年代 使用情况
   capacity = 356515840 (340.0MB)
   used     = 0 (0.0MB)
   free     = 356515840 (340.0MB)
   0.0% used

3185 interned Strings occupying 261264 bytes.
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;jhat&#34;&gt;&lt;a href=&#34;#jhat&#34; class=&#34;headerlink&#34; title=&#34;jhat&#34;&gt;&lt;/a&gt;jhat&lt;/h5&gt;&lt;p&gt;用于分析jmap生成的堆转存快照（一般不推荐使用，而是使用Ecplise Memory Analyzer）&lt;/p&gt;
&lt;h5 id=&#34;jstat&#34;&gt;&lt;a href=&#34;#jstat&#34; class=&#34;headerlink&#34; title=&#34;jstat&#34;&gt;&lt;/a&gt;jstat&lt;/h5&gt;&lt;p&gt;是JVM统计监测工具。可以用来显示垃圾回收信息、类加载信息、新生代统计信息等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见参数&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;①总结垃圾回收统计&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;jstat -gcutil pid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904114511854.png&#34; alt=&#34;image-20220904114511854&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;S0&lt;/td&gt;
&lt;td&gt;幸存1区当前使用比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S1&lt;/td&gt;
&lt;td&gt;幸存2区当前使用比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;伊甸园区使用比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;老年代使用比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;元数据区使用比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CCS&lt;/td&gt;
&lt;td&gt;压缩使用比例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YGC&lt;/td&gt;
&lt;td&gt;年轻代垃圾回收次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YGCT&lt;/td&gt;
&lt;td&gt;年轻代垃圾回收消耗时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FGC&lt;/td&gt;
&lt;td&gt;老年代垃圾回收次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FGCT&lt;/td&gt;
&lt;td&gt;老年代垃圾回收消耗时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GCT&lt;/td&gt;
&lt;td&gt;垃圾回收消耗总时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;②垃圾回收统计&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;jstat -gc pid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904115157363.png&#34; alt=&#34;image-20220904115157363&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;可视化工具&#34;&gt;&lt;a href=&#34;#可视化工具&#34; class=&#34;headerlink&#34; title=&#34;可视化工具&#34;&gt;&lt;/a&gt;可视化工具&lt;/h4&gt;&lt;h5 id=&#34;jconsole&#34;&gt;&lt;a href=&#34;#jconsole&#34; class=&#34;headerlink&#34; title=&#34;jconsole&#34;&gt;&lt;/a&gt;jconsole&lt;/h5&gt;&lt;p&gt;用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具&lt;/p&gt;
&lt;p&gt;打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904115936095.png&#34; alt=&#34;image-20220904115936095&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以内存、线程、类等信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904120057211.png&#34; alt=&#34;image-20220904120057211&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;VisualVM：故障处理工具&#34;&gt;&lt;a href=&#34;#VisualVM：故障处理工具&#34; class=&#34;headerlink&#34; title=&#34;VisualVM：故障处理工具&#34;&gt;&lt;/a&gt;VisualVM：故障处理工具&lt;/h5&gt;&lt;p&gt;能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈&lt;/p&gt;
&lt;p&gt;打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904120356174.png&#34; alt=&#34;image-20220904120356174&#34;&gt;&lt;/p&gt;
&lt;p&gt;监控程序运行情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904132011289.png&#34; alt=&#34;image-20220904132011289&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看运行中的dump&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904132134095.png&#34; alt=&#34;image-20220904132134095&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看堆中的信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904132346495.png&#34; alt=&#34;image-20220904132346495&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;java内存泄露的排查思路？&#34;&gt;&lt;a href=&#34;#java内存泄露的排查思路？&#34; class=&#34;headerlink&#34; title=&#34;java内存泄露的排查思路？&#34;&gt;&lt;/a&gt;java内存泄露的排查思路？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;如果线程请求分配的栈容量超过java虚拟机栈允许的最大容量的时候，java虚拟机将抛出一个StackOverFlowError异常&lt;/p&gt;
&lt;p&gt;如果java虚拟机栈可以动态拓展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成拓展，或者在建立新线程的时候没有足够的内存去创建对应的虚拟机栈，那java虚拟机将会抛出一个OutOfMemoryError异常&lt;/p&gt;
&lt;p&gt;如果一次加载的类太多，元空间内存不足，则会报OutOfMemoryError: Metaspace&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230506155704119.png&#34; alt=&#34;image-20230506155704119&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、通过jmap指定打印他的内存快照 dump&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有的情况是内存溢出之后程序则会直接中断，而jmap只能打印在运行中的程序，所以建议通过参数的方式的生成dump文件，配置如下：&lt;/p&gt;
&lt;p&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;br&gt;-XX:HeapDumpPath&amp;#x3D;&amp;#x2F;home&amp;#x2F;app&amp;#x2F;dumps&amp;#x2F;      指定生成后文件的保存目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、通过工具， VisualVM（Ecplise MAT）去分析 dump文件&lt;/p&gt;
&lt;p&gt;VisualVM可以加载离线的dump文件，如下图&lt;/p&gt;
&lt;p&gt;文件–&amp;gt;装入—&amp;gt;选择dump文件即可查看堆快照信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是linux系统中的程序，则需要把dump文件下载到本地（windows环境）下，打开VisualVM工具分析。VisualVM目前只支持在windows环境下运行可视化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904132925812.png&#34; alt=&#34;image-20220904132925812&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904133722905.png&#34; alt=&#34;image-20220904133722905&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、找到对应的代码，通过阅读上下文的情况，进行修复即可&lt;/p&gt;
&lt;h3 id=&#34;CPU飙高排查方案与思路？&#34;&gt;&lt;a href=&#34;#CPU飙高排查方案与思路？&#34; class=&#34;headerlink&#34; title=&#34;CPU飙高排查方案与思路？&#34;&gt;&lt;/a&gt;CPU飙高排查方案与思路？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.使用top命令查看占用cpu的情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904161818255.png&#34; alt=&#34;image-20220904161818255&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.通过top命令查看后，可以查看是哪一个进程占用cpu较高，上图所示的进程为：30978&lt;/p&gt;
&lt;p&gt;3.查看当前线程中的进程信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;ps H -eo pid,tid,%cpu | grep 40940
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;pid  进行id&lt;/p&gt;
&lt;p&gt;tid   进程中的线程id&lt;/p&gt;
&lt;p&gt;%  cpu使用率 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904162117022.png&#34; alt=&#34;image-20220904162117022&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.通过上图分析，在进程30978中的线程30979占用cpu较高&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：上述的线程id是一个十进制，我们需要把这个线程id转换为16进制才行，因为通常在日志中展示的都是16进制的线程id名称&lt;/p&gt;
&lt;p&gt;转换方式：&lt;/p&gt;
&lt;p&gt;在linux中执行命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf &amp;quot;%x\n&amp;quot; 30979&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904162654928.png&#34; alt=&#34;image-20220904162654928&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源码行号&lt;/p&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;jstack 30978   此处是进程id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220904162941977.png&#34; alt=&#34;image-20220904162941977&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看完此文章可以看&lt;a href=&#34;interview/JVM%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98&#34;&gt;JVM相关面试题&lt;/a&gt;测试一下自己掌握情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="java" scheme="https://anoxiahub.github.io/categories/java/" />
        <category term="JVM" scheme="https://anoxiahub.github.io/tags/JVM/" />
        <updated>2023-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/java/Java%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3/</id>
        <title>Java集合详解</title>
        <link rel="alternate" href="https://anoxiahub.github.io/java/Java%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次课程主要涉及到的是List和Map相关的面试题，比较高频就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ArrayList&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LinkedList&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HashMap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ConcurrentHashMap&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427162524322.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList底层实现是数组&lt;/li&gt;
&lt;li&gt;LinkedList底层实现是双向链表&lt;/li&gt;
&lt;li&gt;HashMap的底层实现使用了众多数据结构，包含了数组、链表、散列表、红黑树等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在讲解这些集合之后，我们会讲解数据结构，知道了数据结构的特点之后，熟悉集合就更加简单了。在讲解数据结构之前，我们也会简单普及一下算法复杂度分析，让大家能够评判代码的好坏，也能更加深入去理解数据结构和集合。&lt;/p&gt;
&lt;h2 id=&#34;算法复杂度分析&#34;&gt;&lt;a href=&#34;#算法复杂度分析&#34; class=&#34;headerlink&#34; title=&#34;算法复杂度分析&#34;&gt;&lt;/a&gt;算法复杂度分析&lt;/h2&gt;&lt;h3 id=&#34;为什么要进行复杂度分析？&#34;&gt;&lt;a href=&#34;#为什么要进行复杂度分析？&#34; class=&#34;headerlink&#34; title=&#34;为什么要进行复杂度分析？&#34;&gt;&lt;/a&gt;为什么要进行复杂度分析？&lt;/h3&gt;&lt;p&gt;我们先来看下面这个代码，你能评判这个代码的好坏吗？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 ** *求**1~n**的累加和
 ** @param* *n
 ** @return
*/
public int sum(int n) &amp;#123;
   int sum = 0;
   for ( int i = 1; i &amp;lt;= n; i++) &amp;#123;
     sum = sum + i;
   &amp;#125;
   return sum;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实学习算法复杂度的好处就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;指导你编写出性能更优的代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;评判别人写的代码的好坏&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;相信你学完了算法复杂度分析，就有能力评判上面代码的好坏了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于算法复杂度分析，包含了两个内容，一个是时间复杂度，一个是空间复杂度，通常情况下说复杂度，都是指时间复杂度，我们也会重点讲解时间复杂度&lt;/p&gt;
&lt;h3 id=&#34;时间复杂度&#34;&gt;&lt;a href=&#34;#时间复杂度&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度&#34;&gt;&lt;/a&gt;时间复杂度&lt;/h3&gt;&lt;h4 id=&#34;案例&#34;&gt;&lt;a href=&#34;#案例&#34; class=&#34;headerlink&#34; title=&#34;案例&#34;&gt;&lt;/a&gt;案例&lt;/h4&gt;&lt;p&gt;时间复杂度分析：简单来说就是评估代码的执行耗时的，大家还是看刚才的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 ** *求**1~n**的累加和
 ** @param* *n
 ** @return
*/
public int sum(int n) &amp;#123;
   int sum = 0;
   for ( int i = 1; i &amp;lt;= n; i++) &amp;#123;
     sum = sum + i;
   &amp;#125;
   return sum;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分析这个代码的时间复杂度，分析过程如下：&lt;/p&gt;
&lt;p&gt;1.假如每行代码的执行耗时一样：1ms&lt;/p&gt;
&lt;p&gt;2.分析这段代码总执行多少行？3n+3&lt;/p&gt;
&lt;p&gt;3.代码耗时总时间： T(n) &amp;#x3D; (3n + 3) * 1ms&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;T(n):就是代码总耗时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们现在有了总耗时，需要借助大O表示法来计算这个代码的时间复杂度&lt;/p&gt;
&lt;h4 id=&#34;大O表示法&#34;&gt;&lt;a href=&#34;#大O表示法&#34; class=&#34;headerlink&#34; title=&#34;大O表示法&#34;&gt;&lt;/a&gt;大O表示法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;大O表示法&lt;/strong&gt;：不具体表示代码真正的执行时间，而是表示&lt;strong&gt;代码执行时间随数据规模增长的变化趋势&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;刚才的代码示例总耗时公式为：T(n) &amp;#x3D; (3n + 3) * 1ms&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中 (3n + 3) 是代码的总行数，每行执行的时间都一样，所以得出结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;T(n)与代码的执行次数成正比(代码行数越多，执行时间越长)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过，大O表示法只需要代码执行时间与数据规模的增长趋势，公式可以简化如下：&lt;/p&gt;
&lt;p&gt;T(n) &amp;#x3D;O(3n + 3)————&amp;gt; T(n) &amp;#x3D; O(n)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当n很大时，公式中的低阶，常量，系数三部分并不左右其增长趋势，因此可以忽略，我们只需要记录一个最大的量级就可以了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图也能表明数据的趋势&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427173120668.png&#34; alt=&#34;image-20230427173120668&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;常见复杂度表示形式&#34;&gt;&lt;a href=&#34;#常见复杂度表示形式&#34; class=&#34;headerlink&#34; title=&#34;常见复杂度表示形式&#34;&gt;&lt;/a&gt;常见复杂度表示形式&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427173742389.png&#34; alt=&#34;image-20230427173742389&#34;&gt;&lt;/p&gt;
&lt;p&gt;速记口诀：&lt;strong&gt;常对幂指阶&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;越在上面的性能就越高，越往下性能就越低&lt;/p&gt;
&lt;p&gt;下图是一些比较常见时间复杂度的时间与数据规模的趋势：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427173937663.png&#34; alt=&#34;image-20230427173937663&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;时间复杂度O-1&#34;&gt;&lt;a href=&#34;#时间复杂度O-1&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度O(1)&#34;&gt;&lt;/a&gt;时间复杂度O(1)&lt;/h4&gt;&lt;p&gt;实例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public int test01(int n)&amp;#123;
    int i=0;
    int j = 1;
    return i+j;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码只有三行，它的复杂度也是O(1)，而不是O(3)&lt;/p&gt;
&lt;p&gt;再看如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public void test02(int n)&amp;#123;
    int i=0;
    int sum=0;
    for(;i&amp;lt;100;i++)&amp;#123;
        sum = sum+i;
    &amp;#125;
    System.out.println(sum);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;整个代码中因为循环次数是固定的就是100次，这样的代码复杂度我们认为也是O(1)&lt;/p&gt;
&lt;p&gt;一句话总结：&lt;strong&gt;只要代码的执行时间不随着n的增大而增大，这样的代码复杂度都是O(1)&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;时间复杂度O-n&#34;&gt;&lt;a href=&#34;#时间复杂度O-n&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度O(n)&#34;&gt;&lt;/a&gt;时间复杂度O(n)&lt;/h4&gt;&lt;p&gt;实例代码1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 求1~n的累加和
 * @param n
 * @return
 */
public int sum(int n) &amp;#123;
    int sum = 0;
    for ( int i = 1; i &amp;lt;= n; i++) &amp;#123;
        sum = sum + i;
    &amp;#125;
    return sum;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一层for循序时间复杂度就是O(n)&lt;/p&gt;
&lt;p&gt;实例代码2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static int sum2(int n)&amp;#123;
    int sum = 0;
    for (int i = 1; i &amp;lt; n; ++i) &amp;#123;
        for (int j = 1; j &amp;lt; n; ++j) &amp;#123;
            sum = sum + i * j;
        &amp;#125;
    &amp;#125;
    return sum;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个代码的执行行数为：O( 3n^2  + 3n + 3 )，不过，依据大O表示的规则：&lt;strong&gt;常量、系数、低阶，可以忽略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以这个代码最终的时间复杂度为：O(n^2)&lt;/p&gt;
&lt;h4 id=&#34;时间复杂度O-logn&#34;&gt;&lt;a href=&#34;#时间复杂度O-logn&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度O(logn)&#34;&gt;&lt;/a&gt;时间复杂度O(logn)&lt;/h4&gt;&lt;p&gt;对数复杂度非常的常见，但相对比较难以分析，实例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public void test04(int n)&amp;#123;
    int i=1;
    while(i&amp;lt;=n)&amp;#123;
        i = i * 2;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分析这个代码的复杂度，我们必须要再强调一个前提：&lt;strong&gt;复杂度分析就是要弄清楚代码的执行次数和数据规模n之间的关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上代码最关键的一行是：&lt;code&gt;i = i * 2&lt;/code&gt;，这行代码可以决定这个while循环执行代码的行数，&lt;code&gt;i&lt;/code&gt;的值是可以无限接近&lt;code&gt;n&lt;/code&gt;的值的。如果&lt;code&gt;i&lt;/code&gt; 一旦大于等于了&lt;code&gt;n&lt;/code&gt;则循环条件就不满足了。也就说达到了最大的行数。我们可以分析一下&lt;code&gt;i&lt;/code&gt;这个值变化的过程&lt;/p&gt;
&lt;p&gt;分析过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427174832858.png&#34; alt=&#34;image-20230427174832858&#34;&gt;&lt;/p&gt;
&lt;p&gt;由此可知，代码的时间复杂度表示为O(log n)&lt;/p&gt;
&lt;h4 id=&#34;时间复杂度O-n-log-n&#34;&gt;&lt;a href=&#34;#时间复杂度O-n-log-n&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度O(n * log n)&#34;&gt;&lt;/a&gt;时间复杂度O(n * log n)&lt;/h4&gt;&lt;p&gt;分析完O( log n )，那O( n * log n )就很容易理解了，比如下列代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public void test05(int n)&amp;#123;
    int i=0;
    for(;i&amp;lt;=n;i++)&amp;#123;
        test04(n);
    &amp;#125;
&amp;#125;

public void test04(int n)&amp;#123;
    int i=1;
    while(i&amp;lt;=n)&amp;#123;
        i = i * 2;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;空间复杂度&#34;&gt;&lt;a href=&#34;#空间复杂度&#34; class=&#34;headerlink&#34; title=&#34;空间复杂度&#34;&gt;&lt;/a&gt;空间复杂度&lt;/h3&gt;&lt;p&gt;空间复杂度全称是渐进空间复杂度，表示算法占用的额外&lt;strong&gt;存储空间&lt;/strong&gt;与&lt;strong&gt;数据规模&lt;/strong&gt;之间的增长关系&lt;/p&gt;
&lt;p&gt;看下面代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public void test(int n)&amp;#123;
    int i=0;
    int sum=0;
    for(;i&amp;lt;n;i++)&amp;#123;
        sum = sum+i;
    &amp;#125;
    System.out.println(sum);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码执行并不需要占用额外的存储空间，只需要常量级的内存空间大小，因此空间复杂度是O(1)&lt;/p&gt;
&lt;p&gt;再来看一个其他例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;void print(int n) &amp;#123;
    int i = 0;
    int[] a = new int[n];
    for (i; i &amp;lt;n; ++i) &amp;#123;
        a[i] = i * i;
    &amp;#125;
    for (i = n-1; i &amp;gt;= 0; --i) &amp;#123;
        System.out.println(a[i]);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;传入一个变量n，决定申请多少的int数组空间内存，此段代码的空间复杂度为O(n)&lt;/p&gt;
&lt;p&gt;我们常见的空间复杂度就是O(1),O(n),O(n ^2)，其他像对数阶的复杂度几乎用不到，因此空间复杂度比时间复杂度分析要简单的多。&lt;/p&gt;
&lt;h2 id=&#34;List相关面试题&#34;&gt;&lt;a href=&#34;#List相关面试题&#34; class=&#34;headerlink&#34; title=&#34;List相关面试题&#34;&gt;&lt;/a&gt;List相关面试题&lt;/h2&gt;&lt;h3 id=&#34;数组&#34;&gt;&lt;a href=&#34;#数组&#34; class=&#34;headerlink&#34; title=&#34;数组&#34;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;h4 id=&#34;数组概述&#34;&gt;&lt;a href=&#34;#数组概述&#34; class=&#34;headerlink&#34; title=&#34;数组概述&#34;&gt;&lt;/a&gt;数组概述&lt;/h4&gt;&lt;p&gt;数组（Array）是一种用&lt;strong&gt;连续的内存空间&lt;/strong&gt;存储&lt;strong&gt;相同数据类型&lt;/strong&gt;数据的线性数据结构。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] array = &amp;#123;22,33,88,66,55,25&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427175545402.png&#34; alt=&#34;image-20230427175545402&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们定义了这么一个数组之后，在内存的表示是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427175633253.png&#34; alt=&#34;image-20230427175633253&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在假如，我们通过&lt;code&gt;arrar[1]&lt;/code&gt;，想要获得下标为1这个元素，但是现在栈内存中指向的堆内存数组的首地址，它是如何获取下标为1这个数据的？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427175849493.png&#34; alt=&#34;image-20230427175849493&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;寻址公式&#34;&gt;&lt;a href=&#34;#寻址公式&#34; class=&#34;headerlink&#34; title=&#34;寻址公式&#34;&gt;&lt;/a&gt;寻址公式&lt;/h4&gt;&lt;p&gt;为了方便大家理解，我们把数组的内存地址稍微改了一下，都改成了数字，如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427180056509.png&#34; alt=&#34;image-20230427180056509&#34;&gt;&lt;/p&gt;
&lt;p&gt;在数组在内存中查找元素的时候，是有一个寻址公式的，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;arr[i] = baseAddress + i * dataTypeSize
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;baseAddress：数组的首地址，目前是10&lt;/p&gt;
&lt;p&gt;dataTypeSize：代表数组中元素类型的大小，目前数组重存储的是int型的数据，dataTypeSize&amp;#x3D;4个字节&lt;/p&gt;
&lt;p&gt;arr：指的是数组&lt;/p&gt;
&lt;p&gt;i：指的是数组的下标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了寻址公式以后，我们再来获取一下下标为1的元素，这个是原来的数组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] array = &amp;#123;22,33,88,66,55,25&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;套入公式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;array[1] =10 + i * 4 = 14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取到14这个地址，就能获取到下标为1的这个元素了。&lt;/p&gt;
&lt;h4 id=&#34;操作数组的时间复杂度&#34;&gt;&lt;a href=&#34;#操作数组的时间复杂度&#34; class=&#34;headerlink&#34; title=&#34;操作数组的时间复杂度&#34;&gt;&lt;/a&gt;操作数组的时间复杂度&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1.随机查询(根据索引查询)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组元素的访问是通过下标来访问的，计算机通过数组的&lt;strong&gt;首地址&lt;/strong&gt;和&lt;strong&gt;寻址公式&lt;/strong&gt;能够很快速的找到想要访问的元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public int test01(int[] a,int i)&amp;#123;
   return a[i];
   // a[i] = baseAddress + i \* dataSize
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码的执行次数并不会随着数组的数据规模大小变化而变化，是常数级的，所以查询数据操作的时间复杂度是O(1)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 未知索引查询O(n)或O(log2n)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;情况一：查找数组内的元素，查找55号数据，遍历数组时间复杂度为O(n)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20221007101831281.png&#34; alt=&#34;image-20221007101831281&#34;&gt;&lt;/p&gt;
&lt;p&gt;情况二：查找排序后数组内的元素，通过二分查找算法查找55号数据时间复杂度为O(logn)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20221007101811885.png&#34; alt=&#34;image-20221007101811885&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.插入O(n)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组是一段连续的内存空间，因此为了保证数组的连续性会使得数组的插入和删除的效率变的很低。&lt;/p&gt;
&lt;p&gt;假设数组的长度为 n，现在如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220820104903422.png&#34; alt=&#34;image-20220820104903422&#34;&gt;&lt;/p&gt;
&lt;p&gt;新增之后的数据变化，如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20220820104950846.png&#34; alt=&#34;image-20220820104950846&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;p&gt;插入操作，最好情况下是O(1)的，最坏情况下是O(n)的，**平均情况下的时间复杂度是O(n)**。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.删除O(n)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同理可得：如果我们要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了，时间复杂度仍然是O(n)。&lt;/p&gt;
&lt;h3 id=&#34;ArrayList源码分析&#34;&gt;&lt;a href=&#34;#ArrayList源码分析&#34; class=&#34;headerlink&#34; title=&#34;ArrayList源码分析&#34;&gt;&lt;/a&gt;ArrayList源码分析&lt;/h3&gt;&lt;p&gt;分析ArrayList源码主要从三个方面去翻阅：成员变量，构造函数，关键方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下源码都来源于jdk1.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;成员变量&#34;&gt;&lt;a href=&#34;#成员变量&#34; class=&#34;headerlink&#34; title=&#34;成员变量&#34;&gt;&lt;/a&gt;成员变量&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427192118259.png&#34; alt=&#34;image-20230427192118259&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;DEFAULT_CAPACITY&lt;/em&gt; &amp;#x3D; 10;  默认初始的容量**(CAPACITY)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;EMPTY_ELEMENTDATA&lt;/em&gt; &amp;#x3D; {}; 用于空实例的共享空数组实例&lt;/p&gt;
&lt;p&gt;&lt;em&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;/em&gt; &amp;#x3D; {};用于默认大小的空实例的共享空数组实例&lt;/p&gt;
&lt;p&gt;Object[] elementData;  存储元素的数组缓冲区&lt;/p&gt;
&lt;p&gt;int size;     ArrayList的大小（它包含的元素数量）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;构造方法&#34;&gt;&lt;a href=&#34;#构造方法&#34; class=&#34;headerlink&#34; title=&#34;构造方法&#34;&gt;&lt;/a&gt;构造方法&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427192154014.png&#34; alt=&#34;image-20230427192154014&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一个构造是带初始化容量的构造函数，可以按照指定的容量初始化数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二个是无参构造函数，默认创建一个空集合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427192200918.png&#34; alt=&#34;image-20230427192200918&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将collection对象转换成数组，然后将数组的地址的赋给elementData&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;ArrayList源码分析-1&#34;&gt;&lt;a href=&#34;#ArrayList源码分析-1&#34; class=&#34;headerlink&#34; title=&#34;ArrayList源码分析&#34;&gt;&lt;/a&gt;ArrayList源码分析&lt;/h4&gt;&lt;p&gt;添加数据的流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230427192644244.png&#34; alt=&#34;image-20230427192644244&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;底层数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList底层是用动态的数组实现的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始容量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList初始容量为0，当第一次添加数据的时候才会初始化容量为10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩容逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList在进行扩容的时候是原来容量的1.5倍，每次扩容都需要拷贝数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;确保数组已使用长度（size）加1之后足够存下下一个数据 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回添加成功布尔值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面试题-ArrayList-list-new-ArrayList-10-中的list扩容几次&#34;&gt;&lt;a href=&#34;#面试题-ArrayList-list-new-ArrayList-10-中的list扩容几次&#34; class=&#34;headerlink&#34; title=&#34;面试题-ArrayList list&amp;#x3D;new ArrayList(10)中的list扩容几次&#34;&gt;&lt;/a&gt;面试题-ArrayList list&amp;#x3D;new ArrayList(10)中的list扩容几次&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428185505677.png&#34; alt=&#34;image-20230428185505677&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;p&gt; 该语句只是声明和实例了一个 ArrayList，指定了容量为 10，未扩容 &lt;/p&gt;
&lt;h4 id=&#34;面试题-如何实现数组和List之间的转换&#34;&gt;&lt;a href=&#34;#面试题-如何实现数组和List之间的转换&#34; class=&#34;headerlink&#34; title=&#34;面试题-如何实现数组和List之间的转换&#34;&gt;&lt;/a&gt;面试题-如何实现数组和List之间的转换&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下代码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428185600918.png&#34; alt=&#34;image-20230428185600918&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组转List ，使用JDK中java.util.Arrays工具类的asList方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List转数组，使用List的toArray方法。无参toArray方法返回 Object数组，传入初始化长度的数组对象，返回该对象数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试官再问：&lt;/p&gt;
&lt;p&gt;1，用Arrays.asList转List后，如果修改了数组内容，list受影响吗&lt;/p&gt;
&lt;p&gt;2，List用toArray转数组后，如果修改了List内容，数组受影响吗&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428185657791.png&#34; alt=&#34;image-20230428185657791&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数组转List受影响&lt;/p&gt;
&lt;p&gt;List转数组不受影响&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再答：&lt;/p&gt;
&lt;p&gt;1，用Arrays.asList转List后，如果修改了数组内容，list受影响吗&lt;/p&gt;
&lt;p&gt;Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址&lt;/p&gt;
&lt;p&gt;2，List用toArray转数组后，如果修改了List内容，数组受影响吗&lt;/p&gt;
&lt;p&gt;list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响&lt;/p&gt;
&lt;h3 id=&#34;链表&#34;&gt;&lt;a href=&#34;#链表&#34; class=&#34;headerlink&#34; title=&#34;链表&#34;&gt;&lt;/a&gt;链表&lt;/h3&gt;&lt;h4 id=&#34;单向链表&#34;&gt;&lt;a href=&#34;#单向链表&#34; class=&#34;headerlink&#34; title=&#34;单向链表&#34;&gt;&lt;/a&gt;单向链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;链表中的每一个元素称之为结点（Node）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;物理存储单元上，非连续、非顺序的存储结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单向链表：每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。记录下个结点地址的指针叫作后继指针 next&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428185922776.png&#34; alt=&#34;image-20230428185922776&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码实现参考：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428185945929.png&#34; alt=&#34;image-20230428185945929&#34;&gt;&lt;/p&gt;
&lt;p&gt;链表中的某个节点为B，B的下一个节点为C         表示： B.next&amp;#x3D;&amp;#x3D;C&lt;/p&gt;
&lt;h4 id=&#34;单向链表时间复杂度分析&#34;&gt;&lt;a href=&#34;#单向链表时间复杂度分析&#34; class=&#34;headerlink&#34; title=&#34;单向链表时间复杂度分析&#34;&gt;&lt;/a&gt;单向链表时间复杂度分析&lt;/h4&gt;&lt;p&gt;（1）查询操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428190130901.png&#34; alt=&#34;image-20230428190130901&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只有在查询头节点的时候不需要遍历链表，时间复杂度是O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询其他结点需要遍历链表，时间复杂度是O(n)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）插入和删除操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428190210915.png&#34; alt=&#34;image-20230428190210915&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有在添加和删除头节点的时候不需要遍历链表，时间复杂度是O(1)&lt;/li&gt;
&lt;li&gt;添加或删除其他结点需要遍历链表找到对应节点后，才能完成新增或删除节点，时间复杂度是O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双向链表&#34;&gt;&lt;a href=&#34;#双向链表&#34; class=&#34;headerlink&#34; title=&#34;双向链表&#34;&gt;&lt;/a&gt;双向链表&lt;/h4&gt;&lt;p&gt;而双向链表，顾名思义，它支持两个方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个结点不止有一个后继指针 next 指向后面的结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有一个前驱指针 prev 指向前面的结点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428190324752.png&#34; alt=&#34;image-20230428190324752&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428190353286.png&#34; alt=&#34;image-20230428190353286&#34;&gt;&lt;/p&gt;
&lt;p&gt;对比单链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;双向链表需要额外的两个空间来存储后继结点和前驱结点的地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持双向遍历，这样也带来了双向链表操作的灵活性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;双向链表时间复杂度分析&#34;&gt;&lt;a href=&#34;#双向链表时间复杂度分析&#34; class=&#34;headerlink&#34; title=&#34;双向链表时间复杂度分析&#34;&gt;&lt;/a&gt;双向链表时间复杂度分析&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428190450517.png&#34; alt=&#34;image-20230428190450517&#34;&gt;&lt;/p&gt;
&lt;p&gt;（1）查询操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查询头尾结点的时间复杂度是O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;平均的查询时间复杂度是O(n)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给定节点找前驱节点的时间复杂度为O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）增删操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;头尾结点增删的时间复杂度为O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他部分结点增删的时间复杂度是 O(n)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;给定节点增删的时间复杂度为O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;面试题-ArrayList和LinkedList的区别是什么？&#34;&gt;&lt;a href=&#34;#面试题-ArrayList和LinkedList的区别是什么？&#34; class=&#34;headerlink&#34; title=&#34;面试题-ArrayList和LinkedList的区别是什么？&#34;&gt;&lt;/a&gt;面试题-ArrayList和LinkedList的区别是什么？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;底层数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ArrayList 是动态数组的数据结构实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LinkedList 是双向链表的数据结构实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作数据效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList按照下标查询的时间复杂度O(1)【内存是连续的，根据寻址公式】， LinkedList不支持下标查询&lt;/li&gt;
&lt;li&gt;查找（未知索引）： ArrayList需要遍历，链表也需要链表，时间复杂度都是O(n)&lt;/li&gt;
&lt;li&gt;新增和删除&lt;ul&gt;
&lt;li&gt;ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)&lt;/li&gt;
&lt;li&gt;LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内存空间占用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ArrayList底层是数组，内存连续，节省内存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LinkedList 是双向链表需要存储数据，和两个指针，更占用内存&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程安全&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList和LinkedList都不是线程安全的&lt;/li&gt;
&lt;li&gt;如果需要保证线程安全，有两种方案：&lt;ul&gt;
&lt;li&gt;在方法内使用，局部变量则是线程安全的&lt;/li&gt;
&lt;li&gt;使用线程安全的ArrayList和LinkedList&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HashMap相关面试题&#34;&gt;&lt;a href=&#34;#HashMap相关面试题&#34; class=&#34;headerlink&#34; title=&#34;HashMap相关面试题&#34;&gt;&lt;/a&gt;HashMap相关面试题&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428194715016.png&#34; alt=&#34;image-20230428194715016&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;二叉树&#34;&gt;&lt;a href=&#34;#二叉树&#34; class=&#34;headerlink&#34; title=&#34;二叉树&#34;&gt;&lt;/a&gt;二叉树&lt;/h3&gt;&lt;h4 id=&#34;二叉树概述&#34;&gt;&lt;a href=&#34;#二叉树概述&#34; class=&#34;headerlink&#34; title=&#34;二叉树概述&#34;&gt;&lt;/a&gt;二叉树概述&lt;/h4&gt;&lt;p&gt;二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。&lt;/p&gt;
&lt;p&gt;二叉树每个节点的左子树和右子树也分别满足二叉树的定义。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428194831426.png&#34; alt=&#34;image-20230428194831426&#34;&gt;&lt;/p&gt;
&lt;p&gt;Java中有两个方式实现二叉树：数组存储，链式存储。&lt;/p&gt;
&lt;p&gt;基于链式存储的树的节点可定义如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428194904383.png&#34; alt=&#34;image-20230428194904383&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428194931132.png&#34; alt=&#34;image-20230428194931132&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;二叉搜索树&#34;&gt;&lt;a href=&#34;#二叉搜索树&#34; class=&#34;headerlink&#34; title=&#34;二叉搜索树&#34;&gt;&lt;/a&gt;二叉搜索树&lt;/h4&gt;&lt;p&gt;在二叉树中，比较常见的二叉树有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;满二叉树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完全二叉树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;二叉搜索树&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;红黑树&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们重点讲解二叉搜索树和红黑树&lt;/p&gt;
&lt;p&gt;（1）二叉搜索树概述&lt;/p&gt;
&lt;p&gt;二叉搜索树(Binary Search Tree,BST)又名二叉查找树，有序二叉树或者排序二叉树，是二叉树中比较常用的一种类型&lt;/p&gt;
&lt;p&gt;二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428195206422.png&#34; alt=&#34;image-20230428195206422&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）二叉搜索树-时间复杂度分析&lt;/p&gt;
&lt;p&gt;实际上由于二叉查找树的形态各异，时间复杂度也不尽相同，我画了几棵树我们来看一下插入，查找，删除的时间复杂度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428195341917.png&#34; alt=&#34;image-20230428195341917&#34;&gt;&lt;/p&gt;
&lt;p&gt;插入，查找，删除的时间复杂度&lt;strong&gt;O(logn)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;极端情况下二叉搜索的时间复杂度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428195449799.png&#34; alt=&#34;image-20230428195449799&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于图中这种情况属于最坏的情况，二叉查找树已经退化成了链表，左右子树极度不平衡，此时查找的时间复杂度肯定是O(n)。&lt;/p&gt;
&lt;h4 id=&#34;红黑树&#34;&gt;&lt;a href=&#34;#红黑树&#34; class=&#34;headerlink&#34; title=&#34;红黑树&#34;&gt;&lt;/a&gt;红黑树&lt;/h4&gt;&lt;p&gt;（1）概述&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;红黑树（Red Black Tree）&lt;/strong&gt;：也是一种自平衡的二叉搜索树(BST)，之前叫做平衡二叉B树（Symmetric Binary B-Tree）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428195832724.png&#34; alt=&#34;image-20230428195832724&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）红黑树的特质&lt;/p&gt;
&lt;p&gt;性质1：节点要么是&lt;strong&gt;红色&lt;/strong&gt;,要么是&lt;strong&gt;黑色&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;性质2：根节点是&lt;strong&gt;黑色&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;性质3：叶子节点都是黑色的空节点&lt;/p&gt;
&lt;p&gt;性质4：红黑树中红色节点的子节点都是黑色&lt;/p&gt;
&lt;p&gt;性质5：从任一节点到叶子节点的所有路径都包含相同数目的黑色节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在添加或删除节点的时候，如果不符合这些性质会发生旋转，以达到所有的性质，保证红黑树的平衡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（3）红黑树的复杂度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查找：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红黑树也是一棵BST（二叉搜索树）树，查找操作的时间复杂度为：O(log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加先要从根节点开始找到元素添加的位置，时间复杂度O(log n)&lt;/li&gt;
&lt;li&gt;添加完成后涉及到复杂度为O(1)的旋转调整操作&lt;/li&gt;
&lt;li&gt;故整体复杂度为：O(log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先从根节点开始找到被删除元素的位置，时间复杂度O(log n)&lt;/li&gt;
&lt;li&gt;删除完成后涉及到复杂度为O(1)的旋转调整操作&lt;/li&gt;
&lt;li&gt;故整体复杂度为：O(log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;散列表&#34;&gt;&lt;a href=&#34;#散列表&#34; class=&#34;headerlink&#34; title=&#34;散列表&#34;&gt;&lt;/a&gt;散列表&lt;/h3&gt;&lt;p&gt;在HashMap中的最重要的一个数据结构就是散列表，在散列表中又使用到了红黑树和链表&lt;/p&gt;
&lt;h4 id=&#34;散列表（Hash-Table）概述&#34;&gt;&lt;a href=&#34;#散列表（Hash-Table）概述&#34; class=&#34;headerlink&#34; title=&#34;散列表（Hash Table）概述&#34;&gt;&lt;/a&gt;散列表（Hash Table）概述&lt;/h4&gt;&lt;p&gt;散列表(Hash Table)又名哈希表&amp;#x2F;Hash表，是根据键（Key）直接访问在内存存储位置值（Value）的数据结构，它是由数组演化而来的，利用了数组支持按照下标进行随机访问数据的特性&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428200919454.png&#34; alt=&#34;image-20230428200919454&#34;&gt;&lt;/p&gt;
&lt;p&gt;假设有100个人参加马拉松，编号是1-100，如果要编程实现根据选手的编号迅速找到选手信息？&lt;/p&gt;
&lt;p&gt;可以把选手信息存入数组中，选手编号就是数组的下标，数组的元素就是选手的信息。&lt;/p&gt;
&lt;p&gt;当我们查询选手信息的时候，只需要根据选手的编号到数组中查询对应的元素就可以快速找到选手的信息，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428201000814.png&#34; alt=&#34;image-20230428201000814&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在需求升级了：&lt;/p&gt;
&lt;p&gt;假设有100个人参加马拉松，不采用1-100的自然数对选手进行编号，编号有一定的规则比如：2023ZHBJ001，其中2023代表年份，ZH代表中国，BJ代表北京，001代表原来的编号，那此时的编号2023ZHBJ001不能直接作为数组的下标，此时应该如何实现呢？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428201321607.png&#34; alt=&#34;image-20230428201321607&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们目前是把选手的信息存入到数组中，不过选手的编号不能直接作为数组的下标，不过，可以把选手的选号进行转换，转换为数值就可以继续作为数组的下标了？&lt;/p&gt;
&lt;p&gt;转换可以使用散列函数进行转换&lt;/p&gt;
&lt;h4 id=&#34;散列函数和散列冲突&#34;&gt;&lt;a href=&#34;#散列函数和散列冲突&#34; class=&#34;headerlink&#34; title=&#34;散列函数和散列冲突&#34;&gt;&lt;/a&gt;散列函数和散列冲突&lt;/h4&gt;&lt;p&gt;将键(key)映射为数组下标的函数叫做散列函数。可以表示为：hashValue &amp;#x3D; hash(key)&lt;/p&gt;
&lt;p&gt;散列函数的基本要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;散列函数计算得到的散列值必须是大于等于0的正整数，因为hashValue需要作为数组的下标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果key1&amp;#x3D;&amp;#x3D;key2，那么经过hash后得到的哈希值也必相同即：hash(key1) &amp;#x3D;&amp;#x3D; hash(key2）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如果key1 !&amp;#x3D; key2，那么经过hash后得到的哈希值也必不相同即：hash(key1) !&amp;#x3D; hash(key2)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际的情况下想找一个散列函数能够做到对于不同的key计算得到的散列值都不同几乎是不可能的，即便像著名的MD5,SHA等哈希算法也无法避免这一情况，这就是散列冲突(或者哈希冲突，哈希碰撞，&lt;strong&gt;就是指多个key映射到同一个数组下标位置&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428203219225.png&#34; alt=&#34;image-20230428203219225&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;散列冲突-链表法（拉链）&#34;&gt;&lt;a href=&#34;#散列冲突-链表法（拉链）&#34; class=&#34;headerlink&#34; title=&#34;散列冲突-链表法（拉链）&#34;&gt;&lt;/a&gt;散列冲突-链表法（拉链）&lt;/h4&gt;&lt;p&gt;在散列表中，数组的每个下标位置我们可以称之为桶（bucket）或者槽（slot），每个桶(槽)会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428203437910.png&#34; alt=&#34;image-20230428203437910&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单就是，如果有多个key最终的hash值是一样的，就会存入数组的同一个下标中，下标中挂一个链表存入多个数据&lt;/p&gt;
&lt;h4 id=&#34;时间复杂度-散列表&#34;&gt;&lt;a href=&#34;#时间复杂度-散列表&#34; class=&#34;headerlink&#34; title=&#34;时间复杂度-散列表&#34;&gt;&lt;/a&gt;时间复杂度-散列表&lt;/h4&gt;&lt;p&gt;1，插入操作，通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，插入的时间复杂度是 O(1)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428203711269.png&#34; alt=&#34;image-20230428203711269&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过计算就可以找到元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2，当查找、删除一个元素时，我们同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;平均情况下基于链表法解决冲突时查询的时间复杂度是O(1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;散列表可能会退化为链表,查询的时间复杂度就从 O(1) 退化为 O(n)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428203858903.png&#34; alt=&#34;image-20230428203858903&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将链表法中的链表改造为其他高效的动态数据结构，比如红黑树，查询的时间复杂度是 O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428203924816.png&#34; alt=&#34;image-20230428203924816&#34;&gt;&lt;/p&gt;
&lt;p&gt;将链表法中的链表改造红黑树还有一个非常重要的原因，可以防止DDos攻击&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DDos 攻击:&lt;/p&gt;
&lt;p&gt;分布式拒绝服务攻击(英文意思是Distributed Denial of Service，简称DDoS）&lt;/p&gt;
&lt;p&gt;指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击。由于攻击的发出点是分布在不同地方的，这类攻击称为分布式拒绝服务攻击，其中的攻击者可以有多个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试题-说一下HashMap的实现原理？&#34;&gt;&lt;a href=&#34;#面试题-说一下HashMap的实现原理？&#34; class=&#34;headerlink&#34; title=&#34;面试题-说一下HashMap的实现原理？&#34;&gt;&lt;/a&gt;面试题-说一下HashMap的实现原理？&lt;/h3&gt;&lt;p&gt;HashMap的数据结构： 底层使用hash表数据结构，即数组和链表或红黑树&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储时，如果出现hash值相同的key，此时有两种情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  a. 如果key相同，则覆盖原始值；&lt;/p&gt;
&lt;p&gt;  b. 如果key不同（出现冲突），则将当前的key-value放入链表或红黑树中 &lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428204902016.png&#34; alt=&#34;image-20230428204902016&#34;&gt;&lt;/p&gt;
&lt;p&gt;面试官追问：HashMap的jdk1.7和jdk1.8有什么区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK1.8之前采用的是拉链法。拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8） 时并且数组长度达到64时，将链表转化为红黑树，以减少搜索时间。扩容 resize( ) 时，红黑树拆分成的树的结点数小于等于临界值6个，则退化成链表&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面试题-HashMap的put方法的具体流程&#34;&gt;&lt;a href=&#34;#面试题-HashMap的put方法的具体流程&#34; class=&#34;headerlink&#34; title=&#34;面试题-HashMap的put方法的具体流程&#34;&gt;&lt;/a&gt;面试题-HashMap的put方法的具体流程&lt;/h3&gt;&lt;h4 id=&#34;hashMap常见属性&#34;&gt;&lt;a href=&#34;#hashMap常见属性&#34; class=&#34;headerlink&#34; title=&#34;hashMap常见属性&#34;&gt;&lt;/a&gt;hashMap常见属性&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428210404117.png&#34; alt=&#34;image-20230428210404117&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;源码分析&#34;&gt;&lt;a href=&#34;#源码分析&#34; class=&#34;headerlink&#34; title=&#34;源码分析&#34;&gt;&lt;/a&gt;源码分析&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428210450744.png&#34; alt=&#34;image-20230428210450744&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HashMap是懒惰加载，在创建对象时并没有初始化数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在无参的构造函数中，设置了默认的加载因子是0.75&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加数据流程图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428210624847.png&#34; alt=&#34;image-20230428210624847&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体的源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public V put(K key, V value) &amp;#123;
    return putVal(hash(key), key, value, false, true);
&amp;#125;

final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) &amp;#123;
    Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; p; int n, i;
    //判断数组是否未初始化
    if ((tab = table) == null || (n = tab.length) == 0)
        //如果未初始化，调用resize方法 进行初始化
        n = (tab = resize()).length;
    //通过 &amp;amp; 运算求出该数据（key）的数组下标并判断该下标位置是否有数据
    if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)
        //如果没有，直接将数据放在该下标位置
        tab[i] = newNode(hash, key, value, null);
    //该数组下标有数据的情况
    else &amp;#123;
        Node&amp;lt;K,V&amp;gt; e; K k;
        //判断该位置数据的key和新来的数据是否一样
        if (p.hash == hash &amp;amp;&amp;amp;
            ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
            //如果一样，证明为修改操作，该节点的数据赋值给e,后边会用到
            e = p;
        //判断是不是红黑树
        else if (p instanceof TreeNode)
            //如果是红黑树的话，进行红黑树的操作
            e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
        //新数据和当前数组既不相同，也不是红黑树节点，证明是链表
        else &amp;#123;
            //遍历链表
            for (int binCount = 0; ; ++binCount) &amp;#123;
                //判断next节点，如果为空的话，证明遍历到链表尾部了
                if ((e = p.next) == null) &amp;#123;
                    //把新值放入链表尾部
                    p.next = newNode(hash, key, value, null);
                    //因为新插入了一条数据，所以判断链表长度是不是大于等于8
                    if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        //如果是，进行转换红黑树操作
                        treeifyBin(tab, hash);
                    break;
                &amp;#125;
                //判断链表当中有数据相同的值，如果一样，证明为修改操作
                if (e.hash == hash &amp;amp;&amp;amp;
                    ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                    break;
                //把下一个节点赋值为当前节点
                p = e;
            &amp;#125;
        &amp;#125;
        //判断e是否为空（e值为修改操作存放原数据的变量）
        if (e != null) &amp;#123; // existing mapping for key
            //不为空的话证明是修改操作，取出老值
            V oldValue = e.value;
            //一定会执行  onlyIfAbsent传进来的是false
            if (!onlyIfAbsent || oldValue == null)
                //将新值赋值当前节点
                e.value = value;
            afterNodeAccess(e);
            //返回老值
            return oldValue;
        &amp;#125;
    &amp;#125;
    //计数器，计算当前节点的修改次数
    ++modCount;
    //当前数组中的数据数量如果大于扩容阈值
    if (++size &amp;gt; threshold)
        //进行扩容操作
        resize();
    //空方法
    afterNodeInsertion(evict);
    //添加操作时 返回空值
    return null;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;判断键值对数组table是否为空或为null，否则执行resize()进行扩容（初始化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据键值key计算hash值得到数组索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断table[i]&amp;#x3D;&amp;#x3D;null，条件成立，直接新建节点添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果table[i]&amp;#x3D;&amp;#x3D;null ,不成立&lt;/p&gt;
&lt;p&gt;4.1 判断table[i]的首个元素是否和key一样，如果相同直接覆盖value&lt;/p&gt;
&lt;p&gt;4.2 判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对&lt;/p&gt;
&lt;p&gt;4.3 遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现key已经存在直接覆盖value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，进行扩容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;面试题-讲一讲HashMap的扩容机制&#34;&gt;&lt;a href=&#34;#面试题-讲一讲HashMap的扩容机制&#34; class=&#34;headerlink&#34; title=&#34;面试题-讲一讲HashMap的扩容机制&#34;&gt;&lt;/a&gt;面试题-讲一讲HashMap的扩容机制&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428210844694.png&#34; alt=&#34;image-20230428210844694&#34;&gt;&lt;/p&gt;
&lt;p&gt;扩容的流程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428211031968.png&#34; alt=&#34;image-20230428211031968&#34;&gt;&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//扩容、初始化数组
final Node&amp;lt;K,V&amp;gt;[] resize() &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] oldTab = table;
        //如果当前数组为null的时候，把oldCap老数组容量设置为0
        int oldCap = (oldTab == null) ? 0 : oldTab.length;
        //老的扩容阈值
        int oldThr = threshold;
        int newCap, newThr = 0;
        //判断数组容量是否大于0，大于0说明数组已经初始化
        if (oldCap &amp;gt; 0) &amp;#123;
            //判断当前数组长度是否大于最大数组长度
            if (oldCap &amp;gt;= MAXIMUM_CAPACITY) &amp;#123;
                //如果是，将扩容阈值直接设置为int类型的最大数值并直接返回
                threshold = Integer.MAX_VALUE;
                return oldTab;
            &amp;#125;
            //如果在最大长度范围内，则需要扩容  OldCap &amp;lt;&amp;lt; 1等价于oldCap*2
            //运算过后判断是不是最大值并且oldCap需要大于16
            else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
                     oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr &amp;lt;&amp;lt; 1; // double threshold  等价于oldThr*2
        &amp;#125;
        //如果oldCap&amp;lt;0，但是已经初始化了，像把元素删除完之后的情况，那么它的临界值肯定还存在，       			如果是首次初始化，它的临界值则为0
        else if (oldThr &amp;gt; 0) // initial capacity was placed in threshold
            newCap = oldThr;
        //数组未初始化的情况，将阈值和扩容因子都设置为默认值
        else &amp;#123;               // zero initial threshold signifies using defaults
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        &amp;#125;
        //初始化容量小于16的时候，扩容阈值是没有赋值的
        if (newThr == 0) &amp;#123;
            //创建阈值
            float ft = (float)newCap * loadFactor;
            //判断新容量和新阈值是否大于最大容量
            newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE);
        &amp;#125;
        //计算出来的阈值赋值
        threshold = newThr;
        @SuppressWarnings(&amp;#123;&amp;quot;rawtypes&amp;quot;,&amp;quot;unchecked&amp;quot;&amp;#125;)
        //根据上边计算得出的容量 创建新的数组       
        Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
        //赋值
        table = newTab;
        //扩容操作，判断不为空证明不是初始化数组
        if (oldTab != null) &amp;#123;
            //遍历数组
            for (int j = 0; j &amp;lt; oldCap; ++j) &amp;#123;
                Node&amp;lt;K,V&amp;gt; e;
                //判断当前下标为j的数组如果不为空的话赋值个e，进行下一步操作
                if ((e = oldTab[j]) != null) &amp;#123;
                    //将数组位置置空
                    oldTab[j] = null;
                    //判断是否有下个节点
                    if (e.next == null)
                        //如果没有，就重新计算在新数组中的下标并放进去
                        newTab[e.hash &amp;amp; (newCap - 1)] = e;
                       //有下个节点的情况，并且判断是否已经树化
                    else if (e instanceof TreeNode)
                        //进行红黑树的操作
                        ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                    //有下个节点的情况，并且没有树化（链表形式）
                    else &amp;#123;
                        //比如老数组容量是16，那下标就为0-15
                        //扩容操作*2，容量就变为32，下标为0-31
                        //低位：0-15，高位16-31
                        //定义了四个变量
                        //        低位头          低位尾
                        Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                        //        高位头		   高位尾
                        Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                        //下个节点
                        Node&amp;lt;K,V&amp;gt; next;
                        //循环遍历
                        do &amp;#123;
                            //取出next节点
                            next = e.next;
                            //通过 与操作 计算得出结果为0
                            if ((e.hash &amp;amp; oldCap) == 0) &amp;#123;
                                //如果低位尾为null，证明当前数组位置为空，没有任何数据
                                if (loTail == null)
                                    //将e值放入低位头
                                    loHead = e;
                                //低位尾不为null，证明已经有数据了
                                else
                                    //将数据放入next节点
                                    loTail.next = e;
                                //记录低位尾数据
                                loTail = e;
                            &amp;#125;
                            //通过 与操作 计算得出结果不为0
                            else &amp;#123;
                                 //如果高位尾为null，证明当前数组位置为空，没有任何数据
                                if (hiTail == null)
                                    //将e值放入高位头
                                    hiHead = e;
                                //高位尾不为null，证明已经有数据了
                                else
                                    //将数据放入next节点
                                    hiTail.next = e;
                               //记录高位尾数据
                                   hiTail = e;
                            &amp;#125;
                            
                        &amp;#125; 
                        //如果e不为空，证明没有到链表尾部，继续执行循环
                        while ((e = next) != null);
                        //低位尾如果记录的有数据，是链表
                        if (loTail != null) &amp;#123;
                            //将下一个元素置空
                            loTail.next = null;
                            //将低位头放入新数组的原下标位置
                            newTab[j] = loHead;
                        &amp;#125;
                        //高位尾如果记录的有数据，是链表
                        if (hiTail != null) &amp;#123;
                            //将下一个元素置空
                            hiTail.next = null;
                            //将高位头放入新数组的(原下标+原数组容量)位置
                            newTab[j + oldCap] = hiHead;
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        //返回新的数组对象
        return newTab;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次每次扩容都是达到了扩容阈值（数组长度 * 0.75）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次扩容的时候，都是扩容之前容量的2倍； &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有hash冲突的节点，则直接使用 e.hash &amp;amp; (newCap - 1) 计算新数组的索引位置&lt;/li&gt;
&lt;li&gt;如果是红黑树，走红黑树的添加&lt;/li&gt;
&lt;li&gt;如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash &amp;amp; oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面试题-hashMap的寻址算法&#34;&gt;&lt;a href=&#34;#面试题-hashMap的寻址算法&#34; class=&#34;headerlink&#34; title=&#34;面试题-hashMap的寻址算法&#34;&gt;&lt;/a&gt;面试题-hashMap的寻址算法&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428212501408.png&#34; alt=&#34;image-20230428212501408&#34;&gt;&lt;/p&gt;
&lt;p&gt;在putVal方法中，有一个hash(key)方法，这个方法就是来去计算key的hash值的，看下面的代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428212601977.png&#34; alt=&#34;image-20230428212601977&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先获取key的hashCode值，然后右移16位 异或运算 原来的hashCode值，主要作用就是使原来的hash值更加均匀，减少hash冲突&lt;/p&gt;
&lt;p&gt;有了hash值之后，就很方便的去计算当前key的在数组中存储的下标，看下面的代码：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428212729580.png&#34; alt=&#34;image-20230428212729580&#34;&gt;&lt;/p&gt;
&lt;p&gt;(n-1)&amp;amp;hash : 得到数组中的索引，代替取模，性能更好，数组长度必须是2的n次幂&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于hash值的其他面试题：为何HashMap的数组长度一定是2的次幂？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩容时重新计算索引效率更高： hash &amp;amp; oldCap &amp;#x3D;&amp;#x3D; 0 的元素留在原来位置 ，否则新位置 &amp;#x3D; 旧位置 + oldCap&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;面试题-hashmap在1-7情况下的多线程死循环问题&#34;&gt;&lt;a href=&#34;#面试题-hashmap在1-7情况下的多线程死循环问题&#34; class=&#34;headerlink&#34; title=&#34;面试题-hashmap在1.7情况下的多线程死循环问题&#34;&gt;&lt;/a&gt;面试题-hashmap在1.7情况下的多线程死循环问题&lt;/h3&gt;&lt;p&gt;jdk7的的数据结构是：数组+链表&lt;/p&gt;
&lt;p&gt;在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428213115071.png&#34; alt=&#34;image-20230428213115071&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;变量e指向的是需要迁移的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量next指向的是下一个需要迁移的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jdk1.7中的链表采用的头插法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在数据迁移的过程中并没有新的对象产生，只是改变了对象的引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产生死循环的过程：&lt;/p&gt;
&lt;p&gt;线程1和线程2的变量e和next都引用了这个两个节点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428213533483.png&#34; alt=&#34;image-20230428213533483&#34;&gt;&lt;/p&gt;
&lt;p&gt;线程2扩容后，由于头插法，链表顺序颠倒，但是线程1的临时变量e和next还引用了这两个节点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428214732877.png&#34; alt=&#34;image-20230428214732877&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一次循环&lt;/p&gt;
&lt;p&gt;由于线程2迁移的时候，已经把B的next执行了A&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428214806072.png&#34; alt=&#34;image-20230428214806072&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二次循环&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428214908652.png&#34; alt=&#34;image-20230428214908652&#34;&gt;&lt;/p&gt;
&lt;p&gt;第三次循环&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230428214937231.png&#34; alt=&#34;image-20230428214937231&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考回答：&lt;/p&gt;
&lt;p&gt;在jdk1.7的hashmap中在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环&lt;/p&gt;
&lt;p&gt;比如说，现在有两个线程&lt;/p&gt;
&lt;p&gt;线程一：读取到当前的hashmap数据，数据中一个链表，在准备扩容时，线程二介入&lt;/p&gt;
&lt;p&gt;线程二：也读取hashmap，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是AB，扩容后的顺序是BA，线程二执行结束。&lt;/p&gt;
&lt;p&gt;线程一：继续执行的时候就会出现死循环的问题。&lt;/p&gt;
&lt;p&gt;线程一先将A移入新的链表，再将B插入到链头，由于另外一个线程的原因，B的next指向了A，&lt;/p&gt;
&lt;p&gt;所以B-&amp;gt;A-&amp;gt;B,形成循环。&lt;/p&gt;
&lt;p&gt;当然，JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），&lt;strong&gt;尾插法&lt;/strong&gt;，就避免了jdk7中死循环的问题。&lt;/p&gt;
&lt;h3 id=&#34;面试题-HashSet与HashMap的区别&#34;&gt;&lt;a href=&#34;#面试题-HashSet与HashMap的区别&#34; class=&#34;headerlink&#34; title=&#34;面试题-HashSet与HashMap的区别&#34;&gt;&lt;/a&gt;面试题-HashSet与HashMap的区别&lt;/h3&gt;&lt;p&gt;(1)HashSet实现了Set接口, 仅存储对象; HashMap实现了 Map接口, 存储的是键值对.&lt;/p&gt;
&lt;p&gt;(2)HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20221007110404375.png&#34; alt=&#34;image-20221007110404375&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;面试题-HashTable与HashMap的区别&#34;&gt;&lt;a href=&#34;#面试题-HashTable与HashMap的区别&#34; class=&#34;headerlink&#34; title=&#34;面试题-HashTable与HashMap的区别&#34;&gt;&lt;/a&gt;面试题-HashTable与HashMap的区别&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;难易程度：☆☆&lt;/p&gt;
&lt;p&gt;出现频率：☆☆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;区别&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;HashTable&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;HashMap&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;数据结构&lt;/td&gt;
&lt;td&gt;数组+链表&lt;/td&gt;
&lt;td&gt;数组+链表+红黑树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否可以为null&lt;/td&gt;
&lt;td&gt;Key和value都不能为null&lt;/td&gt;
&lt;td&gt;可以为null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hash算法&lt;/td&gt;
&lt;td&gt;key的hashCode()&lt;/td&gt;
&lt;td&gt;二次hash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;扩容方式&lt;/td&gt;
&lt;td&gt;当前容量翻倍 +1&lt;/td&gt;
&lt;td&gt;当前容量翻倍&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;线程安全&lt;/td&gt;
&lt;td&gt;同步(synchronized)的，线程安全&lt;/td&gt;
&lt;td&gt;非线程安全&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;在实际开中不建议使用HashTable，在多线程环境下可以使用ConcurrentHashMap类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看完此文章可以看&lt;a href=&#34;interview/Java%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98&#34;&gt;Java集合相关面试题&lt;/a&gt;测试一下自己掌握情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="java" scheme="https://anoxiahub.github.io/categories/java/" />
        <category term="Java基础" scheme="https://anoxiahub.github.io/tags/Java%E5%9F%BA%E7%A1%80/" />
        <updated>2023-08-14T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/Java%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
        <title>Java集合相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/Java%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;有关多线程内容可以看&lt;a href=&#34;/java/Java%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3&#34;&gt;JUC详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：说一说Java提供的常见集合？（画一下集合结构图）&#34;&gt;&lt;a href=&#34;#面试官：说一说Java提供的常见集合？（画一下集合结构图）&#34; class=&#34;headerlink&#34; title=&#34;面试官：说一说Java提供的常见集合？（画一下集合结构图）&#34;&gt;&lt;/a&gt;面试官：说一说Java提供的常见集合？（画一下集合结构图）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~，好的。&lt;/p&gt;
&lt;p&gt;在java中提供了量大类的集合框架，主要分为两类：&lt;/p&gt;
&lt;p&gt;第一个是Collection  属于单列集合，第二个是Map  属于双列集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Collection中有两个子接口List和Set。在我们平常开发的过程中用的比较多像list接口中的实现类ArrarList和LinkedList。  在Set接口中有实现类HashSet和TreeSet。&lt;/li&gt;
&lt;li&gt;在map接口中有很多的实现类，平时比较常见的是HashMap、TreeMap，还有一个线程安全的map:ConcurrentHashMap&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：ArrayList底层是如何实现的？&#34;&gt;&lt;a href=&#34;#面试官：ArrayList底层是如何实现的？&#34; class=&#34;headerlink&#34; title=&#34;面试官：ArrayList底层是如何实现的？&#34;&gt;&lt;/a&gt;面试官：ArrayList底层是如何实现的？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~，我阅读过arraylist的源码，我主要说一下add方法吧&lt;/p&gt;
&lt;p&gt;第一：确保数组已使用长度（size）加1之后足够存下下一个数据 &lt;/p&gt;
&lt;p&gt;第二：计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）&lt;/p&gt;
&lt;p&gt;第三：确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。 &lt;/p&gt;
&lt;p&gt;第四：返回添加成功布尔值。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：ArrayList-list-new-ArrayList-10-中的list扩容几次&#34;&gt;&lt;a href=&#34;#面试官：ArrayList-list-new-ArrayList-10-中的list扩容几次&#34; class=&#34;headerlink&#34; title=&#34;面试官：ArrayList list&amp;#x3D;new ArrayList(10)中的list扩容几次&#34;&gt;&lt;/a&gt;面试官：ArrayList list&amp;#x3D;new ArrayList(10)中的list扩容几次&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​	是new了一个ArrarList并且给了一个构造参数10，对吧？(问题一定要问清楚再答)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：是的&#34;&gt;&lt;a href=&#34;#面试官：是的&#34; class=&#34;headerlink&#34; title=&#34;面试官：是的&#34;&gt;&lt;/a&gt;面试官：是的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​    好的，在ArrayList的源码中提供了一个带参数的构造方法，这个参数就是指定的集合初始长度，所以给了一个10的参数，就是指定了集合的初始长度是10，这里面并没有扩容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如何实现数组和List之间的转换&#34;&gt;&lt;a href=&#34;#面试官：如何实现数组和List之间的转换&#34; class=&#34;headerlink&#34; title=&#34;面试官：如何实现数组和List之间的转换&#34;&gt;&lt;/a&gt;面试官：如何实现数组和List之间的转换&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​	嗯，这个在我们平时开发很常见&lt;/p&gt;
&lt;p&gt;​    数组转list，可以使用jdk自动的一个工具类Arrars，里面有一个asList方法可以转换为数组&lt;/p&gt;
&lt;p&gt;​    List 转数组，可以直接调用list中的toArray方法，需要给一个参数，指定数组的类型，需要指定数组的长度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：用Arrays-asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗&#34;&gt;&lt;a href=&#34;#面试官：用Arrays-asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗&#34; class=&#34;headerlink&#34; title=&#34;面试官：用Arrays.asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗&#34;&gt;&lt;/a&gt;面试官：用Arrays.asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址&lt;/p&gt;
&lt;p&gt;list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响&lt;/p&gt;
&lt;p&gt;–&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：ArrayList-和-LinkedList-的区别是什么？&#34;&gt;&lt;a href=&#34;#面试官：ArrayList-和-LinkedList-的区别是什么？&#34; class=&#34;headerlink&#34; title=&#34;面试官：ArrayList 和 LinkedList 的区别是什么？&#34;&gt;&lt;/a&gt;面试官：ArrayList 和 LinkedList 的区别是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，它们两个主要是底层使用的数据结构不一样，ArrayList 是动态数组，LinkedList 是双向链表，这也导致了它们很多不同的特点。&lt;/p&gt;
&lt;p&gt;1，从操作数据效率来说&lt;/p&gt;
&lt;p&gt;ArrayList按照下标查询的时间复杂度O(1)【内存是连续的，根据寻址公式】， LinkedList不支持下标查询&lt;/p&gt;
&lt;p&gt;查找（未知索引）： ArrayList需要遍历，链表也需要链表，时间复杂度都是O(n)&lt;/p&gt;
&lt;p&gt;新增和删除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)&lt;/li&gt;
&lt;li&gt;LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2，从内存空间占用来说&lt;/p&gt;
&lt;p&gt;ArrayList底层是数组，内存连续，节省内存&lt;/p&gt;
&lt;p&gt;LinkedList 是双向链表需要存储数据，和两个指针，更占用内存&lt;/p&gt;
&lt;p&gt;3，从线程安全来说，ArrayList和LinkedList都不是线程安全的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：嗯，好的，刚才你说了ArrayList-和-LinkedList-不是线程安全的，你们在项目中是如何解决这个的线程安全问题的？&#34;&gt;&lt;a href=&#34;#面试官：嗯，好的，刚才你说了ArrayList-和-LinkedList-不是线程安全的，你们在项目中是如何解决这个的线程安全问题的？&#34; class=&#34;headerlink&#34; title=&#34;面试官：嗯，好的，刚才你说了ArrayList 和 LinkedList 不是线程安全的，你们在项目中是如何解决这个的线程安全问题的？&#34;&gt;&lt;/a&gt;面试官：嗯，好的，刚才你说了ArrayList 和 LinkedList 不是线程安全的，你们在项目中是如何解决这个的线程安全问题的？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，是这样的，主要有两种解决方案：&lt;/p&gt;
&lt;p&gt;第一：我们使用这个集合，优先在方法内使用，定义为局部变量，这样的话，就不会出现线程安全问题。&lt;/p&gt;
&lt;p&gt;第二：如果非要在成员变量中使用的话，可以使用线程安全的集合来替代&lt;/p&gt;
&lt;p&gt;ArrayList可以通过Collections 的 synchronizedList 方法将 ArrayList 转换成线程安全的容器后再使用。&lt;/p&gt;
&lt;p&gt;LinkedList 换成ConcurrentLinkedQueue来使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：说一下HashMap的实现原理？&#34;&gt;&lt;a href=&#34;#面试官：说一下HashMap的实现原理？&#34; class=&#34;headerlink&#34; title=&#34;面试官：说一下HashMap的实现原理？&#34;&gt;&lt;/a&gt;面试官：说一下HashMap的实现原理？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​	嗯。它主要分为了一下几个部分：&lt;/p&gt;
&lt;p&gt;1，底层使用hash表数据结构，即数组+（链表 | 红黑树）&lt;/p&gt;
&lt;p&gt;2，添加数据时，计算key的值确定元素在数组中的下标&lt;/p&gt;
&lt;p&gt;​	key相同则替换&lt;/p&gt;
&lt;p&gt;​	不同则存入链表或红黑树中&lt;/p&gt;
&lt;p&gt;3，获取数据通过key的hash计算数组下标获取元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：HashMap的jdk1-7和jdk1-8有什么区别&#34;&gt;&lt;a href=&#34;#面试官：HashMap的jdk1-7和jdk1-8有什么区别&#34; class=&#34;headerlink&#34; title=&#34;面试官：HashMap的jdk1.7和jdk1.8有什么区别&#34;&gt;&lt;/a&gt;面试官：HashMap的jdk1.7和jdk1.8有什么区别&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK1.8之前采用的拉链法，数组+链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JDK1.8之后采用数组+链表+红黑树，链表长度大于8且数组长度大于64则会从链表转化为红黑树&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，你能说下HashMap的put方法的具体流程吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，你能说下HashMap的put方法的具体流程吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，你能说下HashMap的put方法的具体流程吗？&#34;&gt;&lt;/a&gt;面试官：好的，你能说下HashMap的put方法的具体流程吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯好的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;判断键值对数组table是否为空或为null，否则执行resize()进行扩容（初始化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据键值key计算hash值得到数组索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断table[i]&amp;#x3D;&amp;#x3D;null，条件成立，直接新建节点添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果table[i]&amp;#x3D;&amp;#x3D;null ,不成立&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  4.1 判断table[i]的首个元素是否和key一样，如果相同直接覆盖value&lt;/p&gt;
&lt;p&gt;  4.2 判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对&lt;/p&gt;
&lt;p&gt;  4.3 遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现key已经存在直接覆盖value&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，进行扩容。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，刚才你多次介绍了hsahmap的扩容，能讲一讲HashMap的扩容机制吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，刚才你多次介绍了hsahmap的扩容，能讲一讲HashMap的扩容机制吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，刚才你多次介绍了hsahmap的扩容，能讲一讲HashMap的扩容机制吗？&#34;&gt;&lt;/a&gt;面试官：好的，刚才你多次介绍了hsahmap的扩容，能讲一讲HashMap的扩容机制吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;好的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次每次扩容都是达到了扩容阈值（数组长度 * 0.75）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次扩容的时候，都是扩容之前容量的2倍； &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有hash冲突的节点，则直接使用 e.hash &amp;amp; (newCap - 1) 计算新数组的索引位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是红黑树，走红黑树的添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash &amp;amp; oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，刚才你说的通过hash计算后找到数组的下标，是如何找到的呢，你了解hashMap的寻址算法吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，刚才你说的通过hash计算后找到数组的下标，是如何找到的呢，你了解hashMap的寻址算法吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，刚才你说的通过hash计算后找到数组的下标，是如何找到的呢，你了解hashMap的寻址算法吗？&#34;&gt;&lt;/a&gt;面试官：好的，刚才你说的通过hash计算后找到数组的下标，是如何找到的呢，你了解hashMap的寻址算法吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;这个哈希方法首先计算出key的hashCode值，然后通过这个hash值右移16位后的二进制进行按位&lt;strong&gt;异或运算&lt;/strong&gt;得到最后的hash值。&lt;/p&gt;
&lt;p&gt;在putValue的方法中，计算数组下标的时候使用hash值与数组长度取模得到存储数据下标的位置，hashmap为了性能更好，并没有直接采用取模的方式，而是使用了数组长度-1 得到一个值，用这个值按位与运算hash值，最终得到数组的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：为何HashMap的数组长度一定是2的次幂？&#34;&gt;&lt;a href=&#34;#面试官：为何HashMap的数组长度一定是2的次幂？&#34; class=&#34;headerlink&#34; title=&#34;面试官：为何HashMap的数组长度一定是2的次幂？&#34;&gt;&lt;/a&gt;面试官：为何HashMap的数组长度一定是2的次幂？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，好的。hashmap这么设计主要有两个原因：&lt;/p&gt;
&lt;p&gt;第一：&lt;/p&gt;
&lt;p&gt;计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模&lt;/p&gt;
&lt;p&gt;第二：&lt;/p&gt;
&lt;p&gt;扩容时重新计算索引效率更高：在进行扩容是会进行判断 hash值按位与运算旧数组长租是否 &amp;#x3D;&amp;#x3D; 0 &lt;/p&gt;
&lt;p&gt;如果等于0，则把元素留在原来位置 ，否则新位置是等于旧位置的下标+旧数组长度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，我看你对hashmap了解的挺深入的，你知道hashmap在1-7情况下的多线程死循环问题吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，我看你对hashmap了解的挺深入的，你知道hashmap在1-7情况下的多线程死循环问题吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，我看你对hashmap了解的挺深入的，你知道hashmap在1.7情况下的多线程死循环问题吗？&#34;&gt;&lt;/a&gt;面试官：好的，我看你对hashmap了解的挺深入的，你知道hashmap在1.7情况下的多线程死循环问题吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，知道的。是这样&lt;/p&gt;
&lt;p&gt;jdk7的的数据结构是：数组+链表&lt;/p&gt;
&lt;p&gt;在数组进行扩容的时候，因为链表是&lt;strong&gt;头插法&lt;/strong&gt;，在进行数据迁移的过程中，有可能导致死循环&lt;/p&gt;
&lt;p&gt;比如说，现在有两个线程&lt;/p&gt;
&lt;p&gt;线程一：&lt;strong&gt;读取&lt;/strong&gt;到当前的hashmap数据，数据中一个链表，在准备扩容时，线程二介入&lt;/p&gt;
&lt;p&gt;线程二也读取hashmap，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是AB，扩容后的顺序是BA，线程二执行结束。&lt;/p&gt;
&lt;p&gt;当线程一再继续执行的时候就会出现死循环的问题。&lt;/p&gt;
&lt;p&gt;线程一先将A移入新的链表，再将B插入到链头，由于另外一个线程的原因，B的next指向了A，所以B-&amp;gt;A-&amp;gt;B,形成循环。&lt;/p&gt;
&lt;p&gt;当然，JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），&lt;strong&gt;尾插法&lt;/strong&gt;，就避免了jdk7中死循环的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：好的，hashmap是线程安全的吗？&#34;&gt;&lt;a href=&#34;#面试官：好的，hashmap是线程安全的吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：好的，hashmap是线程安全的吗？&#34;&gt;&lt;/a&gt;面试官：好的，hashmap是线程安全的吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：不是线程安全的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那我们想要使用线程安全的map该怎么做呢？&#34;&gt;&lt;a href=&#34;#面试官：那我们想要使用线程安全的map该怎么做呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那我们想要使用线程安全的map该怎么做呢？&#34;&gt;&lt;/a&gt;面试官：那我们想要使用线程安全的map该怎么做呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：我们可以采用ConcurrentHashMap进行使用，它是一个线程安全的HashMap&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那你能聊一下ConcurrentHashMap的原理吗？&#34;&gt;&lt;a href=&#34;#面试官：那你能聊一下ConcurrentHashMap的原理吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那你能聊一下ConcurrentHashMap的原理吗？&#34;&gt;&lt;/a&gt;面试官：那你能聊一下ConcurrentHashMap的原理吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：好的，请参考《多线程相关面试题》中的ConcurrentHashMap部分的讲解&lt;/p&gt;
&lt;p&gt;–&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：HashSet与HashMap的区别？&#34;&gt;&lt;a href=&#34;#面试官：HashSet与HashMap的区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：HashSet与HashMap的区别？&#34;&gt;&lt;/a&gt;面试官：HashSet与HashMap的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，是这样。&lt;/p&gt;
&lt;p&gt;HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：HashTable与HashMap的区别&#34;&gt;&lt;a href=&#34;#面试官：HashTable与HashMap的区别&#34; class=&#34;headerlink&#34; title=&#34;面试官：HashTable与HashMap的区别&#34;&gt;&lt;/a&gt;面试官：HashTable与HashMap的区别&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，他们的主要区别是有几个吧&lt;/p&gt;
&lt;p&gt;第一，数据结构不一样，hashtable是数组+链表，hashmap在1.8之后改为了数组+链表+红黑树&lt;/p&gt;
&lt;p&gt;第二，hashtable存储数据的时候都不能为null，而hashmap是可以的&lt;/p&gt;
&lt;p&gt;第三，hash算法不同，hashtable是用本地修饰的hashcode值，而hashmap经常了二次hash&lt;/p&gt;
&lt;p&gt;第四，扩容方式不同，hashtable是当前容量翻倍+1，hashmap是当前容量翻倍&lt;/p&gt;
&lt;p&gt;第五，hashtable是线程安全的，操作数据的时候加了锁synchronized，hashmap不是线程安全的，效率更高一些&lt;/p&gt;
&lt;p&gt;在实际开中不建议使用HashTable，在多线程环境下可以使用ConcurrentHashMap类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="Java基础" scheme="https://anoxiahub.github.io/tags/Java%E5%9F%BA%E7%A1%80/" />
        <updated>2023-08-12T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/</id>
        <title>消息中间件相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/"/>
        <content type="html">&lt;h3 id=&#34;面试官：RabbitMQ-如何保证消息不丢失&#34;&gt;&lt;a href=&#34;#面试官：RabbitMQ-如何保证消息不丢失&#34; class=&#34;headerlink&#34; title=&#34;面试官：RabbitMQ-如何保证消息不丢失&#34;&gt;&lt;/a&gt;面试官：RabbitMQ-如何保证消息不丢失&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！我们当时MYSQL和Redis的数据双写一致性就是采用RabbitMQ实现同步的，这里面就要求了消息的高可用性，我们要保证消息的不丢失。主要从三个层面考虑&lt;/p&gt;
&lt;p&gt;第一个是开启生产者确认机制，确保生产者的消息能到达队列，如果报错可以先记录到日志中，再去修复数据&lt;/p&gt;
&lt;p&gt;第二个是开启持久化功能，确保消息未消费前在队列中不会丢失，其中的交换机、队列、和消息都要做持久化&lt;/p&gt;
&lt;p&gt;第三个是开启消费者确认机制为auto，由spring确认消息处理成功后完成ack，当然也需要设置一定的重试次数，我们当时设置了3次，如果重试3次还没有收到消息，就将失败后的消息投递到异常交换机，交由人工处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：RabbitMQ消息的重复消费问题如何解决的&#34;&gt;&lt;a href=&#34;#面试官：RabbitMQ消息的重复消费问题如何解决的&#34; class=&#34;headerlink&#34; title=&#34;面试官：RabbitMQ消息的重复消费问题如何解决的&#34;&gt;&lt;/a&gt;面试官：RabbitMQ消息的重复消费问题如何解决的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个我们还真遇到过，是这样的，我们当时消费者是设置了自动确认机制，当服务还没来得及给MQ确认的时候，服务宕机了，导致服务重启之后，又消费了一次消息。这样就重复消费了&lt;/p&gt;
&lt;p&gt;因为我们当时处理的支付（订单|业务唯一标识），它有一个业务的唯一标识，我们再处理消息时，先到数据库查询一下，这个数据是否存在，如果不存在，说明没有处理过，这个时候就可以正常处理这个消息了。如果已经存在这个数据了，就说明消息重复消费了，我们就不需要再消费了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那你还知道其他的解决方案吗？&#34;&gt;&lt;a href=&#34;#面试官：那你还知道其他的解决方案吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那你还知道其他的解决方案吗？&#34;&gt;&lt;/a&gt;面试官：那你还知道其他的解决方案吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，我想想~&lt;/p&gt;
&lt;p&gt;其实这个就是典型的幂等的问题，比如，redis分布式锁、数据库的锁都是可以的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：RabbitMQ中死信交换机-（RabbitMQ延迟队列有了解过嘛）&#34;&gt;&lt;a href=&#34;#面试官：RabbitMQ中死信交换机-（RabbitMQ延迟队列有了解过嘛）&#34; class=&#34;headerlink&#34; title=&#34;面试官：RabbitMQ中死信交换机 ? （RabbitMQ延迟队列有了解过嘛）&#34;&gt;&lt;/a&gt;面试官：RabbitMQ中死信交换机 ? （RabbitMQ延迟队列有了解过嘛）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！了解过！&lt;/p&gt;
&lt;p&gt;我们当时的xx项目有一个xx业务，需要用到延迟队列，其中就是使用RabbitMQ来实现的。&lt;/p&gt;
&lt;p&gt;延迟队列就是用到了死信交换机和TTL（消息存活时间）实现的。&lt;/p&gt;
&lt;p&gt;如果消息超时未消费就会变成死信，在RabbitMQ中如果消息成为死信，队列可以绑定一个死信交换机，在死信交换机上可以绑定其他队列，在我们发消息的时候可以按照需求指定TTL的时间，这样就实现了延迟队列的功能了。&lt;/p&gt;
&lt;p&gt;我记得RabbitMQ还有一种方式可以实现延迟队列，在RabbitMQ中安装一个死信插件，这样更方便一些，我们只需要在声明交互机的时候，指定这个就是死信交换机，然后在发送消息的时候直接指定超时时间就行了，相对于死信交换机+TTL要省略了一些步骤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如果有100万消息堆积在MQ-如何解决&#34;&gt;&lt;a href=&#34;#面试官：如果有100万消息堆积在MQ-如何解决&#34; class=&#34;headerlink&#34; title=&#34;面试官：如果有100万消息堆积在MQ , 如何解决 ?&#34;&gt;&lt;/a&gt;面试官：如果有100万消息堆积在MQ , 如何解决 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;我在实际的开发中，没遇到过这种情况，不过，如果发生了堆积的问题，解决方案也所有很多的&lt;/p&gt;
&lt;p&gt;第一:提高消费者的消费能力 ,可以使用多线程消费任务&lt;/p&gt;
&lt;p&gt;第二：增加更多消费者，提高消费速度 &lt;/p&gt;
&lt;p&gt;​			 使用工作队列模式, 设置多个消费者消费消费同一个队列中的消息&lt;/p&gt;
&lt;p&gt;第三：扩大队列容积，提高堆积上限 &lt;/p&gt;
&lt;p&gt;可以使用RabbitMQ惰性队列，惰性队列的好处主要是&lt;/p&gt;
&lt;p&gt;①接收到消息后直接存入磁盘而非内存&lt;/p&gt;
&lt;p&gt;②消费者要消费消息时才会从磁盘中读取并加载到内存&lt;/p&gt;
&lt;p&gt;③支持数百万条的消息存储&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：RabbitMQ的高可用机制有了解过嘛&#34;&gt;&lt;a href=&#34;#面试官：RabbitMQ的高可用机制有了解过嘛&#34; class=&#34;headerlink&#34; title=&#34;面试官：RabbitMQ的高可用机制有了解过嘛&#34;&gt;&lt;/a&gt;面试官：RabbitMQ的高可用机制有了解过嘛&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，熟悉的~&lt;/p&gt;
&lt;p&gt;我们当时项目在生产环境下，使用的集群，当时搭建是镜像模式集群，使用了3台机器。&lt;/p&gt;
&lt;p&gt;镜像队列结构是一主多从，所有操作都是主节点完成，然后同步给镜像节点，如果主节点宕机后，镜像节点会替代成新的主节点，不过在主从同步完成前，主节点就已经宕机，可能出现数据丢失&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那出现丢数据怎么解决呢？&#34;&gt;&lt;a href=&#34;#面试官：那出现丢数据怎么解决呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那出现丢数据怎么解决呢？&#34;&gt;&lt;/a&gt;面试官：那出现丢数据怎么解决呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;我们可以采用仲裁队列，与镜像队列一样，都是主从模式，支持主从数据同步，主从同步基于Raft协议，强一致。&lt;/p&gt;
&lt;p&gt;并且使用起来也非常简单，不需要额外的配置，在声明队列的时候只要指定这个是仲裁队列即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Kafka是如何保证消息不丢失&#34;&gt;&lt;a href=&#34;#面试官：Kafka是如何保证消息不丢失&#34; class=&#34;headerlink&#34; title=&#34;面试官：Kafka是如何保证消息不丢失&#34;&gt;&lt;/a&gt;面试官：Kafka是如何保证消息不丢失&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个保证机制很多，在发送消息到消费者接收消息，在每个阶段都有可能会丢失消息，所以我们解决的话也是从多个方面考虑&lt;/p&gt;
&lt;p&gt;第一个是生产者发送消息的时候，可以使用异步回调发送，如果消息发送失败，我们可以通过回调获取失败后的消息信息，可以考虑重试或记录日志，后边再做补偿都是可以的。同时在生产者这边还可以设置消息重试，有的时候是由于网络抖动的原因导致发送不成功，就可以使用重试机制来解决&lt;/p&gt;
&lt;p&gt;第二个在broker中消息有可能会丢失，我们可以通过kafka的复制机制来确保消息不丢失，在生产者发送消息的时候，可以设置一个acks，就是确认机制。我们可以设置参数为all，这样的话，当生产者发送消息到了分区之后，不仅仅只在leader分区保存确认，在follwer分区也会保存确认，只有当所有的副本都保存确认以后才算是成功发送了消息，所以，这样设置就很大程度了保证了消息不会在broker丢失&lt;/p&gt;
&lt;p&gt;第三个有可能是在消费者端丢失消息，kafka消费消息都是按照offset进行标记消费的，消费者默认是自动按期提交已经消费的偏移量，默认是每隔5s提交一次，如果出现重平衡的情况，可能会重复消费或丢失数据。我们一般都会禁用掉自动提价偏移量，改为手动提交，当消费成功以后再报告给broker消费的位置，这样就可以避免消息丢失和重复消费了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Kafka中消息的重复消费问题如何解决的&#34;&gt;&lt;a href=&#34;#面试官：Kafka中消息的重复消费问题如何解决的&#34; class=&#34;headerlink&#34; title=&#34;面试官：Kafka中消息的重复消费问题如何解决的&#34;&gt;&lt;/a&gt;面试官：Kafka中消息的重复消费问题如何解决的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;kafka消费消息都是按照offset进行标记消费的，消费者默认是自动按期提交已经消费的偏移量，默认是每隔5s提交一次，如果出现重平衡的情况，可能会重复消费或丢失数据。我们一般都会禁用掉自动提价偏移量，改为手动提交，当消费成功以后再报告给broker消费的位置，这样就可以避免消息丢失和重复消费了&lt;/p&gt;
&lt;p&gt;为了消息的幂等，我们也可以设置唯一主键来进行区分，或者是加锁，数据库的锁，或者是redis分布式锁，都能解决幂等的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Kafka是如何保证消费的顺序性&#34;&gt;&lt;a href=&#34;#面试官：Kafka是如何保证消费的顺序性&#34; class=&#34;headerlink&#34; title=&#34;面试官：Kafka是如何保证消费的顺序性&#34;&gt;&lt;/a&gt;面试官：Kafka是如何保证消费的顺序性&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;kafka默认存储和消费消息，是不能保证顺序性的，因为一个topic数据可能存储在不同的分区中，每个分区都有一个按照顺序的存储的偏移量，如果消费者关联了多个分区不能保证顺序性&lt;/p&gt;
&lt;p&gt;如果有这样的需求的话，我们是可以解决的，把消息都存储同一个分区下就行了，有两种方式都可以进行设置，第一个是发送消息时指定分区号，第二个是发送消息时按照相同的业务设置相同的key，因为默认情况下分区也是通过key的hashcode值来选择分区的，hash值如果一样的话，分区肯定也是一样的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Kafka的高可用机制有了解过嘛&#34;&gt;&lt;a href=&#34;#面试官：Kafka的高可用机制有了解过嘛&#34; class=&#34;headerlink&#34; title=&#34;面试官：Kafka的高可用机制有了解过嘛&#34;&gt;&lt;/a&gt;面试官：Kafka的高可用机制有了解过嘛&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，主要是有两个层面，第一个是集群，第二个是提供了复制机制&lt;/p&gt;
&lt;p&gt;kafka集群指的是由多个broker实例组成，即使某一台宕机，也不耽误其他broker继续对外提供服务&lt;/p&gt;
&lt;p&gt;复制机制是可以保证kafka的高可用的，一个topic有多个分区，每个分区有多个副本，有一个leader，其余的是follower，副本存储在不同的broker中；所有的分区副本的内容是都是相同的，如果leader发生故障时，会自动将其中一个follower提升为leader，保证了系统的容错性、高可用性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：解释一下复制机制中的ISR&#34;&gt;&lt;a href=&#34;#面试官：解释一下复制机制中的ISR&#34; class=&#34;headerlink&#34; title=&#34;面试官：解释一下复制机制中的ISR&#34;&gt;&lt;/a&gt;面试官：解释一下复制机制中的ISR&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;ISR的意思是in-sync replica，就是需要同步复制保存的follower&lt;/p&gt;
&lt;p&gt;其中分区副本有很多的follower，分为了两类，一个是ISR，与leader副本同步保存数据，另外一个普通的副本，是异步同步数据，当leader挂掉之后，会优先从ISR副本列表中选取一个作为leader，因为ISR是同步保存数据，数据更加的完整一些，所以优先选择ISR副本列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Kafka数据清理机制了解过嘛&#34;&gt;&lt;a href=&#34;#面试官：Kafka数据清理机制了解过嘛&#34; class=&#34;headerlink&#34; title=&#34;面试官：Kafka数据清理机制了解过嘛&#34;&gt;&lt;/a&gt;面试官：Kafka数据清理机制了解过嘛&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，了解过~~&lt;/p&gt;
&lt;p&gt;Kafka中topic的数据存储在分区上，分区如果文件过大会分段存储segment&lt;/p&gt;
&lt;p&gt;每个分段都在磁盘上以索引(xxxx.index)和日志文件(xxxx.log)的形式存储，这样分段的好处是，第一能够减少单个文件内容的大小，查找数据方便，第二方便kafka进行日志清理。&lt;/p&gt;
&lt;p&gt;在kafka中提供了两个日志的清理策略：&lt;/p&gt;
&lt;p&gt;第一，根据消息的保留时间，当消息保存的时间超过了指定的时间，就会触发清理，默认是168小时（ 7天）&lt;/p&gt;
&lt;p&gt;第二是根据topic存储的数据大小，当topic所占的日志文件大小大于一定的阈值，则开始删除最久的消息。这个默认是关闭的&lt;/p&gt;
&lt;p&gt;这两个策略都可以通过kafka的broker中的配置文件进行设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Kafka中实现高性能的设计有了解过嘛&#34;&gt;&lt;a href=&#34;#面试官：Kafka中实现高性能的设计有了解过嘛&#34; class=&#34;headerlink&#34; title=&#34;面试官：Kafka中实现高性能的设计有了解过嘛&#34;&gt;&lt;/a&gt;面试官：Kafka中实现高性能的设计有了解过嘛&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Kafka 高性能，是多方面协同的结果，包括宏观架构、分布式存储、ISR 数据同步、以及高效的利用磁盘、操作系统特性等。主要体现有这么几点：&lt;/p&gt;
&lt;p&gt;消息分区：不受单台服务器的限制，可以不受限的处理更多的数据&lt;/p&gt;
&lt;p&gt;顺序读写：磁盘顺序读写，提升读写效率&lt;/p&gt;
&lt;p&gt;页缓存：把磁盘中的数据缓存到内存中，把对磁盘的访问变为对内存的访问&lt;/p&gt;
&lt;p&gt;零拷贝：减少上下文切换及数据拷贝&lt;/p&gt;
&lt;p&gt;消息压缩：减少磁盘IO和网络IO&lt;/p&gt;
&lt;p&gt;分批发送：将消息打包批量发送，减少网络开销&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="微服务" scheme="https://anoxiahub.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/" />
        <updated>2023-08-11T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/</id>
        <title>微服务相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/"/>
        <content type="html">&lt;h3 id=&#34;面试官：Spring-Cloud-5大组件有哪些？&#34;&gt;&lt;a href=&#34;#面试官：Spring-Cloud-5大组件有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring Cloud 5大组件有哪些？&#34;&gt;&lt;/a&gt;面试官：Spring Cloud 5大组件有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早期我们一般认为的Spring Cloud五大组件是 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eureka   : 注册中心&lt;/li&gt;
&lt;li&gt;Ribbon  : 负载均衡&lt;/li&gt;
&lt;li&gt;Feign     : 远程调用&lt;/li&gt;
&lt;li&gt;Hystrix :  服务熔断&lt;/li&gt;
&lt;li&gt;Zuul&amp;#x2F;Gateway  : 网关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册中心&amp;#x2F;配置中心 Nacos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;负载均衡 Ribbon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务调用 Feign&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务保护 sentinel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务网关 Gateway&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：服务注册和发现是什么意思？Spring-Cloud-如何实现服务注册发现？&#34;&gt;&lt;a href=&#34;#面试官：服务注册和发现是什么意思？Spring-Cloud-如何实现服务注册发现？&#34; class=&#34;headerlink&#34; title=&#34;面试官：服务注册和发现是什么意思？Spring Cloud 如何实现服务注册发现？&#34;&gt;&lt;/a&gt;面试官：服务注册和发现是什么意思？Spring Cloud 如何实现服务注册发现？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我理解的是主要三块大功能，分别是服务注册 、服务发现、服务状态监控&lt;/p&gt;
&lt;p&gt;我们当时项目采用的eureka作为注册中心，这个也是spring cloud体系中的一个核心组件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务注册&lt;/strong&gt;：服务提供者需要把自己的信息注册到eureka，由eureka来保存这些信息，比如服务名称、ip、端口等等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务发现&lt;/strong&gt;：消费者向eureka拉取服务列表信息，如果服务提供者有集群，则消费者会利用负载均衡算法，选择一个发起调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务监控&lt;/strong&gt;：服务提供者会每隔30秒向eureka发送心跳，报告健康状态，如果eureka服务90秒没接收到心跳，从eureka中剔除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：我看你之前也用过nacos、你能说下nacos与eureka的区别？&#34;&gt;&lt;a href=&#34;#面试官：我看你之前也用过nacos、你能说下nacos与eureka的区别？&#34; class=&#34;headerlink&#34; title=&#34;面试官：我看你之前也用过nacos、你能说下nacos与eureka的区别？&#34;&gt;&lt;/a&gt;面试官：我看你之前也用过nacos、你能说下nacos与eureka的区别？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们当时xx项目就是采用的nacos作为注册中心，选择nacos还要一个重要原因就是它支持配置中心，不过nacos作为注册中心，也比eureka要方便好用一些，主要相同不同点在于几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共同点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nacos与eureka都支持服务注册和服务拉取，都支持服务提供者心跳方式做健康检测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nacos与Eureka的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;①Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式&lt;/p&gt;
&lt;p&gt;②临时实例心跳不正常会被剔除，非临时实例则不会被剔除&lt;/p&gt;
&lt;p&gt;③Nacos支持服务列表变更的消息推送模式，服务列表更新更及时&lt;/p&gt;
&lt;p&gt;④Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你们项目负载均衡如何实现的&#34;&gt;&lt;a href=&#34;#面试官：你们项目负载均衡如何实现的&#34; class=&#34;headerlink&#34; title=&#34;面试官：你们项目负载均衡如何实现的 ?&#34;&gt;&lt;/a&gt;面试官：你们项目负载均衡如何实现的 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是这样~~&lt;/p&gt;
&lt;p&gt;在服务调用过程中的负载均衡一般使用SpringCloud的Ribbon 组件实现  , Feign的底层已经自动集成了Ribbon  , 使用起来非常简单&lt;/p&gt;
&lt;p&gt;当发起远程调用时，ribbon先从注册中心拉取服务地址列表，然后按照一定的路由策略选择一个发起远程调用，一般的调用策略是轮询&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Ribbon负载均衡策略有哪些&#34;&gt;&lt;a href=&#34;#面试官：Ribbon负载均衡策略有哪些&#34; class=&#34;headerlink&#34; title=&#34;面试官：Ribbon负载均衡策略有哪些 ?&#34;&gt;&lt;/a&gt;面试官：Ribbon负载均衡策略有哪些 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我想想啊，有很多种，我记得几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RoundRobinRule：简单轮询服务列表来选择服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WeightedResponseTimeRule：按照权重来选择服务器，响应时间越长，权重越小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RandomRule：随机选择一个可用的服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZoneAvoidanceRule：区域敏感策略，以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询(默认)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如果想自定义负载均衡策略如何实现&#34;&gt;&lt;a href=&#34;#面试官：如果想自定义负载均衡策略如何实现&#34; class=&#34;headerlink&#34; title=&#34;面试官：如果想自定义负载均衡策略如何实现 ?&#34;&gt;&lt;/a&gt;面试官：如果想自定义负载均衡策略如何实现 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供了两种方式：&lt;/p&gt;
&lt;p&gt;1，创建类实现IRule接口，可以指定负载均衡策略，这个是全局的，对所有的远程调用都起作用&lt;/p&gt;
&lt;p&gt;2，在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略，只是对配置的这个服务生效远程调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是服务雪崩，怎么解决这个问题？&#34;&gt;&lt;a href=&#34;#面试官：什么是服务雪崩，怎么解决这个问题？&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是服务雪崩，怎么解决这个问题？&#34;&gt;&lt;/a&gt;面试官：什么是服务雪崩，怎么解决这个问题？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务雪崩是指一个服务失败，导致整条链路的服务都失败的情形，一般我们在项目解决的话就是两种方案，第一个是服务降级，第二个是服务熔断，如果流量太大的话，可以考虑限流&lt;/p&gt;
&lt;p&gt;服务降级：服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃，一般在实际开发中与feign接口整合，编写降级逻辑&lt;/p&gt;
&lt;p&gt;服务熔断：默认关闭，需要手动打开，如果检测到 10 秒内请求的失败率超过 50%，就触发熔断机制。之后每隔 5 秒重新尝试请求微服务，如果微服务不能响应，继续走熔断机制。如果微服务可达，则关闭熔断机制，恢复正常请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你们的微服务是怎么监控的？&#34;&gt;&lt;a href=&#34;#面试官：你们的微服务是怎么监控的？&#34; class=&#34;headerlink&#34; title=&#34;面试官：你们的微服务是怎么监控的？&#34;&gt;&lt;/a&gt;面试官：你们的微服务是怎么监控的？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们项目中采用的skywalking进行监控的&lt;/p&gt;
&lt;p&gt;1，skywalking主要可以监控接口、服务、物理实例的一些状态。特别是在压测的时候可以看到众多服务中哪些服务和接口比较慢，我们可以针对性的分析和优化。&lt;/p&gt;
&lt;p&gt;2，我们还在skywalking设置了告警规则，特别是在项目上线以后，如果报错，我们分别设置了可以给相关负责人发短信和发邮件，第一时间知道项目的bug情况，第一时间修复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你们项目中有没有做过限流-怎么做的&#34;&gt;&lt;a href=&#34;#面试官：你们项目中有没有做过限流-怎么做的&#34; class=&#34;headerlink&#34; title=&#34;面试官：你们项目中有没有做过限流 ? 怎么做的 ?&#34;&gt;&lt;/a&gt;面试官：你们项目中有没有做过限流 ? 怎么做的 ?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我当时做的xx项目，采用就是微服务的架构，因为xx因为，应该会有突发流量，最大QPS可以达到2000，但是服务支撑不住，我们项目都通过压测最多可以支撑1200QPS。因为我们平时的QPS也就不到100，为了解决这些突发流量，所以采用了限流。&lt;/p&gt;
&lt;p&gt;【版本1】&lt;/p&gt;
&lt;p&gt;我们当时采用的nginx限流操作，nginx使用的漏桶算法来实现过滤，让请求以固定的速率处理请求，可以应对突发流量，我们控制的速率是按照ip进行限流，限制的流量是每秒20&lt;/p&gt;
&lt;p&gt;【版本2】&lt;/p&gt;
&lt;p&gt;我们当时采用的是spring cloud gateway中支持局部过滤器RequestRateLimiter来做限流，使用的是令牌桶算法，可以根据ip或路径进行限流，可以设置每秒填充平均速率，和令牌桶总容量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：限流常见的算法有哪些呢？&#34;&gt;&lt;a href=&#34;#面试官：限流常见的算法有哪些呢？&#34; class=&#34;headerlink&#34; title=&#34;面试官：限流常见的算法有哪些呢？&#34;&gt;&lt;/a&gt;面试官：限流常见的算法有哪些呢？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比较常见的限流算法有漏桶算法和令牌桶算法&lt;/p&gt;
&lt;p&gt;漏桶算法是把请求存入到桶中，以固定速率从桶中流出，可以让我们的服务做到绝对的平均，起到很好的限流效果&lt;/p&gt;
&lt;p&gt;令牌桶算法在桶中存储的是令牌，按照一定的速率生成令牌，每个请求都要先申请令牌，申请到令牌以后才能正常请求，也可以起到很好的限流作用&lt;/p&gt;
&lt;p&gt;它们的区别是，漏桶和令牌桶都可以处理突发流量，其中漏桶可以做到绝对的平滑，令牌桶有可能会产生突发大量请求的情况，一般nginx限流采用的漏桶，spring cloud gateway中可以支持令牌桶算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是CAP理论？&#34;&gt;&lt;a href=&#34;#面试官：什么是CAP理论？&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是CAP理论？&#34;&gt;&lt;/a&gt;面试官：什么是CAP理论？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;CAP主要是在分布式项目下的一个理论。包含了三项，一致性、可用性、分区容错性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一致性(Consistency)是指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致(强一致性)，不能存在中间状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可用性(Availability) 是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分区容错性(Partition tolerance) 是指分布式系统在遇到任何网络分区故障时，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：为什么分布式系统中无法同时保证一致性和可用性？&#34;&gt;&lt;a href=&#34;#面试官：为什么分布式系统中无法同时保证一致性和可用性？&#34; class=&#34;headerlink&#34; title=&#34;面试官：为什么分布式系统中无法同时保证一致性和可用性？&#34;&gt;&lt;/a&gt;面试官：为什么分布式系统中无法同时保证一致性和可用性？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，是这样的~~&lt;/p&gt;
&lt;p&gt;首先一个前提，对于分布式系统而言，分区容错性是一个最基本的要求，因此基本上我们在设计分布式系统的时候只能从一致性（C）和可用性（A）之间进行取舍。&lt;/p&gt;
&lt;p&gt;如果保证了一致性（C）：对于节点N1和N2，当往N1里写数据时，N2上的操作必须被暂停，只有当N1同步数据到N2时才能对N2进行读写请求，在N2被暂停操作期间客户端提交的请求会收到失败或超时。显然，这与可用性是相悖的。&lt;/p&gt;
&lt;p&gt;如果保证了可用性（A）：那就不能暂停N2的读写操作，但同时N1在写数据的话，这就违背了一致性的要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是BASE理论？&#34;&gt;&lt;a href=&#34;#面试官：什么是BASE理论？&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是BASE理论？&#34;&gt;&lt;/a&gt;面试官：什么是BASE理论？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个也是CAP分布式系统设计理论&lt;/p&gt;
&lt;p&gt;BASE是CAP理论中AP方案的延伸，核心思想是即使无法做到强一致性（StrongConsistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。它的思想包含三方面：&lt;/p&gt;
&lt;p&gt;1、Basically Available（基本可用）：基本可用是指分布式系统在出现不可预知的故障的时候，允许损失部分可用性，但不等于系统不可用。&lt;/p&gt;
&lt;p&gt;2、Soft state（软状态）：即是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。&lt;/p&gt;
&lt;p&gt;3、Eventually consistent（最终一致性）：强调系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。其本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你们采用哪种分布式事务解决方案？&#34;&gt;&lt;a href=&#34;#面试官：你们采用哪种分布式事务解决方案？&#34; class=&#34;headerlink&#34; title=&#34;面试官：你们采用哪种分布式事务解决方案？&#34;&gt;&lt;/a&gt;面试官：你们采用哪种分布式事务解决方案？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们当时是xx项目，主要使用到的seata的at模式解决的分布式事务&lt;/p&gt;
&lt;p&gt;seata的AT模型分为两个阶段：&lt;/p&gt;
&lt;p&gt;1、阶段一RM的工作：① 注册分支事务  ② 记录undo-log（数据快照）③ 执行业务sql并提交 ④报告事务状态&lt;/p&gt;
&lt;p&gt;2、阶段二提交时RM的工作：删除undo-log即可&lt;/p&gt;
&lt;p&gt;3、阶段二回滚时RM的工作：根据undo-log恢复数据到更新前&lt;/p&gt;
&lt;p&gt;at模式牺牲了一致性，保证了可用性，不过，它保证的是最终一致性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：分布式服务的接口幂等性如何设计？&#34;&gt;&lt;a href=&#34;#面试官：分布式服务的接口幂等性如何设计？&#34; class=&#34;headerlink&#34; title=&#34;面试官：分布式服务的接口幂等性如何设计？&#34;&gt;&lt;/a&gt;面试官：分布式服务的接口幂等性如何设计？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我们当时有一个xx项目的下单操作，采用的token+redis实现的，流程是这样的&lt;/p&gt;
&lt;p&gt;第一次请求，也就是用户打开了商品详情页面，我们会发起一个请求，在后台生成一个唯一token存入redis，key就是用户的id，value就是这个token，同时把这个token返回前端&lt;/p&gt;
&lt;p&gt;第二次请求，当用户点击了下单操作会后，会携带之前的token，后台先到redis进行验证，如果存在token，可以执行业务，同时删除token；如果不存在，则直接返回，不处理业务，就保证了同一个token只处理一次业务，就保证了幂等性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：xxl-job路由策略有哪些？&#34;&gt;&lt;a href=&#34;#面试官：xxl-job路由策略有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：xxl-job路由策略有哪些？&#34;&gt;&lt;/a&gt;面试官：xxl-job路由策略有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;xxl-job提供了很多的路由策略，我们平时用的较多就是：轮询、故障转移、分片广播…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：xxl-job任务执行失败怎么解决？&#34;&gt;&lt;a href=&#34;#面试官：xxl-job任务执行失败怎么解决？&#34; class=&#34;headerlink&#34; title=&#34;面试官：xxl-job任务执行失败怎么解决？&#34;&gt;&lt;/a&gt;面试官：xxl-job任务执行失败怎么解决？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有这么几个操作&lt;/p&gt;
&lt;p&gt;第一：路由策略选择故障转移，优先使用健康的实例来执行任务&lt;/p&gt;
&lt;p&gt;第二，如果还有失败的，我们在创建任务时，可以设置重试次数&lt;/p&gt;
&lt;p&gt;第三，如果还有失败的，就可以查看日志或者配置邮件告警来通知相关负责人解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：如果有大数据量的任务同时都需要执行，怎么解决？&#34;&gt;&lt;a href=&#34;#面试官：如果有大数据量的任务同时都需要执行，怎么解决？&#34; class=&#34;headerlink&#34; title=&#34;面试官：如果有大数据量的任务同时都需要执行，怎么解决？&#34;&gt;&lt;/a&gt;面试官：如果有大数据量的任务同时都需要执行，怎么解决？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们会让部署多个实例，共同去执行这些批量的任务，其中任务的路由策略是分片广播&lt;/p&gt;
&lt;p&gt;在任务执行的代码中可以获取分片总数和当前分片，按照取模的方式分摊到各个实例执行就可以了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="微服务" scheme="https://anoxiahub.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/" />
        <updated>2023-08-10T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/Spring%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/</id>
        <title>Spring相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/Spring%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/"/>
        <content type="html">&lt;h3 id=&#34;面试官：Spring框架中的单例bean是线程安全的吗？&#34;&gt;&lt;a href=&#34;#面试官：Spring框架中的单例bean是线程安全的吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring框架中的单例bean是线程安全的吗？&#34;&gt;&lt;/a&gt;面试官：Spring框架中的单例bean是线程安全的吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;br&gt;嗯！&lt;/p&gt;
&lt;p&gt;不是线程安全的，是这样的&lt;/p&gt;
&lt;p&gt;当多用户同时请求一个服务时，容器会给每一个请求分配一个线程，这是多个线程会并发执行该请求对应的业务逻辑（成员方法），如果该处理逻辑中有对该单列状态的修改（体现为该单例的成员属性），则必须考虑线程同步问题。&lt;/p&gt;
&lt;p&gt;Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。&lt;/p&gt;
&lt;p&gt;比如：我们通常在项目中使用的Spring bean都是不可可变的状态(比如Service类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。&lt;/p&gt;
&lt;p&gt;如果你的bean有多种状态的话（比如 View Model对象），就需要自行保证线程安全。最浅显的解决办法就是将多态bean的作用由“&lt;strong&gt;singleton&lt;/strong&gt;”变更为“&lt;strong&gt;prototype&lt;/strong&gt;”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：什么是AOP&#34;&gt;&lt;a href=&#34;#面试官：什么是AOP&#34; class=&#34;headerlink&#34; title=&#34;面试官：什么是AOP&#34;&gt;&lt;/a&gt;面试官：什么是AOP&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;aop是面向切面编程，在spring中用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合，一般比如可以做为公共日志保存，事务处理等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：你们项目中有没有使用到AOP&#34;&gt;&lt;a href=&#34;#面试官：你们项目中有没有使用到AOP&#34; class=&#34;headerlink&#34; title=&#34;面试官：你们项目中有没有使用到AOP&#34;&gt;&lt;/a&gt;面试官：你们项目中有没有使用到AOP&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;我们当时在后台管理系统中，就是使用aop来记录了系统的操作日志&lt;/p&gt;
&lt;p&gt;主要思路是这样的，使用aop中的环绕通知+切点表达式，这个表达式就是要找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数据库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Spring中的事务是如何实现的&#34;&gt;&lt;a href=&#34;#面试官：Spring中的事务是如何实现的&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring中的事务是如何实现的&#34;&gt;&lt;/a&gt;面试官：Spring中的事务是如何实现的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;spring实现的事务本质就是aop完成，对方法前后进行拦截，在执行方法之前开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Spring中事务失效的场景有哪些&#34;&gt;&lt;a href=&#34;#面试官：Spring中事务失效的场景有哪些&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring中事务失效的场景有哪些&#34;&gt;&lt;/a&gt;面试官：Spring中事务失效的场景有哪些&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！这个在项目中之前遇到过，我想想啊&lt;/p&gt;
&lt;p&gt;第一个，如果方法上异常捕获处理，自己处理了异常，没有抛出，就会导致事务失效，所以一般处理了异常以后，别忘了跑出去就行了&lt;/p&gt;
&lt;p&gt;第二个，如果方法抛出检查异常，如果报错也会导致事务失效，最后在spring事务的注解上，就是@Transactional上配置rollbackFor属性为Exception，这样别管是什么异常，都会回滚事务&lt;/p&gt;
&lt;p&gt;第三，我之前还遇到过一个，如果方法上不是public修饰的，也会导致事务失效&lt;/p&gt;
&lt;p&gt;嗯，就能想起来那么多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Spring的bean的生命周期&#34;&gt;&lt;a href=&#34;#面试官：Spring的bean的生命周期&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring的bean的生命周期&#34;&gt;&lt;/a&gt;面试官：Spring的bean的生命周期&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！，这个步骤还是挺多的，我之前看过一些源码，它大概流程是这样的&lt;/p&gt;
&lt;p&gt;首先会通过一个非常重要的类，叫做BeanDefinition获取bean的定义信息，这里面就封装了bean的所有信息，比如，类的全路径，是否是延迟加载，是否是单例等等这些信息&lt;/p&gt;
&lt;p&gt;在创建bean的时候，第一步是调用构造函数实例化bean&lt;/p&gt;
&lt;p&gt;第二步是bean的依赖注入，比如一些set方法注入，像平时开发用的@Autowire都是这一步完成&lt;/p&gt;
&lt;p&gt;第三步是处理Aware接口，如果某一个bean实现了Aware接口就会重写方法执行&lt;/p&gt;
&lt;p&gt;第四步是bean的后置处理器BeanPostProcessor，这个是前置处理器&lt;/p&gt;
&lt;p&gt;第五步是初始化方法，比如实现了接口InitializingBean或者自定义了方法init-method标签或@PostContruct&lt;/p&gt;
&lt;p&gt;第六步是执行了bean的后置处理器BeanPostProcessor，主要是对bean进行增强，有可能在这里产生代理对象&lt;/p&gt;
&lt;p&gt;最后一步是销毁bean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Spring中的循环引用&#34;&gt;&lt;a href=&#34;#面试官：Spring中的循环引用&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring中的循环引用&#34;&gt;&lt;/a&gt;面试官：Spring中的循环引用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，好的，我来解释一下&lt;/p&gt;
&lt;p&gt;循环依赖：循环依赖其实就是循环引用,也就是两个或两个以上的bean互相持有对方,最终形成闭环。比如A依赖于B,B依赖于A&lt;/p&gt;
&lt;p&gt;循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖&lt;/p&gt;
&lt;p&gt;①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象&lt;/p&gt;
&lt;p&gt;②二级缓存：缓存早期的bean对象（生命周期还没走完）&lt;/p&gt;
&lt;p&gt;③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：那具体解决流程清楚吗？&#34;&gt;&lt;a href=&#34;#面试官：那具体解决流程清楚吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：那具体解决流程清楚吗？&#34;&gt;&lt;/a&gt;面试官：那具体解决流程清楚吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;第一，先实例A对象，同时会创建ObjectFactory对象存入三级缓存singletonFactories  &lt;/p&gt;
&lt;p&gt;第二，A在初始化的时候需要B对象，这个走B的创建的逻辑&lt;/p&gt;
&lt;p&gt;第三，B实例化完成，也会创建ObjectFactory对象存入三级缓存singletonFactories  &lt;/p&gt;
&lt;p&gt;第四，B需要注入A，通过三级缓存中获取ObjectFactory来生成一个A的对象同时存入二级缓存，这个是有两种情况，一个是可能是A的普通对象，另外一个是A的代理对象，都可以让ObjectFactory来生产对应的对象，这也是三级缓存的关键&lt;/p&gt;
&lt;p&gt;第五，B通过从通过二级缓存earlySingletonObjects  获得到A的对象后可以正常注入，B创建成功，存入一级缓存singletonObjects  &lt;/p&gt;
&lt;p&gt;第六，回到A对象初始化，因为B对象已经创建完成，则可以直接注入B，A创建成功存入一次缓存singletonObjects &lt;/p&gt;
&lt;p&gt;第七，二级缓存中的临时对象A清除 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：构造方法出现了循环依赖怎么解决？&#34;&gt;&lt;a href=&#34;#面试官：构造方法出现了循环依赖怎么解决？&#34; class=&#34;headerlink&#34; title=&#34;面试官：构造方法出现了循环依赖怎么解决？&#34;&gt;&lt;/a&gt;面试官：构造方法出现了循环依赖怎么解决？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入，可以使用@Lazy懒加载，什么时候需要对象再进行bean对象的创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：SpringMVC的执行流程知道嘛&#34;&gt;&lt;a href=&#34;#面试官：SpringMVC的执行流程知道嘛&#34; class=&#34;headerlink&#34; title=&#34;面试官：SpringMVC的执行流程知道嘛&#34;&gt;&lt;/a&gt;面试官：SpringMVC的执行流程知道嘛&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个知道的，它分了好多步骤&lt;/p&gt;
&lt;p&gt;1、用户发送出请求到前端控制器DispatcherServlet，这是一个调度中心&lt;/p&gt;
&lt;p&gt;2、DispatcherServlet收到请求调用HandlerMapping（处理器映射器）。&lt;/p&gt;
&lt;p&gt;3、HandlerMapping找到具体的处理器(可查找xml配置或注解配置)，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。&lt;/p&gt;
&lt;p&gt;4、DispatcherServlet调用HandlerAdapter（处理器适配器）。&lt;/p&gt;
&lt;p&gt;5、HandlerAdapter经过适配调用具体的处理器（Handler&amp;#x2F;Controller）。&lt;/p&gt;
&lt;p&gt;6、Controller执行完成返回ModelAndView对象。&lt;/p&gt;
&lt;p&gt;7、HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。&lt;/p&gt;
&lt;p&gt;8、DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）。&lt;/p&gt;
&lt;p&gt;9、ViewReslover解析后返回具体View（视图）。&lt;/p&gt;
&lt;p&gt;10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。&lt;/p&gt;
&lt;p&gt;11、DispatcherServlet响应用户。&lt;/p&gt;
&lt;p&gt;当然现在的开发，基本都是前后端分离的开发的，并没有视图这些，一般都是handler中使用Response直接结果返回&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Springboot自动配置原理&#34;&gt;&lt;a href=&#34;#面试官：Springboot自动配置原理&#34; class=&#34;headerlink&#34; title=&#34;面试官：Springboot自动配置原理&#34;&gt;&lt;/a&gt;面试官：Springboot自动配置原理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，好的，它是这样的。&lt;/p&gt;
&lt;p&gt;在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@SpringBootConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@EnableAutoConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@ComponentScan&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;是实现自动化配置的核心注解。 &lt;/p&gt;
&lt;p&gt;该注解通过&lt;code&gt;@Import&lt;/code&gt;注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的Jar包的的classpath路径下&lt;strong&gt;META-INF&amp;#x2F;spring.factories&lt;/strong&gt;文件中的所配置的类的全类名。 &lt;/p&gt;
&lt;p&gt;在这些配置类中所定义的Bean会根据条件注解所&lt;strong&gt;指定的条件来决定&lt;/strong&gt;是否需要将其导入到Spring容器中。&lt;/p&gt;
&lt;p&gt;一般条件判断会有像&lt;code&gt;@ConditionalOnClass&lt;/code&gt;这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Spring-的常见注解有哪些？&#34;&gt;&lt;a href=&#34;#面试官：Spring-的常见注解有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：Spring 的常见注解有哪些？&#34;&gt;&lt;/a&gt;面试官：Spring 的常见注解有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个就很多了&lt;/p&gt;
&lt;p&gt;第一类是：声明bean，有@Component、@Service、@Repository、@Controller&lt;/p&gt;
&lt;p&gt;第二类是：依赖注入相关的，有@Autowired、@Qualifier、@Resourse&lt;/p&gt;
&lt;p&gt;第三类是：设置作用域 @Scope&lt;/p&gt;
&lt;p&gt;第四类是：spring配置相关的，比如@Configuration，@ComponentScan 和 @Bean &lt;/p&gt;
&lt;p&gt;第五类是：跟aop相关做增强的注解  @Aspect，@Before，@After，@Around，@Pointcut&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：SpringMVC常见的注解有哪些？&#34;&gt;&lt;a href=&#34;#面试官：SpringMVC常见的注解有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：SpringMVC常见的注解有哪些？&#34;&gt;&lt;/a&gt;面试官：SpringMVC常见的注解有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个也很多的&lt;/p&gt;
&lt;p&gt;有@RequestMapping：用于映射请求路径；&lt;/p&gt;
&lt;p&gt;@RequestBody：注解实现接收http请求的json数据，将json转换为java对象；&lt;/p&gt;
&lt;p&gt;@RequestParam：指定请求参数的名称；&lt;/p&gt;
&lt;p&gt;@PathViriable：从请求路径下中获取请求参数(&amp;#x2F;user&amp;#x2F;{id})，传递给方法的形式参数；@ResponseBody：注解实现将controller方法返回对象转化为json对象响应给客户端。@RequestHeader：获取指定的请求头数据，还有像@PostMapping、@GetMapping这些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Springboot常见注解有哪些？&#34;&gt;&lt;a href=&#34;#面试官：Springboot常见注解有哪些？&#34; class=&#34;headerlink&#34; title=&#34;面试官：Springboot常见注解有哪些？&#34;&gt;&lt;/a&gt;面试官：Springboot常见注解有哪些？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~&lt;/p&gt;
&lt;p&gt;Spring Boot的核心注解是@SpringBootApplication , 他由几个注解组成 : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration： 组合了- @Configuration注解，实现配置文件的功能；&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项&lt;/li&gt;
&lt;li&gt;@ComponentScan：Spring组件扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：MyBatis执行流程&#34;&gt;&lt;a href=&#34;#面试官：MyBatis执行流程&#34; class=&#34;headerlink&#34; title=&#34;面试官：MyBatis执行流程&#34;&gt;&lt;/a&gt;面试官：MyBatis执行流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;好，这个知道的，不过步骤也很多&lt;/p&gt;
&lt;p&gt;①读取MyBatis配置文件：mybatis-config.xml加载运行环境和映射文件&lt;/p&gt;
&lt;p&gt;②构造会话工厂SqlSessionFactory，一个项目只需要一个，单例的，一般由spring进行管理&lt;/p&gt;
&lt;p&gt;③会话工厂创建SqlSession对象，这里面就含了执行SQL语句的所有方法&lt;/p&gt;
&lt;p&gt;④操作数据库的接口，Executor执行器，同时负责查询缓存的维护&lt;/p&gt;
&lt;p&gt;⑤Executor接口的执行方法中有一个MappedStatement类型的参数，封装了映射信息&lt;/p&gt;
&lt;p&gt;⑥输入参数映射&lt;/p&gt;
&lt;p&gt;⑦输出结果映射&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Mybatis是否支持延迟加载？&#34;&gt;&lt;a href=&#34;#面试官：Mybatis是否支持延迟加载？&#34; class=&#34;headerlink&#34; title=&#34;面试官：Mybatis是否支持延迟加载？&#34;&gt;&lt;/a&gt;面试官：Mybatis是否支持延迟加载？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;是支持的~&lt;/p&gt;
&lt;p&gt;延迟加载的意思是：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。&lt;/p&gt;
&lt;p&gt;Mybatis支持一对一关联对象和一对多关联集合对象的延迟加载&lt;/p&gt;
&lt;p&gt;在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled&amp;#x3D;true|false，默认是关闭的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：延迟加载的底层原理知道吗？&#34;&gt;&lt;a href=&#34;#面试官：延迟加载的底层原理知道吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：延迟加载的底层原理知道吗？&#34;&gt;&lt;/a&gt;面试官：延迟加载的底层原理知道吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，我想想啊&lt;/p&gt;
&lt;p&gt;延迟加载在底层主要使用的CGLIB动态代理完成的&lt;/p&gt;
&lt;p&gt;第一是，使用CGLIB创建目标对象的代理对象，这里的目标对象就是开启了延迟加载的mapper&lt;/p&gt;
&lt;p&gt;第二个是当调用目标方法时，进入拦截器invoke方法，发现目标方法是null值，再执行sql查询&lt;/p&gt;
&lt;p&gt;第三个是获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Mybatis的一级、二级缓存用过吗？&#34;&gt;&lt;a href=&#34;#面试官：Mybatis的一级、二级缓存用过吗？&#34; class=&#34;headerlink&#34; title=&#34;面试官：Mybatis的一级、二级缓存用过吗？&#34;&gt;&lt;/a&gt;面试官：Mybatis的一级、二级缓存用过吗？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯~~，用过的~&lt;/p&gt;
&lt;p&gt;mybatis的一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存&lt;/p&gt;
&lt;p&gt;关于二级缓存需要单独开启&lt;/p&gt;
&lt;p&gt;二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL session，默认也是采用 PerpetualCache，HashMap 存储。&lt;/p&gt;
&lt;p&gt;如果想要开启二级缓存需要在全局配置文件和映射文件中开启配置才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官：Mybatis的二级缓存什么时候会清理缓存中的数据&#34;&gt;&lt;a href=&#34;#面试官：Mybatis的二级缓存什么时候会清理缓存中的数据&#34; class=&#34;headerlink&#34; title=&#34;面试官：Mybatis的二级缓存什么时候会清理缓存中的数据&#34;&gt;&lt;/a&gt;面试官：Mybatis的二级缓存什么时候会清理缓存中的数据&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！！&lt;/p&gt;
&lt;p&gt;当某一个作用域(一级缓存 Session&amp;#x2F;二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有 select 中的缓存将被 clear。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员Java面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="Spring" scheme="https://anoxiahub.github.io/tags/Spring/" />
        <updated>2023-08-09T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/HTTP%E5%92%8CWebsocket%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</id>
        <title>HTTP和Websocket的前世今生</title>
        <link rel="alternate" href="https://anoxiahub.github.io/HTTP%E5%92%8CWebsocket%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
        <content type="html">&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/lin0yuan/Image/master/f4e0159841ab450d861dde9e8fb5ba0d.gif&#34; alt=&#34;csdn&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;📝个人博客：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl82MTk1NzI4OT90eXBlPWJsb2c=&#34;&gt;零元&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;相信大家都对HTTP协议比较熟悉，因为它是我们接触最多的一个协议。但Websocket跟它又有什么关系，有什么作用呢？这篇文章我们通过HTTP来引出Webscoket这个协议。&lt;/p&gt;
&lt;h1 id=&#34;一、关于HTTP&#34;&gt;&lt;a href=&#34;#一、关于HTTP&#34; class=&#34;headerlink&#34; title=&#34;一、关于HTTP&#34;&gt;&lt;/a&gt;一、关于HTTP&lt;/h1&gt;&lt;h2 id=&#34;1-HTTP请求&#34;&gt;&lt;a href=&#34;#1-HTTP请求&#34; class=&#34;headerlink&#34; title=&#34;1. HTTP请求&#34;&gt;&lt;/a&gt;1. HTTP请求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OSI七层架构：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/7e6e42704eff475e963c5c77cefe75d1.png&#34; alt=&#34;此处有图片&#34;&gt;&lt;br&gt;大家都知道，HTTP协议是基于TCP协议开发的一款应用层协议，它主要针对的就是网站的一些请求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;请求图：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/60a5da665ddf48be90383fa1192fabe1.png&#34; alt=&#34;此处有图片&#34;&gt;&lt;br&gt;像这种可以算的上HTTP最简单的请求了，客户端向服务器请求数据，此时服务器响应数据，根据客户端请求的数据来返回对应的信息，可以进行一些基本的获取信息、请求数据一类的请求。&lt;/p&gt;
&lt;p&gt;当然根据REST规范，还有POST请求、PUT请求、HEAD请求，这里就不一一列举了，大家有兴趣可以自己查一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因为HTTP这种协议只能客户端发送请求，服务器不能主动发送请求。大家看到这或许会有疑惑，为什么还要要求服务器主动推送呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;普通请求：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/43956a553b454c838785fbfc24722037.png&#34; alt=&#34;此处有图片&#34;&gt;普通请求结合Ajax代码示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;setInterval(function() &amp;#123;
  $.get(&amp;quot;/to/hong&amp;quot;, function(data, status) &amp;#123;
      console.log(data);
  &amp;#125;);
&amp;#125;, 10000);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大家看这个图就知道了，此时小明想向小红炫耀一下自家的猫多么厉害(或许这就是孩童的乐趣吧)，可是服务器并不能主动推送信息，小红永远也收不到，也就无法看到能后空翻的小猫了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;那么该如何解决这个问题呢？乐于助人的攻城狮想出了办法：可以让客户端频繁的去请求服务器不就行了，只要我请求的频率到一定程度，不就和服务器主动推送没区别了吗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-传统轮询&#34;&gt;&lt;a href=&#34;#2-传统轮询&#34; class=&#34;headerlink&#34; title=&#34;2. 传统轮询&#34;&gt;&lt;/a&gt;2. 传统轮询&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;轮询方式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/image-20230811104845648.png&#34; alt=&#34;image-20230811104845648&#34;&gt;&lt;/p&gt;
&lt;p&gt;传统轮询请求结合Ajax代码示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;function poll() &amp;#123;
  setTimeout(function() &amp;#123;
      $.get(&amp;quot;/path/to/server&amp;quot;, function(data, status) &amp;#123;
          console.log(data);
          // 发起下一次请求
          poll();
      &amp;#125;);
  &amp;#125;, 10000);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为HTTP请求是请求响应类型的，所以每次HTTP请求之后都会返回数据，即使没有信息，也会返回一个空值。这样对于聊天的话就会做很多无用的请求，让服务器遭受“凌迟之痛”，并且消耗大量带宽。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;小明也很苦恼，明明就发一个消息，为什么消耗这么多流量呢？刚充的花费就没了。乐于助人的攻城狮肯定不会眼睁睁的看着小明因为约会把自己的金钱全部掏空，于是就做了一个违背祖宗的决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-长轮询&#34;&gt;&lt;a href=&#34;#3-长轮询&#34; class=&#34;headerlink&#34; title=&#34;3. 长轮询&#34;&gt;&lt;/a&gt;3. 长轮询&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在上面的传统轮询中，巨量的请求都涌向服务器，占据大量网络资源。那么如何才能改进，避免大量资源的占用呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;长轮询意味着浏览器只需启动一个HTTP请求，其连接的服务器会“hold”住此次连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的HTTP请求,以此类推。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;轮询示例：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/635cd2a0ea404a0695cf91ce5fc85e2c.png&#34; alt=&#34;此处有图片&#34;&gt;跟上面的短轮询对比，从图片上就感觉到不是那么密密麻麻的了。网络也是如此，减少了大量不必要的请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轮询可能在以下3种情况时终止：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有新数据推送 。当服务器向浏览器推送信息后，应该主动结束程序运行从而让连接断开，这样浏览器才能及时收到数据。&lt;/li&gt;
&lt;li&gt;没有新数据推送 。应该设定一个最长时限，避免WEB服务器超时（Timeout），若一直没有新信息，服务器应主动向浏览器发送本次轮询无新信息的正常响应，并断开连接，这也被称为“心跳”信息。&lt;/li&gt;
&lt;li&gt;网络故障或异常 。由于网络故障等因素造成的请求超时或出错也可能导致轮询的意外中断，此时浏览器将收到错误信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这时候小明才长长叹拉口气，终于不会把自己的小金库花光了，还准备跟小红约会的时候用呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意：长轮询和长连接是有区别的。长连接是基于TCP的，在协议上的修改，而长轮询是编程挂起手动修改的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二、关于WebSocket&#34;&gt;&lt;a href=&#34;#二、关于WebSocket&#34; class=&#34;headerlink&#34; title=&#34;二、关于WebSocket&#34;&gt;&lt;/a&gt;二、关于WebSocket&lt;/h1&gt;&lt;p&gt;在上面你会发现，就算是HTTP的长轮询也是基于请求-应答的这种半双工通信模式，虽然可以双向的收发数据，但一个时刻只能一个方向有动作，传输效率低。最终要的一点就是，它是一种被动的通信模式，服务器只能被动的响应客户端请求，无法主动发送数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做人不能总是主动，你越主动就越廉价。当然攻城狮也明白这个道理，为了让小明的爱情更加美好，就开始想办法做一个全双工的通信模型，不用像HTTP一样回合制类型那么客套了。于是，服务器就可以变得更加主动，一旦服务器有新的数据，就可以推送给小明，不需要再轮询了，通讯效率也变高了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-WebSocket基础&#34;&gt;&lt;a href=&#34;#1-WebSocket基础&#34; class=&#34;headerlink&#34; title=&#34;1.WebSocket基础&#34;&gt;&lt;/a&gt;1.WebSocket基础&lt;/h2&gt;&lt;p&gt;WebSocket采用了二进制帧结构，语法、语义跟HTTP完全不兼容，但现在的龙头老大还是HTTP，于是就尽量的往HTTP靠拢。&lt;/p&gt;
&lt;p&gt;服务发现方面，WebSocket没有使用TCP的”IP地址+端口号”，而是沿用了HTTP的URL格式，但开头协议名不是http，而是ws和wss，默认端口也选择了80和443。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;ws://www.baidu.com:8080/server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这便是websocket的请求路径，唯一不同的就是协议名&lt;/p&gt;
&lt;h2 id=&#34;2-WebSocket请求流程&#34;&gt;&lt;a href=&#34;#2-WebSocket请求流程&#34; class=&#34;headerlink&#34; title=&#34;2. WebSocket请求流程&#34;&gt;&lt;/a&gt;2. WebSocket请求流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作为一个新星协议，它是如何建立连接的呢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建立连接：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/20210306165527435.png&#34;&gt;从上面这个图可以看出来，Websocket竟然和HTTP有关系，最上面的是HTTP1.1版本，使用的GET请求，其中请求头一个字段很重要Upgrade，看这个意思大家应该都知道，是升级的意思。这个请求就是使用HTTP请求向服务器传达一个信息，我要开始转换为WebSocket协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果用啦HTTP请求那肯定会有一个响应，因为HTTP就是请求应答模型的，当然这次也肯定不例外。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;连接响应：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/20210306170713531.png&#34;&gt;&lt;br&gt;上面这个就是服务端产生的应答，告诉客户端，已经转换成功，以后我们就可以用Websocket交流信息了(HTTP：就没人管我的死活吗？T﹏T)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;那么websocket是如何工作的呢？&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/5caa193a74d44eefa72cac2c9a930a79.png&#34; alt=&#34;此处有图片&#34;&gt;&lt;br&gt;首先就是上面提到的建立连接，建立连接成功之后，就开始进行全双工通信，这时服务端和客户端就可以自由发送请求了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;websocket聊天示例:&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://anoxia-picgo.oss-cn-beijing.aliyuncs.com/758c808bfab64e8390fc882e4494c92d.png&#34; alt=&#34;此处有图片&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小明：程序猿太厉害了吧，我以后也要成为一名程序猿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-Websocket总结&#34;&gt;&lt;a href=&#34;#3-Websocket总结&#34; class=&#34;headerlink&#34; title=&#34;3. Websocket总结&#34;&gt;&lt;/a&gt;3. Websocket总结&lt;/h2&gt;&lt;p&gt;WebSocket 是一种基于 TCP 协议的通信协议，它提供了全双工的实时通信能力，使服务器和客户端之间可以进行双向的、实时的数据传输。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下是 WebSocket 的一些重要特点和用法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;双向通信：WebSocket 允许服务器和客户端之间进行双向通信，无需依赖于客户端发起请求。服务器可以主动向客户端推送消息或数据，而不需要等待客户端发送请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实时性：WebSocket 提供了低延迟的实时通信能力，适用于需要及时推送数据的场景，如即时聊天、实时消息更新等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;长连接：与传统的 HTTP 请求-响应模式不同，WebSocket 在握手阶段建立连接后，连接会保持打开，双方可以长时间保持通信状态，避免了频繁建立和关闭连接的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二进制支持：WebSocket 不仅可以传输文本数据，还支持传输二进制数据，这使得它能够处理多媒体数据、文件传输等更复杂的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适用于 Web 应用和移动应用：WebSocket 可以被广泛应用于 Web 应用和移动应用中，为实时通信提供了强大的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用 WebSocket 进行通信时，开发者可以借助相应的 WebSocket 客户端库或者浏览器提供的 WebSocket API 来实现与服务器的连接和数据传输。同时，服务器端也需要支持 WebSocket 协议来处理客户端的连接和消息。&lt;/p&gt;
&lt;h1 id=&#34;三、总结&#34;&gt;&lt;a href=&#34;#三、总结&#34; class=&#34;headerlink&#34; title=&#34;三、总结&#34;&gt;&lt;/a&gt;三、总结&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;关于HTTP请求和WebSocket的对比：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;连接方式：HTTP 是一种无状态的请求-响应协议，每次请求都需要重新建立连接。而 WebSocket 则是一种全双工通信协议，通过一次握手后，客户端和服务器之间可以保持长时间的连接，实现双向通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通信效率：由于 HTTP 协议的特性，每次请求-响应的过程会带来较大的开销。而 WebSocket 的长连接可以减少频繁的握手和头部信息传输，从而提高通信效率，特别适合实时性要求高的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据格式：HTTP 使用文本形式的请求和响应，通常以 JSON 或 XML 格式进行数据传输。而 WebSocket 可以传输二进制数据，可以更高效地处理多媒体数据或其他复杂的格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持性：WebSocket 是一种相对较新的协议，不是所有的浏览器和服务器都完全支持它。而 HTTP 是通用的协议，几乎所有的浏览器和服务器都能良好支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上所述，WebSocket 相对于 HTTP 具有更低的通信延迟、更高的效率和更强大的功能，特别适用于实时通信、推送和实时更新的场景。但在一些简单的请求-响应交互中，仍然可以使用 HTTP。选择使用哪种协议取决于具体的需求和场景。&lt;/p&gt;
</content>
        <category term="计算机基础" scheme="https://anoxiahub.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/" />
        <updated>2023-08-08T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/redis/%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</id>
        <title>关于缓存读写一致问题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/redis/%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;📝个人博客：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl82MTk1NzI4OT90eXBlPWJsb2c=&#34;&gt;零元&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在项目使用 Redis 过程中，当数据更新时，我们要保证缓存和数据库的一致性，否则会导致很多脏数据出现。此时我们就要思考如何去进行数据更新。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;一-普通删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-普通删除&#34;&gt;#&lt;/a&gt; 一、普通删除&lt;/h2&gt;
&lt;p&gt;在数据更新过程中，大家无非使用两种方法进行缓存和数据库的更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先删除缓存，再更新数据库&lt;/li&gt;
&lt;li&gt;先更新数据库，再更新缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那这两种方法究竟有什么不同呢？&lt;/p&gt;
&lt;h3 id=&#34;1-先删除缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-先删除缓存&#34;&gt;#&lt;/a&gt; 1. 先删除缓存&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/08/08/pPVTSbR.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：此时缓存有了旧数据，在下次修改此数据之前，所有请求获取的都是旧数据，导致读写不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-后删除缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-后删除缓存&#34;&gt;#&lt;/a&gt; 2. 后删除缓存&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/08/08/pPVoxKJ.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题 1：在小明修改数据库到删除缓存这段时间，所有请求都是旧数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题 2：如果缓存删除失败，后续所有请求都是旧数据 (这个问题开启事务的话，就可以解决)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-双删策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-双删策略&#34;&gt;#&lt;/a&gt; 二、双删策略&lt;/h2&gt;
&lt;p&gt;在普通删除策略中，大家会发现后删缓存策略是比较好的一种，但还是存在一点问题，所以提出了双删策略&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于这个地方我是存在疑问的，因为我认为双删并不会比后删缓存策略更好，反而增加了一次数据库查询的操作。但有的博客却提了这个策略，我就在这里提一下，大家可以在评论进行交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-普通双删&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-普通双删&#34;&gt;#&lt;/a&gt; 1. 普通双删&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/08/08/pPVT9V1.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：因为线程调度一些问题导致查询后写入缓存停止，会导致旧缓存依旧存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-延迟双删&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-延迟双删&#34;&gt;#&lt;/a&gt; 2. 延迟双删&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/08/08/pPVTCUx.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;br /&gt;
这样的话看似把普通双删的问题给解决了，但并没有完全解决，反而引发新的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：延时时长问题，时间太长导致性能下降，时间太短又会跟普通双删一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三-读写锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-读写锁&#34;&gt;#&lt;/a&gt; 三、读写锁&lt;/h2&gt;
&lt;p&gt;读写锁根据字面意思就知道是加锁，因此效率肯定比不加锁效率低，但是可以完全避免旧数据读取的发生。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读写锁是读读共享，读写和写写互斥的&lt;br /&gt;
&lt;img data-src=&#34;https://s1.ax1x.com/2023/08/08/pPVozr9.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四-异步通知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-异步通知&#34;&gt;#&lt;/a&gt; 四、异步通知&lt;/h2&gt;
&lt;h3 id=&#34;1-消息中间件异步通知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-消息中间件异步通知&#34;&gt;#&lt;/a&gt; 1. 消息中间件异步通知&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s1.ax1x.com/2023/08/08/pPVojv4.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于这个博主认为是把延迟双删的延迟给优化了，不再占用本线程的时间，只不过部分请求会导致旧数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2canal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2canal&#34;&gt;#&lt;/a&gt; 2.Canal&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 Canal，大家可以看这篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2Fvd2VpeGlvbmcvcC8xMTgyNDQyMy5odG1s&#34;&gt;Canal 原理架构应用场景&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Canal 是一个开源的数据库数据增量订阅和消费组件，用于实时捕获数据库的变更并将其传递给其他系统。具体而言，Canal 主要用于解决数据库之间的数据同步和实时数据分析需求。&lt;br /&gt;
Canal 支持对 MySQL、Oracle 等主流数据库进行增量数据订阅和消费。它通过解析数据库的日志（如 MySQL 的 binlog 或 Oracle 的 redo log），实时捕获数据库的变更操作，然后将变更数据以事件的形式发送给订阅者。可以将这些变更数据用于数据同步、实时数据仓库、搜索引擎索引更新、缓存更新等应用场景。&lt;br /&gt;
Canal 的主要特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;. 数据库无侵入：Canal 通过解析数据库日志来捕获数据变更，不需要对数据库进行任何修改，不会对数据库的性能产生影响。&lt;/li&gt;
&lt;li&gt;实时的增量数据：Canal 能够几乎实时地捕获到数据库的变更操作，并以事件的形式进行传递，保证了数据的实时性。&lt;/li&gt;
&lt;li&gt;灵活的订阅和过滤：Canal 支持基于数据库、表、列级别的订阅和过滤，可以按需选择需要同步的数据，减少数据传输和处理的压力。&lt;/li&gt;
&lt;li&gt;多种协议支持：Canal 支持多种数据传输协议，如基于 TCP 的简单文本协议、Kafka、RocketMQ 等，可以根据具体需求选择适合的协议进行数据传输。&lt;/li&gt;
&lt;li&gt;高可用和容错：Canal 支持多节点部署，通过主备模式或者集群模式来保证高可用性和容错性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;五-总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-总结&#34;&gt;#&lt;/a&gt; 五。总结&lt;/h2&gt;
&lt;p&gt;总体来说这几种方式各有优缺点，不过现在主要用的就是普通删除中的后删缓存的方法，如果一致性要求比较高的话，可以用读写锁的方式，如果没有那么强的一致性要求，可以使用后删缓存或者异步通知的方式。&lt;/p&gt;
</content>
        <category term="Redis" scheme="https://anoxiahub.github.io/categories/redis/" />
        <category term="Redis" scheme="https://anoxiahub.github.io/tags/Redis/" />
        <updated>2023-08-07T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/project/bug%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
        <title>项目常见问题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/project/bug%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
        <content type="html">&lt;h3 id=&#34;maven问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven问题&#34;&gt;#&lt;/a&gt; Maven 问题&lt;/h3&gt;
&lt;h4 id=&#34;maven右侧出现root字样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven右侧出现root字样&#34;&gt;#&lt;/a&gt; maven 右侧出现 root 字样&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题原因：由于父工程未导入该子模块，所以 maven 认为该模块为根模块.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;modules&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;module&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 此处放置该子模块 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;modules&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java问题&#34;&gt;#&lt;/a&gt; JAVA 问题&lt;/h3&gt;
&lt;h4 id=&#34;使用排除注解所遇问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用排除注解所遇问题&#34;&gt;#&lt;/a&gt; 使用排除注解所遇问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题代码:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;IllegalStateException&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;The&lt;/span&gt; following classes could not be excluded because they are not auto&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;configuration classes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xxxxxxxxxx6 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;private &lt;span class=&#34;token class-name&#34;&gt;LocalDateTime&lt;/span&gt; createTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;​&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setCreateTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; createTime&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LocalDateTime&lt;/span&gt; localDateTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; createTime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toInstant&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;atZone&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ZoneId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;systemDefault&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toLocalDateTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;createTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localDateTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;java&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决办法:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;exclude &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;DataSourceAutoConfiguration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看一下类是否写错了，修改即可.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mapperscan无法注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mapperscan无法注入&#34;&gt;#&lt;/a&gt; mapperscan 无法注入&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述：在代码界面，红色警告（启动程序并无异常）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题原因：mapper 类是使用的 mybatis 生成的，spring 无法检测出，但运行没有问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁止红色警告（不建议，因为别的地方如果自动装配出问题无法及时发现）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 mapper 类加入 @Mapper 注解（mybatis 自带注解，没导入 mybatis 的话，要在启动类加入 @mapperscan）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 mapper 类加入 @Repository 注解跟 mapperscan 结合（spring 自带注解）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nacos异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nacos异常&#34;&gt;#&lt;/a&gt; nacos 异常&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Failed&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;start&lt;/span&gt; bean &#39;nacosWatch&#39;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; nested exception is &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ErrCode&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;400&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题原因：pom 文件导入的 nacos 版本和 springboot 版本不兼容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决办法：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNzM1Mzky&#34;&gt;点击查看对应版本&lt;/span&gt;，重新导入即可对应版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="项目总结" scheme="https://anoxiahub.github.io/categories/project/" />
        <category term="Mysql" scheme="https://anoxiahub.github.io/tags/Mysql/" />
        <category term="bug" scheme="https://anoxiahub.github.io/tags/bug/" />
        <updated>2023-08-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/project/Mysql%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</id>
        <title>连接数据库遇到问题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/project/Mysql%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
        <content type="html">&lt;h3 id=&#34;1-时区转换问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-时区转换问题&#34;&gt;#&lt;/a&gt; 1. 时区转换问题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;相信大多数人都遇见过数据库时间提取到 Java 对象之后，发生时间不一致的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连接数据库的时候若不设置，就会引发时区转换的问题，其原因是因为:&lt;br /&gt;
&lt;mark&gt; 咱们所在时区为东八区，而默认时区为 0 区，差距八个小时，所以每次在与数据库交互时就会发生八小时的误差，&lt;/mark&gt;&lt;br /&gt;
 若要解决此问题，就要在连接数据库时设置配置:&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;jdbc&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//localhost&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;3306/friend&lt;span class=&#34;token punctuation&#34;&gt;?&lt;/span&gt;useSSL=false&lt;span class=&#34;token important&#34;&gt;&amp;amp;serverTimezone=Asia/Shanghai&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&amp;amp; 后面便是设置的时区，设置之后在与 mysql 交互的时候就不会发生时区的问题了。&lt;/p&gt;
&lt;h3 id=&#34;2数据库字段创建时间和修改时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2数据库字段创建时间和修改时间&#34;&gt;#&lt;/a&gt; 2. 数据库字段创建时间和修改时间&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;很多的数据库表都需要有创建时间和修改时间，此时就会引发许多问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是在 Java 类中自己设置时间过于麻烦，此时便可以在数据库建表的时候设置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt; create_time   timestamp default CURRENT_TIMESTAMP not null comment &#39;创建时间&#39;,
 update_time   timestamp default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#39;修改时间&#39;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建表的时候进行以上的设置便能在插入字段和修改字段的时候，数据库自动修改时间&lt;/p&gt;
&lt;h3 id=&#34;3数据库时间转换问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3数据库时间转换问题&#34;&gt;#&lt;/a&gt; 3. 数据库时间转换问题&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库的 timestamp 时间为时间戳，如果转换到 Java 里面就会遇见一些问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若是 Java 字段直接用 date 数据接收的话也可以，但是和前端交互的时候就会有格式问题，date 的格式直接发送给前端的话，用户看的话不是特别方便，如果每次发送给前端都要转换就显得有些麻烦&lt;br /&gt;
此时可以在 pojo 类中设置为 localdatetime 类型，修改一下 set 代码，便可成功接收.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LocalDateTime&lt;/span&gt; createTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setCreateTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt; createTime&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;LocalDateTime&lt;/span&gt; localDateTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; createTime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toInstant&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;atZone&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ZoneId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;systemDefault&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toLocalDateTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;createTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localDateTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="项目总结" scheme="https://anoxiahub.github.io/categories/project/" />
        <category term="Mysql" scheme="https://anoxiahub.github.io/tags/Mysql/" />
        <category term="bug" scheme="https://anoxiahub.github.io/tags/bug/" />
        <updated>2023-08-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/</id>
        <title>Mysql相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/"/>
        <content type="html">&lt;h3 id=&#34;面试官mysql中如何定位慢查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官mysql中如何定位慢查询&#34;&gt;#&lt;/a&gt; 面试官：MySQL 中，如何定位慢查询？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯～，我们当时做压测的时候有的接口非常的慢，接口的响应时间超过了 2 秒以上，因为我们当时的系统部署了运维的监控系统 Skywalking ，在展示的报表中可以看到是哪一个接口比较慢，并且可以分析这个接口哪部分比较慢，这里可以看到 SQL 的具体的执行时间，所以可以定位是哪个 sql 出了问题&lt;/p&gt;
&lt;p&gt;如果，项目中没有这种运维的监控系统，其实在 MySQL 中也提供了慢日志查询的功能，可以在 MySQL 的系统配置文件中开启这个慢日志的功能，并且也可以设置 SQL 执行超过多少时间来记录到一个日志文件中，我记得上一个项目配置的是 2 秒，只要 SQL 执行的时间超过了 2 秒就会记录到日志文件中，我们就可以在日志文件找到执行比较慢的 SQL 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官那这个sql语句执行很慢-如何分析呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官那这个sql语句执行很慢-如何分析呢&#34;&gt;#&lt;/a&gt; 面试官：那这个 SQL 语句执行很慢，如何分析呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：如果一条 sql 执行很慢的话，我们通常会使用 mysql 自动的执行计划 explain 来去查看这条 sql 的执行情况，比如在这里面可以通过 key 和 key_len 检查是否命中了索引，如果本身已经添加了索引，也可以判断索引是否有失效的情况，第二个，可以通过 type 字段查看 sql 是否有进一步的优化空间，是否存在全索引扫描或全盘扫描，第三个可以通过 extra 建议来判断，是否出现了回表的情况，如果出现了，可以尝试添加索引或修改返回字段来修复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官了解过索引吗什么是索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官了解过索引吗什么是索引&#34;&gt;#&lt;/a&gt; 面试官：了解过索引吗？（什么是索引）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，索引在项目中还是比较常见的，它是帮助 MySQL 高效获取数据的数据结构，主要是用来提高数据检索的效率，降低数据库的 IO 成本，同时通过索引列对数据进行排序，降低数据排序的成本，也能降低了 CPU 的消耗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官索引的底层数据结构了解过嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官索引的底层数据结构了解过嘛&#34;&gt;#&lt;/a&gt; 面试官：索引的底层数据结构了解过嘛？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：MySQL 的默认的存储引擎 InnoDB 采用的 B + 树的数据结构来存储索引，选择 B + 树的主要的原因是：第一阶数更多，路径更短，第二个磁盘读写代价 B + 树更低，非叶子节点只存储指针，叶子阶段存储数据，第三是 B + 树便于扫库和区间查询，叶子节点是一个双向链表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官b树和b树的区别是什么呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官b树和b树的区别是什么呢&#34;&gt;#&lt;/a&gt; 面试官：B 树和 B + 树的区别是什么呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：第一：在 B 树中，非叶子节点和叶子节点都会存放数据，而 B + 树的所有的数据都会出现在叶子节点，在查询的时候，B + 树查找效率更加稳定&lt;/p&gt;
&lt;p&gt;第二：在进行范围查询的时候，B + 树效率更高，因为 B + 树都在叶子节点存储，并且叶子节点是一个双向链表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官什么是聚簇索引什么是非聚簇索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官什么是聚簇索引什么是非聚簇索引&#34;&gt;#&lt;/a&gt; 面试官：什么是聚簇索引什么是非聚簇索引？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;好的～，聚簇索引主要是指数据与索引放到一块，B + 树的叶子节点保存了整行数据，有且只有一个，一般情况下主键在作为聚簇索引的&lt;/p&gt;
&lt;p&gt;非聚簇索引值的是数据与索引分开存储，B + 树的叶子节点保存对应的主键，可以有多个，一般我们自己定义的索引都是非聚簇索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官知道什么是回表查询嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官知道什么是回表查询嘛&#34;&gt;#&lt;/a&gt; 面试官：知道什么是回表查询嘛？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，其实跟刚才介绍的聚簇索引和非聚簇索引是有关系的，回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;备注&lt;/strong&gt;：如果面试官直接问回表，则需要先介绍聚簇索引和非聚簇索引】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官知道什么叫覆盖索引嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官知道什么叫覆盖索引嘛&#34;&gt;#&lt;/a&gt; 面试官：知道什么叫覆盖索引嘛？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯～，清楚的&lt;/p&gt;
&lt;p&gt;覆盖索引是指 select 查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用 id 查询，它会直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。&lt;/p&gt;
&lt;p&gt;如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用 select *，尽量在返回的列中都包含添加索引的字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官mysql超大分页怎么处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官mysql超大分页怎么处理&#34;&gt;#&lt;/a&gt; 面试官：MYSQL 超大分页怎么处理？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，超大分页一般都是在数据量比较大时，我们使用了 limit 分页查询，并且需要对数据进行排序，这个时候效率就很低，我们可以采用覆盖索引和子查询来解决&lt;/p&gt;
&lt;p&gt;先分页查询数据的 id 字段，确定了 id 之后，再用子查询来过滤，只查询这个 id 列表中的数据就可以了&lt;/p&gt;
&lt;p&gt;因为查询 id 的时候，走的覆盖索引，所以效率可以提升很多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官索引创建原则有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官索引创建原则有哪些&#34;&gt;#&lt;/a&gt; 面试官：索引创建原则有哪些？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，这个情况有很多，不过都有一个大前提，就是表中的数据要超过 10 万以上，我们才会创建索引，并且添加索引的字段是查询比较频繁的字段，一般也是像作为查询条件，排序字段或分组的字段这些。&lt;/p&gt;
&lt;p&gt;还有就是，我们通常创建索引的时候都是使用复合索引来创建，一条 sql 的返回值，尽量使用覆盖索引，如果字段的区分度不高的话，我们也会把它放在组合索引后面的字段。&lt;/p&gt;
&lt;p&gt;如果某一个字段的内容较长，我们会考虑使用前缀索引来使用，当然并不是所有的字段都要添加索引，这个索引的数量也要控制，因为添加索引也会导致新增改的速度变慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官什么情况下索引会失效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官什么情况下索引会失效&#34;&gt;#&lt;/a&gt; 面试官：什么情况下索引会失效？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，这个情况比较多，我说一些自己的经验，以前遇到过的&lt;/p&gt;
&lt;p&gt;比如，索引在使用的时候没有遵循最左匹配法则，第二个是，模糊查询，如果 % 号在前面也会导致索引失效。如果在添加索引的字段上进行了运算操作或者类型转换也都会导致索引失效。&lt;/p&gt;
&lt;p&gt;我们之前还遇到过一个就是，如果使用了复合索引，中间使用了范围查询，右边的条件索引也会失效&lt;/p&gt;
&lt;p&gt;所以，通常情况下，想要判断出这条 sql 是否有索引失效的情况，可以使用 explain 执行计划来分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官sql的优化的经验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官sql的优化的经验&#34;&gt;#&lt;/a&gt; 面试官：sql 的优化的经验&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，这个在项目还是挺常见的，当然如果直说 sql 优化的话，我们会从这几方面考虑，比如&lt;/p&gt;
&lt;p&gt;建表的时候、使用索引、sql 语句的编写、主从复制，读写分离，还有一个是如果量比较大的话，可以考虑分库分表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官创建表的时候你们是如何优化的呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官创建表的时候你们是如何优化的呢&#34;&gt;#&lt;/a&gt; 面试官：创建表的时候，你们是如何优化的呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：这个我们主要参考的阿里出的那个开发手册《嵩山版》，就比如，在定义字段的时候需要结合字段的内容来选择合适的类型，如果是数值的话，像 tinyint、int 、bigint 这些类型，要根据实际情况选择。如果是字符串类型，也是结合存储的内容来选择 char 和 varchar 或者 text 类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官那在使用索引的时候是如何优化呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官那在使用索引的时候是如何优化呢&#34;&gt;#&lt;/a&gt; 面试官：那在使用索引的时候，是如何优化呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：【参考索引创建原则    进行描述】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官你平时对sql语句做了哪些优化呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官你平时对sql语句做了哪些优化呢&#34;&gt;#&lt;/a&gt; 面试官：你平时对 sql 语句做了哪些优化呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，这个也有很多，比如 SELECT 语句务必指明字段名称，不要直接使用 select * ，还有就是要注意 SQL 语句避免造成索引失效的写法；如果是聚合查询，尽量用 union all 代替 union ，union 会多一次过滤，效率比较低；如果是表关联的话，尽量使用 innerjoin ，不要使用用 left join right join，如必须使用 一定要以小表为驱动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官事务的特性是什么可以详细说一下吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官事务的特性是什么可以详细说一下吗&#34;&gt;#&lt;/a&gt; 面试官：事务的特性是什么？可以详细说一下吗？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，这个比较清楚，ACID，分别指的是：原子性、一致性、隔离性、持久性；我举个例子：&lt;/p&gt;
&lt;p&gt;A 向 B 转账 500，转账成功，A 扣除 500 元，B 增加 500 元，原子操作体现在要么都成功，要么都失败&lt;/p&gt;
&lt;p&gt;在转账的过程中，数据要一致，A 扣除了 500，B 必须增加 500&lt;/p&gt;
&lt;p&gt;在转账的过程中，隔离性体现在 A 像 B 转账，不能受其他事务干扰&lt;/p&gt;
&lt;p&gt;在转账的过程中，持久性体现在事务提交后，要把数据持久化（可以说是落盘操作）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官并发事务带来哪些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官并发事务带来哪些问题&#34;&gt;#&lt;/a&gt; 面试官：并发事务带来哪些问题？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;我们在项目开发中，多个事务并发进行是经常发生的，并发也是必然的，有可能导致一些问题&lt;/p&gt;
&lt;p&gt;第一是脏读， 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是 “脏数据”，依据 “脏数据” 所做的操作可能是不正确的。&lt;/p&gt;
&lt;p&gt;第二是不可重复读：比如在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。&lt;/p&gt;
&lt;p&gt;第三是幻读（Phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官怎么解决这些问题呢mysql的默认隔离级别是&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官怎么解决这些问题呢mysql的默认隔离级别是&#34;&gt;#&lt;/a&gt; 面试官：怎么解决这些问题呢？MySQL 的默认隔离级别是？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：解决方案是对事务进行隔离&lt;/p&gt;
&lt;p&gt;MySQL 支持四种隔离级别，分别有：&lt;/p&gt;
&lt;p&gt;第一个是，未提交读（read uncommitted）它解决不了刚才提出的所有问题，一般项目中也不用这个。第二个是读已提交（read committed）它能解决脏读的问题的，但是解决不了不可重复读和幻读。第三个是可重复读（repeatable read）它能解决脏读和不可重复读，但是解决不了幻读，这个也是 mysql 默认的隔离级别。第四个是串行化（serializable）它可以解决刚才提出来的所有问题，但是由于让是事务串行执行的，性能比较低。所以，我们一般使用的都是 mysql 默认的隔离级别：可重复读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官undo-log和redo-log的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官undo-log和redo-log的区别&#34;&gt;#&lt;/a&gt; 面试官：undo log 和 redo log 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：好的，其中 redo log 日志记录的是数据页的物理变化，服务宕机可用来同步数据，而 undo log 不同，它主要记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在 undo log 日志文件中新增一条 delete 语句，如果发生回滚就执行逆操作；&lt;/p&gt;
&lt;p&gt;redo log 保证了事务的持久性，undo log 保证了事务的原子性和一致性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官事务中的隔离性是如何保证的呢你解释一下mvcc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官事务中的隔离性是如何保证的呢你解释一下mvcc&#34;&gt;#&lt;/a&gt; 面试官：事务中的隔离性是如何保证的呢？(你解释一下 MVCC)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：事务的隔离性是由锁和 mvcc 实现的。&lt;/p&gt;
&lt;p&gt;其中 mvcc 的意思是多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，它的底层实现主要是分为了三个部分，第一个是隐藏字段，第二个是 undo log 日志，第三个是 readView 读视图&lt;/p&gt;
&lt;p&gt;隐藏字段是指：在 mysql 中给每个表都设置了隐藏字段，有一个是 trx_id (事务 id)，记录每一次操作的事务 id，是自增的；另一个字段是 roll_pointer (回滚指针)，指向上一个版本的事务版本记录地址&lt;/p&gt;
&lt;p&gt;undo log 主要的作用是记录回滚日志，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过 roll_pointer 指针形成一个链表&lt;/p&gt;
&lt;p&gt;readView 解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务 id 判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是 rc 隔离级别，每一次执行快照读时生成 ReadView，如果是 rr 隔离级别仅在事务中第一次执行快照读时生成 ReadView，后续复用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官mysql主从同步原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官mysql主从同步原理&#34;&gt;#&lt;/a&gt; 面试官：MySQL 主从同步原理&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：MySQL 主从复制的核心就是二进制日志 (DDL（数据定义语言）语句和 DML（数据操纵语言）语句)，它的步骤是这样的：&lt;/p&gt;
&lt;p&gt;第一：主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。&lt;/p&gt;
&lt;p&gt;第二：从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。&lt;/p&gt;
&lt;p&gt;第三：从库重做中继日志中的事件，将改变反映它自己的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官你们项目用过mysql的分库分表吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官你们项目用过mysql的分库分表吗&#34;&gt;#&lt;/a&gt; 面试官：你们项目用过 MySQL 的分库分表吗？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，因为我们都是微服务开发，每个微服务对应了一个数据库，是根据业务进行拆分的，这个其实就是垂直拆分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官那你之前使用过水平分库吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官那你之前使用过水平分库吗&#34;&gt;#&lt;/a&gt; 面试官：那你之前使用过水平分库吗？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个是使用过的，我们当时的业务是 (xxx)，一开始，我们也是单库，后来这个业务逐渐发展，业务量上来的很迅速，其中 (xx) 表已经存放了超过 1000 万的数据，我们做了很多优化也不好使，性能依然很慢，所以当时就使用了水平分库。&lt;/p&gt;
&lt;p&gt;我们一开始先做了 3 台服务器对应了 3 个数据库，由于库多了，需要分片，我们当时采用的 mycat 来作为数据库的中间件。数据都是按照 id（自增）取模的方式来存取的。&lt;/p&gt;
&lt;p&gt;当然一开始的时候，那些旧数据，我们做了一些清洗的工作，我们也是按照 id 取模规则分别存储到了各个数据库中，好处就是可以让各个数据库分摊存储和读取的压力，解决了我们当时性能的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员 Java 面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="Mysql" scheme="https://anoxiahub.github.io/tags/Mysql/" />
        <updated>2023-08-05T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://anoxiahub.github.io/interview/Redis%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/</id>
        <title>Redis相关面试题</title>
        <link rel="alternate" href="https://anoxiahub.github.io/interview/Redis%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94/"/>
        <content type="html">&lt;h3 id=&#34;面试官什么是缓存穿透-怎么解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官什么是缓存穿透-怎么解决&#34;&gt;#&lt;/a&gt; 面试官：什么是缓存穿透？怎么解决？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯～～，我想一下&lt;/p&gt;
&lt;p&gt;缓存穿透是指查询一个一定&lt;strong&gt;不存在&lt;/strong&gt;的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。&lt;/p&gt;
&lt;p&gt;解决方案的话，我们通常都会用布隆过滤器来解决它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官好的你能介绍一下布隆过滤器吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官好的你能介绍一下布隆过滤器吗&#34;&gt;#&lt;/a&gt; 面试官：好的，你能介绍一下布隆过滤器吗？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，是这样～&lt;/p&gt;
&lt;p&gt;布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是 redisson 实现的布隆过滤器。&lt;/p&gt;
&lt;p&gt;它的底层主要是先去初始化一个比较大数组，里面存放的二进制 0 或 1。在一开始都是 0，当一个 key 来了之后经过 3 次 hash 计算，模于数组长度找到数据的下标然后把数组中原来的 0 改为 1，这样的话，三个数组的位置就能标明一个 key 的存在。查找的过程也是一样的。&lt;/p&gt;
&lt;p&gt;当然是有缺点的，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过 5%，其实这个误判是必然存在的，要不就得增加数组的长度，其实已经算是很划分了，5% 以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官什么是缓存击穿-怎么解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官什么是缓存击穿-怎么解决&#34;&gt;#&lt;/a&gt; 面试官：什么是缓存击穿？怎么解决？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！！&lt;/p&gt;
&lt;p&gt;缓存击穿的意思是对于设置了过期时间的 key，缓存在某个时间点过期的时候，恰好这时间点对这个 Key 有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。&lt;/p&gt;
&lt;p&gt;解决方案有两种方式：&lt;/p&gt;
&lt;p&gt;第一可以使用互斥锁：当缓存失效时，不立即去 load db，先使用如 Redis 的 setnx 去设置一个互斥锁，当操作成功返回时再进行 load db 的操作并回设缓存，否则重试 get 缓存的方法&lt;/p&gt;
&lt;p&gt;第二种方案可以设置当前 key 逻辑过期，大概是思路如下：&lt;/p&gt;
&lt;p&gt;①：在设置 key 的时候，设置一个过期时间字段一块存入缓存中，不给当前 key 设置过期时间&lt;/p&gt;
&lt;p&gt;②：当查询的时候，从 redis 取出数据后判断时间是否过期&lt;/p&gt;
&lt;p&gt;③：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据不是最新&lt;/p&gt;
&lt;p&gt;当然两种方案各有利弊：&lt;/p&gt;
&lt;p&gt;如果选择数据的强一致性，建议使用分布式锁的方案，性能上可能没那么高，锁需要等，也有可能产生死锁的问题&lt;/p&gt;
&lt;p&gt;如果选择 key 的逻辑删除，则优先考虑的高可用性，性能比较高，但是数据同步这块做不到强一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官什么是缓存雪崩-怎么解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官什么是缓存雪崩-怎么解决&#34;&gt;#&lt;/a&gt; 面试官：什么是缓存雪崩？怎么解决？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯！！&lt;/p&gt;
&lt;p&gt;缓存雪崩意思是设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到 DB，DB 瞬时压力过重雪崩。与缓存击穿的区别：雪崩是很多 key，击穿是某一个 key 缓存。&lt;/p&gt;
&lt;p&gt;解决方案主要是可以将缓存失效时间分散开，比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis做为缓存mysql的数据如何与redis进行同步呢双写一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis做为缓存mysql的数据如何与redis进行同步呢双写一致性&#34;&gt;#&lt;/a&gt; 面试官：redis 做为缓存，mysql 的数据如何与 redis 进行同步呢？（双写一致性）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯！就说我最近做的这个项目，里面有 xxxx（&lt;strong&gt;根据自己的简历上写&lt;/strong&gt;）的功能，需要让数据库与 redis 高度保持一致，因为要求时效性比较高，我们当时采用的读写锁保证的强一致性。&lt;/p&gt;
&lt;p&gt;我们采用的是 redisson 实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据。这里面需要注意的是读方法和写方法上需要使用同一把锁才行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官那这个排他锁是如何保证读写-读读互斥的呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官那这个排他锁是如何保证读写-读读互斥的呢&#34;&gt;#&lt;/a&gt; 面试官：那这个排他锁是如何保证读写、读读互斥的呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：其实排他锁底层使用也是 setnx，保证了同时只能有一个线程操作锁住的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官你听说过延时双删吗为什么不用它呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官你听说过延时双删吗为什么不用它呢&#34;&gt;#&lt;/a&gt; 面试官：你听说过延时双删吗？为什么不用它呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据，其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis做为缓存数据的持久化是怎么做的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis做为缓存数据的持久化是怎么做的&#34;&gt;#&lt;/a&gt; 面试官：redis 做为缓存，数据的持久化是怎么做的？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：在 Redis 中提供了两种数据持久化的方式：1、RDB  2、AOF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官这两种持久化方式有什么区别呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官这两种持久化方式有什么区别呢&#34;&gt;#&lt;/a&gt; 面试官：这两种持久化方式有什么区别呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：RDB 是一个快照文件，它是把 redis 内存存储的数据写到磁盘上，当 redis 实例宕机恢复数据的时候，方便从 RDB 的快照文件中恢复数据。&lt;/p&gt;
&lt;p&gt;AOF 的含义是追加文件，当 redis 操作写命令的时候，都会存储这个文件中，当 redis 实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官这两种方式哪种恢复的比较快呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官这两种方式哪种恢复的比较快呢&#34;&gt;#&lt;/a&gt; 面试官：这两种方式，哪种恢复的比较快呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：RDB 因为是二进制文件，在保存的时候体积也是比较小的，它恢复的比较快，但是它有可能会丢数据，我们通常在项目中也会使用 AOF 来恢复数据，虽然 AOF 恢复的速度慢一些，但是它丢数据的风险要小很多，在 AOF 文件中可以设置刷盘策略，我们当时设置的就是每秒批量写入一次命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis的数据过期策略有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis的数据过期策略有哪些&#34;&gt;#&lt;/a&gt; 面试官：Redis 的数据过期策略有哪些？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯～，在 redis 中提供了两种数据过期删除策略&lt;/p&gt;
&lt;p&gt;第一种是惰性删除，在设置该 key 过期时间后，我们不去管它，当需要该 key 时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该 key。&lt;/p&gt;
&lt;p&gt;第二种是 定期删除，就是说每隔一段时间，我们就对一些 key 进行检查，删除里面过期的 key&lt;/p&gt;
&lt;p&gt;定期清理的两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SLOW 模式是定时任务，执行频率默认为 10hz，每次不超过 25ms，以通过修改配置文件 redis.conf 的 &lt;strong&gt;hz&lt;/strong&gt; 选项来调整这个次数&lt;/li&gt;
&lt;li&gt;FAST 模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于 2ms，每次耗时不超过 1ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis 的过期删除策略：&lt;strong&gt;惰性删除 + 定期删除&lt;/strong&gt;两种策略进行配合使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis的数据淘汰策略有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis的数据淘汰策略有哪些&#34;&gt;#&lt;/a&gt; 面试官：Redis 的数据淘汰策略有哪些？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个在 redis 中提供了很多种，默认是 noeviction，不删除任何数据，内部不足直接报错&lt;/p&gt;
&lt;p&gt;是可以在 redis 的配置文件中进行设置的，里面有两个非常重要的概念，一个是 LRU，另外一个是 LFU&lt;/p&gt;
&lt;p&gt;LRU 的意思就是最少最近使用，用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。&lt;/p&gt;
&lt;p&gt;LFU 的意思是最少频率使用。会统计每个 key 的访问频率，值越小淘汰优先级越高&lt;/p&gt;
&lt;p&gt;我们在项目设置的 allkeys-lru，挑选最近最少使用的数据淘汰，把一些经常访问的 key 留在 redis 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官数据库有1000万数据-redis只能缓存20w数据-如何保证redis中的数据都是热点数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官数据库有1000万数据-redis只能缓存20w数据-如何保证redis中的数据都是热点数据&#34;&gt;#&lt;/a&gt; 面试官：数据库有 1000 万数据，Redis 只能缓存 20w 数据，如何保证 Redis 中的数据都是热点数据？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，我想一下～～&lt;/p&gt;
&lt;p&gt;可以使用 allkeys-lru （挑选最近最少使用的数据淘汰）淘汰策略，那留下来的都是经常访问的热点数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis的内存用完了会发生什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis的内存用完了会发生什么&#34;&gt;#&lt;/a&gt; 面试官：Redis 的内存用完了会发生什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯～，这个要看 redis 的数据淘汰策略是什么，如果是默认的配置，redis 内存用完以后则直接报错。我们当时设置的 allkeys-lru 策略。把最近最常访问的数据留在缓存中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis分布式锁如何实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis分布式锁如何实现&#34;&gt;#&lt;/a&gt; 面试官：Redis 分布式锁如何实现？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，在 redis 中提供了一个命令 setnx (SET if not exists)&lt;/p&gt;
&lt;p&gt;由于 redis 的单线程的，用了命令之后，只能有一个客户端对某一个 key 设置值，在没有过期或删除 key 的时候是其他客户端是不能设置这个 key 的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官好的那你如何控制redis实现分布式锁有效时长呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官好的那你如何控制redis实现分布式锁有效时长呢&#34;&gt;#&lt;/a&gt; 面试官：好的，那你如何控制 Redis 实现分布式锁有效时长呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，的确，redis 的 setnx 指令不好控制这个问题，我们当时采用的 redis 的一个框架 redisson 实现的。&lt;/p&gt;
&lt;p&gt;在 redisson 中需要手动加锁，并且可以控制锁的失效时间和等待时间，当锁住的一个业务还没有执行完成的时候，在 redisson 中引入了一个看门狗机制，就是说每隔一段时间就检查当前业务是否还持有锁，如果持有就增加加锁的持有时间，当业务执行完成之后需要使用释放锁就可以了&lt;/p&gt;
&lt;p&gt;还有一个好处就是，在高并发下，一个业务有可能会执行很快，先客户 1 持有锁的时候，客户 2 来了以后并不会马上拒绝，它会自旋不断尝试获取锁，如果客户 1 释放之后，客户 2 就可以马上持有锁，性能也得到了提升。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官好的redisson实现的分布式锁是可重入的吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官好的redisson实现的分布式锁是可重入的吗&#34;&gt;#&lt;/a&gt; 面试官：好的，redisson 实现的分布式锁是可重入的吗？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，是可以重入的。这样做是为了避免死锁的产生。这个重入其实在内部就是判断是否是当前线程持有的锁，如果是当前线程持有的锁就会计数，如果释放锁就会在计算上减一。在存储数据的时候采用的 hash 结构，大 key 可以按照自己的业务进行定制，其中小 key 是当前线程的唯一标识，value 是当前线程重入的次数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redisson实现的分布式锁能解决主从一致性的问题吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redisson实现的分布式锁能解决主从一致性的问题吗&#34;&gt;#&lt;/a&gt; 面试官：redisson 实现的分布式锁能解决主从一致性的问题吗&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：这个是不能的，比如，当线程 1 加锁成功后，master 节点数据会异步复制到 slave 节点，此时当前持有 Redis 锁的 master 节点宕机，slave 节点被提升为新的 master 节点，假如现在来了一个线程 2，再次加锁，会在新的 master 节点上加锁成功，这个时候就会出现两个节点同时持有一把锁的问题。&lt;/p&gt;
&lt;p&gt;我们可以利用 redisson 提供的红锁来解决这个问题，它的主要作用是，不能只在一个 redis 实例上创建锁，应该是在多个 redis 实例上创建锁，并且要求在大多数 redis 节点上都成功创建锁，红锁中要求是 redis 的节点数量要过半。这样就能避免线程 1 加锁成功后 master 节点宕机导致线程 2 成功加锁到新的 master 节点上的问题了。&lt;/p&gt;
&lt;p&gt;但是，如果使用了红锁，因为需要同时在多个节点上都添加锁，性能就变的很低了，并且运维维护成本也非常高，所以，我们一般在项目中也不会直接使用红锁，并且官方也暂时废弃了这个红锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官好的如果业务非要保证数据的强一致性这个该怎么解决呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官好的如果业务非要保证数据的强一致性这个该怎么解决呢&#34;&gt;#&lt;/a&gt; 面试官：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;** 候选人：** 嗯～，redis 本身就是支持高可用的，做到强一致性，就非常影响性能，所以，如果有强一致性要求高的业务，建议使用 zookeeper 实现的分布式锁，它是可以保证强一致性的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis集群有哪些方案-知道嘛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis集群有哪些方案-知道嘛&#34;&gt;#&lt;/a&gt; 面试官：Redis 集群有哪些方案，知道嘛？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯～～，在 Redis 中提供的集群方案总共有三种：主从复制、哨兵模式、Redis 分片集群&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官那你来介绍一下主从同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官那你来介绍一下主从同步&#34;&gt;#&lt;/a&gt; 面试官：那你来介绍一下主从同步&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯，是这样的，单节点 Redis 的并发能力是有上限的，要进一步提高 Redis 的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官能说一下主从同步数据的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官能说一下主从同步数据的流程&#34;&gt;#&lt;/a&gt; 面试官：能说一下，主从同步数据的流程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯～～，好！主从同步分为了两个阶段，一个是全量同步，一个是增量同步&lt;/p&gt;
&lt;p&gt;全量同步是指从节点第一次与主节点建立连接的时候使用全量同步，流程是这样的：&lt;/p&gt;
&lt;p&gt;第一：从节点请求主节点同步数据，其中从节点会携带自己的 replication id 和 offset 偏移量。&lt;/p&gt;
&lt;p&gt;第二：主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个 replication id，如果不是，就说明是第一次同步，那主节点就会把自己的 replication id 和 offset 发送给从节点，让从节点与主节点的信息保持一致。&lt;/p&gt;
&lt;p&gt;第三：在同时主节点会执行 bgsave，生成 rdb 文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发送过来的 rdb 文件，这样就保持了一致&lt;/p&gt;
&lt;p&gt;当然，如果在 rdb 生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步&lt;/p&gt;
&lt;p&gt;增量同步指的是，当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的 offset 值，然后主节点从命令日志中获取 offset 值之后的数据，发送给从节点进行数据同步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官怎么保证redis的高并发高可用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官怎么保证redis的高并发高可用&#34;&gt;#&lt;/a&gt; 面试官：怎么保证 Redis 的高并发高可用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：首先可以搭建主从集群，再加上使用 redis 中的哨兵模式，哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障恢复、通知；如果 master 故障，Sentinel 会将一个 slave 提升为 master。当故障实例恢复后也以新的 master 为主；同时 Sentinel 也充当 Redis 客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给 Redis 的客户端，所以一般项目都会采用哨兵的模式来保证 redis 的高并发高可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官你们使用redis是单点还是集群哪种集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官你们使用redis是单点还是集群哪种集群&#34;&gt;#&lt;/a&gt; 面试官：你们使用 redis 是单点还是集群，哪种集群&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯！，我们当时使用的是主从（1 主 1 从）加哨兵。一般单节点不超过 10G 内存，如果 Redis 内存不足则可以给不同服务分配独立的 Redis 主从节点。尽量不做分片集群。因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量的网络带宽，也没有办法使用 lua 脚本和事务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis集群脑裂该怎么解决呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis集群脑裂该怎么解决呢&#34;&gt;#&lt;/a&gt; 面试官：redis 集群脑裂，该怎么解决呢？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯！ 这个在项目很少见，不过脑裂的问题是这样的，我们现在用的是 redis 的哨兵模式集群的&lt;/p&gt;
&lt;p&gt;有的时候由于网络等原因可能会出现脑裂的情况，就是说，由于 redis master 节点和 redis salve 节点和 sentinel 处于不同的网络分区，使得 sentinel 没有能够心跳感知到 master，所以通过选举的方式提升了一个 salve 为 master，这样就存在了两个 master，就像大脑分裂了一样，这样会导致客户端还在 old master 那里写入数据，新节点无法同步数据，当网络恢复后，sentinel 会将 old master 降为 salve，这时再从新 master 同步数据，这会导致 old master 中的大量数据丢失。&lt;/p&gt;
&lt;p&gt;关于解决的话，我记得在 redis 的配置中可以设置：第一可以设置最少的 salve 节点个数，比如设置至少要有一个从节点才能同步数据，第二个可以设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis的分片集群有什么作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis的分片集群有什么作用&#34;&gt;#&lt;/a&gt; 面试官：redis 的分片集群有什么作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：分片集群主要解决的是，海量数据存储的问题，集群中有多个 master，每个 master 保存不同数据，并且还可以给每个 master 设置多个 slave 节点，就可以继续增大集群的高并发能力。同时每个 master 之间通过 ping 监测彼此健康状态，就类似于哨兵模式了。当客户端请求可以访问集群任意节点，最终都会被转发到正确节点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis分片集群中数据是怎么存储和读取的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis分片集群中数据是怎么存储和读取的&#34;&gt;#&lt;/a&gt; 面试官：Redis 分片集群中数据是怎么存储和读取的？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯～，在 redis 集群中是这样的&lt;/p&gt;
&lt;p&gt;Redis 集群引入了哈希槽的概念，有 16384 个哈希槽，集群中每个主节点绑定了一定范围的哈希槽范围， key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽，通过槽找到对应的节点进行存储。&lt;/p&gt;
&lt;p&gt;取值的逻辑是一样的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官redis是单线程的但是为什么还那么快&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官redis是单线程的但是为什么还那么快&#34;&gt;#&lt;/a&gt; 面试官：Redis 是单线程的，但是为什么还那么快？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;嗯，这个有几个原因吧～～～&lt;/p&gt;
&lt;p&gt;1、完全基于内存的，C 语言编写&lt;/p&gt;
&lt;p&gt;2、采用单线程，避免不必要的上下文切换可竞争条件&lt;/p&gt;
&lt;p&gt;3、使用多路 I/O 复用模型，非阻塞 IO&lt;/p&gt;
&lt;p&gt;例如：bgsave 和 bgrewriteaof  都是在&lt;strong&gt;后台&lt;/strong&gt;执行操作，不影响主线程的正常使用，不会产生阻塞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面试官能解释一下io多路复用模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面试官能解释一下io多路复用模型&#34;&gt;#&lt;/a&gt; 面试官：能解释一下 I/O 多路复用模型？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;候选人&lt;/strong&gt;：嗯～～，I/O 多路复用是指利用单个线程来同时监听多个 Socket ，并在某个 Socket 可读、可写时得到通知，从而避免无效的等待，充分利用 CPU 资源。目前的 I/O 多路复用都是采用的 epoll 模式实现，它会在通知用户进程 Socket 就绪的同时，把已就绪的 Socket 写入用户空间，不需要挨个遍历 Socket 来判断是否就绪，提升了性能。&lt;/p&gt;
&lt;p&gt;其中 Redis 的网络模型就是使用 I/O 多路复用结合事件的处理器来应对多个 Socket 请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；&lt;/p&gt;
&lt;p&gt;在 Redis6.0 之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本文引自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8=&#34;&gt;黑马程序员 Java 面试宝典&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="面经" scheme="https://anoxiahub.github.io/categories/interview/" />
        <category term="Redis" scheme="https://anoxiahub.github.io/tags/Redis/" />
        <updated>2023-08-05T16:00:00.000Z</updated>
    </entry>
</feed>
